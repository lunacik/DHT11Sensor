
TempSensOnStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006940  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08006a50  08006a50  00016a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000006c  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000067c  20000000  08006f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000000ec  2000067c  080075e0  0002067c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000768  080075e0  00020768  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001160a  00000000  00000000  000206a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002441  00000000  00000000  00031caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005e53  00000000  00000000  000340f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  00039f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  0003a848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004c5a  00000000  00000000  0003b328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003800  00000000  00000000  0003ff82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00043782  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002be8  00000000  00000000  00043800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000067c 	.word	0x2000067c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a38 	.word	0x08006a38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000680 	.word	0x20000680
 800014c:	08006a38 	.word	0x08006a38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_frsub>:
 8000a80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a84:	e002      	b.n	8000a8c <__addsf3>
 8000a86:	bf00      	nop

08000a88 <__aeabi_fsub>:
 8000a88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a8c <__addsf3>:
 8000a8c:	0042      	lsls	r2, r0, #1
 8000a8e:	bf1f      	itttt	ne
 8000a90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a94:	ea92 0f03 	teqne	r2, r3
 8000a98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa0:	d06a      	beq.n	8000b78 <__addsf3+0xec>
 8000aa2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aaa:	bfc1      	itttt	gt
 8000aac:	18d2      	addgt	r2, r2, r3
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	4048      	eorgt	r0, r1
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	bfb8      	it	lt
 8000ab6:	425b      	neglt	r3, r3
 8000ab8:	2b19      	cmp	r3, #25
 8000aba:	bf88      	it	hi
 8000abc:	4770      	bxhi	lr
 8000abe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ad6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4249      	negne	r1, r1
 8000ade:	ea92 0f03 	teq	r2, r3
 8000ae2:	d03f      	beq.n	8000b64 <__addsf3+0xd8>
 8000ae4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae8:	fa41 fc03 	asr.w	ip, r1, r3
 8000aec:	eb10 000c 	adds.w	r0, r0, ip
 8000af0:	f1c3 0320 	rsb	r3, r3, #32
 8000af4:	fa01 f103 	lsl.w	r1, r1, r3
 8000af8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__addsf3+0x78>
 8000afe:	4249      	negs	r1, r1
 8000b00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b08:	d313      	bcc.n	8000b32 <__addsf3+0xa6>
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d306      	bcc.n	8000b1e <__addsf3+0x92>
 8000b10:	0840      	lsrs	r0, r0, #1
 8000b12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b16:	f102 0201 	add.w	r2, r2, #1
 8000b1a:	2afe      	cmp	r2, #254	; 0xfe
 8000b1c:	d251      	bcs.n	8000bc2 <__addsf3+0x136>
 8000b1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	ea40 0003 	orr.w	r0, r0, r3
 8000b30:	4770      	bx	lr
 8000b32:	0049      	lsls	r1, r1, #1
 8000b34:	eb40 0000 	adc.w	r0, r0, r0
 8000b38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	d1ed      	bne.n	8000b1e <__addsf3+0x92>
 8000b42:	fab0 fc80 	clz	ip, r0
 8000b46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b52:	bfaa      	itet	ge
 8000b54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b58:	4252      	neglt	r2, r2
 8000b5a:	4318      	orrge	r0, r3
 8000b5c:	bfbc      	itt	lt
 8000b5e:	40d0      	lsrlt	r0, r2
 8000b60:	4318      	orrlt	r0, r3
 8000b62:	4770      	bx	lr
 8000b64:	f092 0f00 	teq	r2, #0
 8000b68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b6c:	bf06      	itte	eq
 8000b6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b72:	3201      	addeq	r2, #1
 8000b74:	3b01      	subne	r3, #1
 8000b76:	e7b5      	b.n	8000ae4 <__addsf3+0x58>
 8000b78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	bf18      	it	ne
 8000b82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b86:	d021      	beq.n	8000bcc <__addsf3+0x140>
 8000b88:	ea92 0f03 	teq	r2, r3
 8000b8c:	d004      	beq.n	8000b98 <__addsf3+0x10c>
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	bf08      	it	eq
 8000b94:	4608      	moveq	r0, r1
 8000b96:	4770      	bx	lr
 8000b98:	ea90 0f01 	teq	r0, r1
 8000b9c:	bf1c      	itt	ne
 8000b9e:	2000      	movne	r0, #0
 8000ba0:	4770      	bxne	lr
 8000ba2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ba6:	d104      	bne.n	8000bb2 <__addsf3+0x126>
 8000ba8:	0040      	lsls	r0, r0, #1
 8000baa:	bf28      	it	cs
 8000bac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	4770      	bx	lr
 8000bb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bb6:	bf3c      	itt	cc
 8000bb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bxcc	lr
 8000bbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd0:	bf16      	itet	ne
 8000bd2:	4608      	movne	r0, r1
 8000bd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd8:	4601      	movne	r1, r0
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	bf06      	itte	eq
 8000bde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be2:	ea90 0f01 	teqeq	r0, r1
 8000be6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ui2f>:
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e004      	b.n	8000bfc <__aeabi_i2f+0x8>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_i2f>:
 8000bf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	bf48      	it	mi
 8000bfa:	4240      	negmi	r0, r0
 8000bfc:	ea5f 0c00 	movs.w	ip, r0
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c08:	4601      	mov	r1, r0
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	e01c      	b.n	8000c4a <__aeabi_l2f+0x2a>

08000c10 <__aeabi_ul2f>:
 8000c10:	ea50 0201 	orrs.w	r2, r0, r1
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e00a      	b.n	8000c34 <__aeabi_l2f+0x14>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_l2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__aeabi_l2f+0x14>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	ea5f 0c01 	movs.w	ip, r1
 8000c38:	bf02      	ittt	eq
 8000c3a:	4684      	moveq	ip, r0
 8000c3c:	4601      	moveq	r1, r0
 8000c3e:	2000      	moveq	r0, #0
 8000c40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c44:	bf08      	it	eq
 8000c46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c4e:	fabc f28c 	clz	r2, ip
 8000c52:	3a08      	subs	r2, #8
 8000c54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c58:	db10      	blt.n	8000c7c <__aeabi_l2f+0x5c>
 8000c5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5e:	4463      	add	r3, ip
 8000c60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c64:	f1c2 0220 	rsb	r2, r2, #32
 8000c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	eb43 0002 	adc.w	r0, r3, r2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f102 0220 	add.w	r2, r2, #32
 8000c80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c84:	f1c2 0220 	rsb	r2, r2, #32
 8000c88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c90:	eb43 0002 	adc.w	r0, r3, r2
 8000c94:	bf08      	it	eq
 8000c96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_fmul>:
 8000c9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000caa:	ea92 0f0c 	teqne	r2, ip
 8000cae:	ea93 0f0c 	teqne	r3, ip
 8000cb2:	d06f      	beq.n	8000d94 <__aeabi_fmul+0xf8>
 8000cb4:	441a      	add	r2, r3
 8000cb6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cba:	0240      	lsls	r0, r0, #9
 8000cbc:	bf18      	it	ne
 8000cbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc2:	d01e      	beq.n	8000d02 <__aeabi_fmul+0x66>
 8000cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ccc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cdc:	bf3e      	ittt	cc
 8000cde:	0049      	lslcc	r1, r1, #1
 8000ce0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce4:	005b      	lslcc	r3, r3, #1
 8000ce6:	ea40 0001 	orr.w	r0, r0, r1
 8000cea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cee:	2afd      	cmp	r2, #253	; 0xfd
 8000cf0:	d81d      	bhi.n	8000d2e <__aeabi_fmul+0x92>
 8000cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	4770      	bx	lr
 8000d02:	f090 0f00 	teq	r0, #0
 8000d06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0a:	bf08      	it	eq
 8000d0c:	0249      	lsleq	r1, r1, #9
 8000d0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d16:	3a7f      	subs	r2, #127	; 0x7f
 8000d18:	bfc2      	ittt	gt
 8000d1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d22:	4770      	bxgt	lr
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	dc5d      	bgt.n	8000dec <__aeabi_fmul+0x150>
 8000d30:	f112 0f19 	cmn.w	r2, #25
 8000d34:	bfdc      	itt	le
 8000d36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3a:	4770      	bxle	lr
 8000d3c:	f1c2 0200 	rsb	r2, r2, #0
 8000d40:	0041      	lsls	r1, r0, #1
 8000d42:	fa21 f102 	lsr.w	r1, r1, r2
 8000d46:	f1c2 0220 	rsb	r2, r2, #32
 8000d4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d52:	f140 0000 	adc.w	r0, r0, #0
 8000d56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5a:	bf08      	it	eq
 8000d5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d60:	4770      	bx	lr
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0040      	lsleq	r0, r0, #1
 8000d6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d72:	3a01      	subeq	r2, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xce>
 8000d76:	ea40 000c 	orr.w	r0, r0, ip
 8000d7a:	f093 0f00 	teq	r3, #0
 8000d7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0049      	lsleq	r1, r1, #1
 8000d86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8a:	3b01      	subeq	r3, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fmul+0xe6>
 8000d8e:	ea41 010c 	orr.w	r1, r1, ip
 8000d92:	e78f      	b.n	8000cb4 <__aeabi_fmul+0x18>
 8000d94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d98:	ea92 0f0c 	teq	r2, ip
 8000d9c:	bf18      	it	ne
 8000d9e:	ea93 0f0c 	teqne	r3, ip
 8000da2:	d00a      	beq.n	8000dba <__aeabi_fmul+0x11e>
 8000da4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da8:	bf18      	it	ne
 8000daa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	d1d8      	bne.n	8000d62 <__aeabi_fmul+0xc6>
 8000db0:	ea80 0001 	eor.w	r0, r0, r1
 8000db4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	bf17      	itett	ne
 8000dc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc4:	4608      	moveq	r0, r1
 8000dc6:	f091 0f00 	teqne	r1, #0
 8000dca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dce:	d014      	beq.n	8000dfa <__aeabi_fmul+0x15e>
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d101      	bne.n	8000dda <__aeabi_fmul+0x13e>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	d10f      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000dda:	ea93 0f0c 	teq	r3, ip
 8000dde:	d103      	bne.n	8000de8 <__aeabi_fmul+0x14c>
 8000de0:	024b      	lsls	r3, r1, #9
 8000de2:	bf18      	it	ne
 8000de4:	4608      	movne	r0, r1
 8000de6:	d108      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	4770      	bx	lr
 8000dfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fdiv>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d069      	beq.n	8000ef0 <__aeabi_fdiv+0xec>
 8000e1c:	eba2 0203 	sub.w	r2, r2, r3
 8000e20:	ea80 0c01 	eor.w	ip, r0, r1
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2a:	d037      	beq.n	8000e9c <__aeabi_fdiv+0x98>
 8000e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	bf38      	it	cc
 8000e40:	005b      	lslcc	r3, r3, #1
 8000e42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	bf24      	itt	cs
 8000e4e:	1a5b      	subcs	r3, r3, r1
 8000e50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e66:	bf24      	itt	cs
 8000e68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	bf18      	it	ne
 8000e82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e86:	d1e0      	bne.n	8000e4a <__aeabi_fdiv+0x46>
 8000e88:	2afd      	cmp	r2, #253	; 0xfd
 8000e8a:	f63f af50 	bhi.w	8000d2e <__aeabi_fmul+0x92>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e94:	bf08      	it	eq
 8000e96:	f020 0001 	biceq.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea4:	327f      	adds	r2, #127	; 0x7f
 8000ea6:	bfc2      	ittt	gt
 8000ea8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb0:	4770      	bxgt	lr
 8000eb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	3a01      	subs	r2, #1
 8000ebc:	e737      	b.n	8000d2e <__aeabi_fmul+0x92>
 8000ebe:	f092 0f00 	teq	r2, #0
 8000ec2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0040      	lsleq	r0, r0, #1
 8000eca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ece:	3a01      	subeq	r2, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xc2>
 8000ed2:	ea40 000c 	orr.w	r0, r0, ip
 8000ed6:	f093 0f00 	teq	r3, #0
 8000eda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0049      	lsleq	r1, r1, #1
 8000ee2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ee6:	3b01      	subeq	r3, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fdiv+0xda>
 8000eea:	ea41 010c 	orr.w	r1, r1, ip
 8000eee:	e795      	b.n	8000e1c <__aeabi_fdiv+0x18>
 8000ef0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef4:	ea92 0f0c 	teq	r2, ip
 8000ef8:	d108      	bne.n	8000f0c <__aeabi_fdiv+0x108>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	f47f af7d 	bne.w	8000dfa <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	f47f af70 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e776      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	d104      	bne.n	8000f1c <__aeabi_fdiv+0x118>
 8000f12:	024b      	lsls	r3, r1, #9
 8000f14:	f43f af4c 	beq.w	8000db0 <__aeabi_fmul+0x114>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e76e      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1ca      	bne.n	8000ebe <__aeabi_fdiv+0xba>
 8000f28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f2c:	f47f af5c 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f34:	f47f af3c 	bne.w	8000db0 <__aeabi_fmul+0x114>
 8000f38:	e75f      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f3a:	bf00      	nop

08000f3c <__gesf2>:
 8000f3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f40:	e006      	b.n	8000f50 <__cmpsf2+0x4>
 8000f42:	bf00      	nop

08000f44 <__lesf2>:
 8000f44:	f04f 0c01 	mov.w	ip, #1
 8000f48:	e002      	b.n	8000f50 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__cmpsf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f60:	bf18      	it	ne
 8000f62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f66:	d011      	beq.n	8000f8c <__cmpsf2+0x40>
 8000f68:	b001      	add	sp, #4
 8000f6a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f6e:	bf18      	it	ne
 8000f70:	ea90 0f01 	teqne	r0, r1
 8000f74:	bf58      	it	pl
 8000f76:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f7a:	bf88      	it	hi
 8000f7c:	17c8      	asrhi	r0, r1, #31
 8000f7e:	bf38      	it	cc
 8000f80:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f84:	bf18      	it	ne
 8000f86:	f040 0001 	orrne.w	r0, r0, #1
 8000f8a:	4770      	bx	lr
 8000f8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f90:	d102      	bne.n	8000f98 <__cmpsf2+0x4c>
 8000f92:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f96:	d105      	bne.n	8000fa4 <__cmpsf2+0x58>
 8000f98:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f9c:	d1e4      	bne.n	8000f68 <__cmpsf2+0x1c>
 8000f9e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fa2:	d0e1      	beq.n	8000f68 <__cmpsf2+0x1c>
 8000fa4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <__aeabi_cfrcmple>:
 8000fac:	4684      	mov	ip, r0
 8000fae:	4608      	mov	r0, r1
 8000fb0:	4661      	mov	r1, ip
 8000fb2:	e7ff      	b.n	8000fb4 <__aeabi_cfcmpeq>

08000fb4 <__aeabi_cfcmpeq>:
 8000fb4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fb6:	f7ff ffc9 	bl	8000f4c <__cmpsf2>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	bf48      	it	mi
 8000fbe:	f110 0f00 	cmnmi.w	r0, #0
 8000fc2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fc4 <__aeabi_fcmpeq>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff fff4 	bl	8000fb4 <__aeabi_cfcmpeq>
 8000fcc:	bf0c      	ite	eq
 8000fce:	2001      	moveq	r0, #1
 8000fd0:	2000      	movne	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmplt>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffea 	bl	8000fb4 <__aeabi_cfcmpeq>
 8000fe0:	bf34      	ite	cc
 8000fe2:	2001      	movcc	r0, #1
 8000fe4:	2000      	movcs	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmple>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffe0 	bl	8000fb4 <__aeabi_cfcmpeq>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmpge>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffd2 	bl	8000fac <__aeabi_cfrcmple>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpgt>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffc8 	bl	8000fac <__aeabi_cfrcmple>
 800101c:	bf34      	ite	cc
 800101e:	2001      	movcc	r0, #1
 8001020:	2000      	movcs	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_f2uiz>:
 8001028:	0042      	lsls	r2, r0, #1
 800102a:	d20e      	bcs.n	800104a <__aeabi_f2uiz+0x22>
 800102c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001030:	d30b      	bcc.n	800104a <__aeabi_f2uiz+0x22>
 8001032:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001036:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800103a:	d409      	bmi.n	8001050 <__aeabi_f2uiz+0x28>
 800103c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	4770      	bx	lr
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4770      	bx	lr
 8001050:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001054:	d101      	bne.n	800105a <__aeabi_f2uiz+0x32>
 8001056:	0242      	lsls	r2, r0, #9
 8001058:	d102      	bne.n	8001060 <__aeabi_f2uiz+0x38>
 800105a:	f04f 30ff 	mov.w	r0, #4294967295
 800105e:	4770      	bx	lr
 8001060:	f04f 0000 	mov.w	r0, #0
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_uldivmod>:
 8001068:	b953      	cbnz	r3, 8001080 <__aeabi_uldivmod+0x18>
 800106a:	b94a      	cbnz	r2, 8001080 <__aeabi_uldivmod+0x18>
 800106c:	2900      	cmp	r1, #0
 800106e:	bf08      	it	eq
 8001070:	2800      	cmpeq	r0, #0
 8001072:	bf1c      	itt	ne
 8001074:	f04f 31ff 	movne.w	r1, #4294967295
 8001078:	f04f 30ff 	movne.w	r0, #4294967295
 800107c:	f001 b900 	b.w	8002280 <__aeabi_idiv0>
 8001080:	f1ad 0c08 	sub.w	ip, sp, #8
 8001084:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001088:	f000 f806 	bl	8001098 <__udivmoddi4>
 800108c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <__udivmoddi4>:
 8001098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800109c:	468c      	mov	ip, r1
 800109e:	460e      	mov	r6, r1
 80010a0:	4604      	mov	r4, r0
 80010a2:	9d08      	ldr	r5, [sp, #32]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d150      	bne.n	800114a <__udivmoddi4+0xb2>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	4617      	mov	r7, r2
 80010ac:	d96c      	bls.n	8001188 <__udivmoddi4+0xf0>
 80010ae:	fab2 fe82 	clz	lr, r2
 80010b2:	f1be 0f00 	cmp.w	lr, #0
 80010b6:	d00b      	beq.n	80010d0 <__udivmoddi4+0x38>
 80010b8:	f1ce 0c20 	rsb	ip, lr, #32
 80010bc:	fa01 f60e 	lsl.w	r6, r1, lr
 80010c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010c4:	fa02 f70e 	lsl.w	r7, r2, lr
 80010c8:	ea4c 0c06 	orr.w	ip, ip, r6
 80010cc:	fa00 f40e 	lsl.w	r4, r0, lr
 80010d0:	0c3a      	lsrs	r2, r7, #16
 80010d2:	fbbc f9f2 	udiv	r9, ip, r2
 80010d6:	b2bb      	uxth	r3, r7
 80010d8:	fb02 cc19 	mls	ip, r2, r9, ip
 80010dc:	fb09 fa03 	mul.w	sl, r9, r3
 80010e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80010e4:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80010e8:	45b2      	cmp	sl, r6
 80010ea:	d90a      	bls.n	8001102 <__udivmoddi4+0x6a>
 80010ec:	19f6      	adds	r6, r6, r7
 80010ee:	f109 31ff 	add.w	r1, r9, #4294967295
 80010f2:	f080 8125 	bcs.w	8001340 <__udivmoddi4+0x2a8>
 80010f6:	45b2      	cmp	sl, r6
 80010f8:	f240 8122 	bls.w	8001340 <__udivmoddi4+0x2a8>
 80010fc:	f1a9 0902 	sub.w	r9, r9, #2
 8001100:	443e      	add	r6, r7
 8001102:	eba6 060a 	sub.w	r6, r6, sl
 8001106:	fbb6 f0f2 	udiv	r0, r6, r2
 800110a:	fb02 6610 	mls	r6, r2, r0, r6
 800110e:	fb00 f303 	mul.w	r3, r0, r3
 8001112:	b2a4      	uxth	r4, r4
 8001114:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001118:	42a3      	cmp	r3, r4
 800111a:	d909      	bls.n	8001130 <__udivmoddi4+0x98>
 800111c:	19e4      	adds	r4, r4, r7
 800111e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001122:	f080 810b 	bcs.w	800133c <__udivmoddi4+0x2a4>
 8001126:	42a3      	cmp	r3, r4
 8001128:	f240 8108 	bls.w	800133c <__udivmoddi4+0x2a4>
 800112c:	3802      	subs	r0, #2
 800112e:	443c      	add	r4, r7
 8001130:	2100      	movs	r1, #0
 8001132:	1ae4      	subs	r4, r4, r3
 8001134:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001138:	2d00      	cmp	r5, #0
 800113a:	d062      	beq.n	8001202 <__udivmoddi4+0x16a>
 800113c:	2300      	movs	r3, #0
 800113e:	fa24 f40e 	lsr.w	r4, r4, lr
 8001142:	602c      	str	r4, [r5, #0]
 8001144:	606b      	str	r3, [r5, #4]
 8001146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114a:	428b      	cmp	r3, r1
 800114c:	d907      	bls.n	800115e <__udivmoddi4+0xc6>
 800114e:	2d00      	cmp	r5, #0
 8001150:	d055      	beq.n	80011fe <__udivmoddi4+0x166>
 8001152:	2100      	movs	r1, #0
 8001154:	e885 0041 	stmia.w	r5, {r0, r6}
 8001158:	4608      	mov	r0, r1
 800115a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115e:	fab3 f183 	clz	r1, r3
 8001162:	2900      	cmp	r1, #0
 8001164:	f040 808f 	bne.w	8001286 <__udivmoddi4+0x1ee>
 8001168:	42b3      	cmp	r3, r6
 800116a:	d302      	bcc.n	8001172 <__udivmoddi4+0xda>
 800116c:	4282      	cmp	r2, r0
 800116e:	f200 80fc 	bhi.w	800136a <__udivmoddi4+0x2d2>
 8001172:	1a84      	subs	r4, r0, r2
 8001174:	eb66 0603 	sbc.w	r6, r6, r3
 8001178:	2001      	movs	r0, #1
 800117a:	46b4      	mov	ip, r6
 800117c:	2d00      	cmp	r5, #0
 800117e:	d040      	beq.n	8001202 <__udivmoddi4+0x16a>
 8001180:	e885 1010 	stmia.w	r5, {r4, ip}
 8001184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001188:	b912      	cbnz	r2, 8001190 <__udivmoddi4+0xf8>
 800118a:	2701      	movs	r7, #1
 800118c:	fbb7 f7f2 	udiv	r7, r7, r2
 8001190:	fab7 fe87 	clz	lr, r7
 8001194:	f1be 0f00 	cmp.w	lr, #0
 8001198:	d135      	bne.n	8001206 <__udivmoddi4+0x16e>
 800119a:	2101      	movs	r1, #1
 800119c:	1bf6      	subs	r6, r6, r7
 800119e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80011a2:	fa1f f887 	uxth.w	r8, r7
 80011a6:	fbb6 f2fc 	udiv	r2, r6, ip
 80011aa:	fb0c 6612 	mls	r6, ip, r2, r6
 80011ae:	fb08 f002 	mul.w	r0, r8, r2
 80011b2:	0c23      	lsrs	r3, r4, #16
 80011b4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80011b8:	42b0      	cmp	r0, r6
 80011ba:	d907      	bls.n	80011cc <__udivmoddi4+0x134>
 80011bc:	19f6      	adds	r6, r6, r7
 80011be:	f102 33ff 	add.w	r3, r2, #4294967295
 80011c2:	d202      	bcs.n	80011ca <__udivmoddi4+0x132>
 80011c4:	42b0      	cmp	r0, r6
 80011c6:	f200 80d2 	bhi.w	800136e <__udivmoddi4+0x2d6>
 80011ca:	461a      	mov	r2, r3
 80011cc:	1a36      	subs	r6, r6, r0
 80011ce:	fbb6 f0fc 	udiv	r0, r6, ip
 80011d2:	fb0c 6610 	mls	r6, ip, r0, r6
 80011d6:	fb08 f800 	mul.w	r8, r8, r0
 80011da:	b2a3      	uxth	r3, r4
 80011dc:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80011e0:	45a0      	cmp	r8, r4
 80011e2:	d907      	bls.n	80011f4 <__udivmoddi4+0x15c>
 80011e4:	19e4      	adds	r4, r4, r7
 80011e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80011ea:	d202      	bcs.n	80011f2 <__udivmoddi4+0x15a>
 80011ec:	45a0      	cmp	r8, r4
 80011ee:	f200 80b9 	bhi.w	8001364 <__udivmoddi4+0x2cc>
 80011f2:	4618      	mov	r0, r3
 80011f4:	eba4 0408 	sub.w	r4, r4, r8
 80011f8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80011fc:	e79c      	b.n	8001138 <__udivmoddi4+0xa0>
 80011fe:	4629      	mov	r1, r5
 8001200:	4628      	mov	r0, r5
 8001202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001206:	fa07 f70e 	lsl.w	r7, r7, lr
 800120a:	f1ce 0320 	rsb	r3, lr, #32
 800120e:	fa26 f203 	lsr.w	r2, r6, r3
 8001212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001216:	fbb2 f1fc 	udiv	r1, r2, ip
 800121a:	fa1f f887 	uxth.w	r8, r7
 800121e:	fb0c 2211 	mls	r2, ip, r1, r2
 8001222:	fa06 f60e 	lsl.w	r6, r6, lr
 8001226:	fa20 f303 	lsr.w	r3, r0, r3
 800122a:	fb01 f908 	mul.w	r9, r1, r8
 800122e:	4333      	orrs	r3, r6
 8001230:	0c1e      	lsrs	r6, r3, #16
 8001232:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001236:	45b1      	cmp	r9, r6
 8001238:	fa00 f40e 	lsl.w	r4, r0, lr
 800123c:	d909      	bls.n	8001252 <__udivmoddi4+0x1ba>
 800123e:	19f6      	adds	r6, r6, r7
 8001240:	f101 32ff 	add.w	r2, r1, #4294967295
 8001244:	f080 808c 	bcs.w	8001360 <__udivmoddi4+0x2c8>
 8001248:	45b1      	cmp	r9, r6
 800124a:	f240 8089 	bls.w	8001360 <__udivmoddi4+0x2c8>
 800124e:	3902      	subs	r1, #2
 8001250:	443e      	add	r6, r7
 8001252:	eba6 0609 	sub.w	r6, r6, r9
 8001256:	fbb6 f0fc 	udiv	r0, r6, ip
 800125a:	fb0c 6210 	mls	r2, ip, r0, r6
 800125e:	fb00 f908 	mul.w	r9, r0, r8
 8001262:	b29e      	uxth	r6, r3
 8001264:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001268:	45b1      	cmp	r9, r6
 800126a:	d907      	bls.n	800127c <__udivmoddi4+0x1e4>
 800126c:	19f6      	adds	r6, r6, r7
 800126e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001272:	d271      	bcs.n	8001358 <__udivmoddi4+0x2c0>
 8001274:	45b1      	cmp	r9, r6
 8001276:	d96f      	bls.n	8001358 <__udivmoddi4+0x2c0>
 8001278:	3802      	subs	r0, #2
 800127a:	443e      	add	r6, r7
 800127c:	eba6 0609 	sub.w	r6, r6, r9
 8001280:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001284:	e78f      	b.n	80011a6 <__udivmoddi4+0x10e>
 8001286:	f1c1 0720 	rsb	r7, r1, #32
 800128a:	fa22 f807 	lsr.w	r8, r2, r7
 800128e:	408b      	lsls	r3, r1
 8001290:	ea48 0303 	orr.w	r3, r8, r3
 8001294:	fa26 f407 	lsr.w	r4, r6, r7
 8001298:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800129c:	fbb4 f9fe 	udiv	r9, r4, lr
 80012a0:	fa1f fc83 	uxth.w	ip, r3
 80012a4:	fb0e 4419 	mls	r4, lr, r9, r4
 80012a8:	408e      	lsls	r6, r1
 80012aa:	fa20 f807 	lsr.w	r8, r0, r7
 80012ae:	fb09 fa0c 	mul.w	sl, r9, ip
 80012b2:	ea48 0806 	orr.w	r8, r8, r6
 80012b6:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80012ba:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80012be:	45a2      	cmp	sl, r4
 80012c0:	fa02 f201 	lsl.w	r2, r2, r1
 80012c4:	fa00 f601 	lsl.w	r6, r0, r1
 80012c8:	d908      	bls.n	80012dc <__udivmoddi4+0x244>
 80012ca:	18e4      	adds	r4, r4, r3
 80012cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80012d0:	d244      	bcs.n	800135c <__udivmoddi4+0x2c4>
 80012d2:	45a2      	cmp	sl, r4
 80012d4:	d942      	bls.n	800135c <__udivmoddi4+0x2c4>
 80012d6:	f1a9 0902 	sub.w	r9, r9, #2
 80012da:	441c      	add	r4, r3
 80012dc:	eba4 040a 	sub.w	r4, r4, sl
 80012e0:	fbb4 f0fe 	udiv	r0, r4, lr
 80012e4:	fb0e 4410 	mls	r4, lr, r0, r4
 80012e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80012ec:	fa1f f888 	uxth.w	r8, r8
 80012f0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80012f4:	45a4      	cmp	ip, r4
 80012f6:	d907      	bls.n	8001308 <__udivmoddi4+0x270>
 80012f8:	18e4      	adds	r4, r4, r3
 80012fa:	f100 3eff 	add.w	lr, r0, #4294967295
 80012fe:	d229      	bcs.n	8001354 <__udivmoddi4+0x2bc>
 8001300:	45a4      	cmp	ip, r4
 8001302:	d927      	bls.n	8001354 <__udivmoddi4+0x2bc>
 8001304:	3802      	subs	r0, #2
 8001306:	441c      	add	r4, r3
 8001308:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800130c:	fba0 8902 	umull	r8, r9, r0, r2
 8001310:	eba4 0c0c 	sub.w	ip, r4, ip
 8001314:	45cc      	cmp	ip, r9
 8001316:	46c2      	mov	sl, r8
 8001318:	46ce      	mov	lr, r9
 800131a:	d315      	bcc.n	8001348 <__udivmoddi4+0x2b0>
 800131c:	d012      	beq.n	8001344 <__udivmoddi4+0x2ac>
 800131e:	b155      	cbz	r5, 8001336 <__udivmoddi4+0x29e>
 8001320:	ebb6 030a 	subs.w	r3, r6, sl
 8001324:	eb6c 060e 	sbc.w	r6, ip, lr
 8001328:	fa06 f707 	lsl.w	r7, r6, r7
 800132c:	40cb      	lsrs	r3, r1
 800132e:	431f      	orrs	r7, r3
 8001330:	40ce      	lsrs	r6, r1
 8001332:	602f      	str	r7, [r5, #0]
 8001334:	606e      	str	r6, [r5, #4]
 8001336:	2100      	movs	r1, #0
 8001338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133c:	4610      	mov	r0, r2
 800133e:	e6f7      	b.n	8001130 <__udivmoddi4+0x98>
 8001340:	4689      	mov	r9, r1
 8001342:	e6de      	b.n	8001102 <__udivmoddi4+0x6a>
 8001344:	4546      	cmp	r6, r8
 8001346:	d2ea      	bcs.n	800131e <__udivmoddi4+0x286>
 8001348:	ebb8 0a02 	subs.w	sl, r8, r2
 800134c:	eb69 0e03 	sbc.w	lr, r9, r3
 8001350:	3801      	subs	r0, #1
 8001352:	e7e4      	b.n	800131e <__udivmoddi4+0x286>
 8001354:	4670      	mov	r0, lr
 8001356:	e7d7      	b.n	8001308 <__udivmoddi4+0x270>
 8001358:	4618      	mov	r0, r3
 800135a:	e78f      	b.n	800127c <__udivmoddi4+0x1e4>
 800135c:	4681      	mov	r9, r0
 800135e:	e7bd      	b.n	80012dc <__udivmoddi4+0x244>
 8001360:	4611      	mov	r1, r2
 8001362:	e776      	b.n	8001252 <__udivmoddi4+0x1ba>
 8001364:	3802      	subs	r0, #2
 8001366:	443c      	add	r4, r7
 8001368:	e744      	b.n	80011f4 <__udivmoddi4+0x15c>
 800136a:	4608      	mov	r0, r1
 800136c:	e706      	b.n	800117c <__udivmoddi4+0xe4>
 800136e:	3a02      	subs	r2, #2
 8001370:	443e      	add	r6, r7
 8001372:	e72b      	b.n	80011cc <__udivmoddi4+0x134>

08001374 <selfrel_offset31>:
 8001374:	6803      	ldr	r3, [r0, #0]
 8001376:	005a      	lsls	r2, r3, #1
 8001378:	bf4c      	ite	mi
 800137a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800137e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8001382:	4418      	add	r0, r3
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <search_EIT_table>:
 8001388:	b361      	cbz	r1, 80013e4 <search_EIT_table+0x5c>
 800138a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800138e:	f101 3aff 	add.w	sl, r1, #4294967295
 8001392:	4690      	mov	r8, r2
 8001394:	4606      	mov	r6, r0
 8001396:	46d1      	mov	r9, sl
 8001398:	2700      	movs	r7, #0
 800139a:	eb07 0409 	add.w	r4, r7, r9
 800139e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80013a2:	1064      	asrs	r4, r4, #1
 80013a4:	00e5      	lsls	r5, r4, #3
 80013a6:	1971      	adds	r1, r6, r5
 80013a8:	4608      	mov	r0, r1
 80013aa:	f7ff ffe3 	bl	8001374 <selfrel_offset31>
 80013ae:	45a2      	cmp	sl, r4
 80013b0:	4683      	mov	fp, r0
 80013b2:	f105 0008 	add.w	r0, r5, #8
 80013b6:	4430      	add	r0, r6
 80013b8:	d009      	beq.n	80013ce <search_EIT_table+0x46>
 80013ba:	f7ff ffdb 	bl	8001374 <selfrel_offset31>
 80013be:	45c3      	cmp	fp, r8
 80013c0:	f100 30ff 	add.w	r0, r0, #4294967295
 80013c4:	d805      	bhi.n	80013d2 <search_EIT_table+0x4a>
 80013c6:	4540      	cmp	r0, r8
 80013c8:	d209      	bcs.n	80013de <search_EIT_table+0x56>
 80013ca:	1c67      	adds	r7, r4, #1
 80013cc:	e7e5      	b.n	800139a <search_EIT_table+0x12>
 80013ce:	45c3      	cmp	fp, r8
 80013d0:	d905      	bls.n	80013de <search_EIT_table+0x56>
 80013d2:	42a7      	cmp	r7, r4
 80013d4:	d002      	beq.n	80013dc <search_EIT_table+0x54>
 80013d6:	f104 39ff 	add.w	r9, r4, #4294967295
 80013da:	e7de      	b.n	800139a <search_EIT_table+0x12>
 80013dc:	2100      	movs	r1, #0
 80013de:	4608      	mov	r0, r1
 80013e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013e4:	4608      	mov	r0, r1
 80013e6:	4770      	bx	lr

080013e8 <__gnu_unwind_get_pr_addr>:
 80013e8:	2801      	cmp	r0, #1
 80013ea:	d007      	beq.n	80013fc <__gnu_unwind_get_pr_addr+0x14>
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d007      	beq.n	8001400 <__gnu_unwind_get_pr_addr+0x18>
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__gnu_unwind_get_pr_addr+0x1c>)
 80013f2:	2800      	cmp	r0, #0
 80013f4:	bf0c      	ite	eq
 80013f6:	4618      	moveq	r0, r3
 80013f8:	2000      	movne	r0, #0
 80013fa:	4770      	bx	lr
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <__gnu_unwind_get_pr_addr+0x20>)
 80013fe:	4770      	bx	lr
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <__gnu_unwind_get_pr_addr+0x24>)
 8001402:	4770      	bx	lr
 8001404:	08001af9 	.word	0x08001af9
 8001408:	08001afd 	.word	0x08001afd
 800140c:	08001b01 	.word	0x08001b01

08001410 <get_eit_entry>:
 8001410:	b530      	push	{r4, r5, lr}
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <get_eit_entry+0x98>)
 8001414:	b083      	sub	sp, #12
 8001416:	4604      	mov	r4, r0
 8001418:	1e8d      	subs	r5, r1, #2
 800141a:	b373      	cbz	r3, 800147a <get_eit_entry+0x6a>
 800141c:	a901      	add	r1, sp, #4
 800141e:	4628      	mov	r0, r5
 8001420:	f3af 8000 	nop.w
 8001424:	b318      	cbz	r0, 800146e <get_eit_entry+0x5e>
 8001426:	9901      	ldr	r1, [sp, #4]
 8001428:	462a      	mov	r2, r5
 800142a:	f7ff ffad 	bl	8001388 <search_EIT_table>
 800142e:	4601      	mov	r1, r0
 8001430:	b1e8      	cbz	r0, 800146e <get_eit_entry+0x5e>
 8001432:	f7ff ff9f 	bl	8001374 <selfrel_offset31>
 8001436:	684b      	ldr	r3, [r1, #4]
 8001438:	64a0      	str	r0, [r4, #72]	; 0x48
 800143a:	2b01      	cmp	r3, #1
 800143c:	d011      	beq.n	8001462 <get_eit_entry+0x52>
 800143e:	2b00      	cmp	r3, #0
 8001440:	db22      	blt.n	8001488 <get_eit_entry+0x78>
 8001442:	1d08      	adds	r0, r1, #4
 8001444:	f7ff ff96 	bl	8001374 <selfrel_offset31>
 8001448:	2300      	movs	r3, #0
 800144a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800144c:	6523      	str	r3, [r4, #80]	; 0x50
 800144e:	6803      	ldr	r3, [r0, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db1e      	blt.n	8001492 <get_eit_entry+0x82>
 8001454:	f7ff ff8e 	bl	8001374 <selfrel_offset31>
 8001458:	2300      	movs	r3, #0
 800145a:	6120      	str	r0, [r4, #16]
 800145c:	4618      	mov	r0, r3
 800145e:	b003      	add	sp, #12
 8001460:	bd30      	pop	{r4, r5, pc}
 8001462:	2305      	movs	r3, #5
 8001464:	2200      	movs	r2, #0
 8001466:	4618      	mov	r0, r3
 8001468:	6122      	str	r2, [r4, #16]
 800146a:	b003      	add	sp, #12
 800146c:	bd30      	pop	{r4, r5, pc}
 800146e:	2309      	movs	r3, #9
 8001470:	2200      	movs	r2, #0
 8001472:	4618      	mov	r0, r3
 8001474:	6122      	str	r2, [r4, #16]
 8001476:	b003      	add	sp, #12
 8001478:	bd30      	pop	{r4, r5, pc}
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <get_eit_entry+0x9c>)
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <get_eit_entry+0xa0>)
 800147e:	4618      	mov	r0, r3
 8001480:	1ac9      	subs	r1, r1, r3
 8001482:	10c9      	asrs	r1, r1, #3
 8001484:	9101      	str	r1, [sp, #4]
 8001486:	e7cf      	b.n	8001428 <get_eit_entry+0x18>
 8001488:	2301      	movs	r3, #1
 800148a:	1d08      	adds	r0, r1, #4
 800148c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800148e:	6523      	str	r3, [r4, #80]	; 0x50
 8001490:	e7dd      	b.n	800144e <get_eit_entry+0x3e>
 8001492:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8001496:	f7ff ffa7 	bl	80013e8 <__gnu_unwind_get_pr_addr>
 800149a:	2800      	cmp	r0, #0
 800149c:	6120      	str	r0, [r4, #16]
 800149e:	bf14      	ite	ne
 80014a0:	2300      	movne	r3, #0
 80014a2:	2309      	moveq	r3, #9
 80014a4:	e7da      	b.n	800145c <get_eit_entry+0x4c>
 80014a6:	bf00      	nop
 80014a8:	00000000 	.word	0x00000000
 80014ac:	08006e54 	.word	0x08006e54
 80014b0:	08006f5c 	.word	0x08006f5c

080014b4 <restore_non_core_regs>:
 80014b4:	6803      	ldr	r3, [r0, #0]
 80014b6:	b510      	push	{r4, lr}
 80014b8:	07da      	lsls	r2, r3, #31
 80014ba:	4604      	mov	r4, r0
 80014bc:	d406      	bmi.n	80014cc <restore_non_core_regs+0x18>
 80014be:	079b      	lsls	r3, r3, #30
 80014c0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80014c4:	d509      	bpl.n	80014da <restore_non_core_regs+0x26>
 80014c6:	f000 fc57 	bl	8001d78 <__gnu_Unwind_Restore_VFP_D>
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	0759      	lsls	r1, r3, #29
 80014ce:	d509      	bpl.n	80014e4 <restore_non_core_regs+0x30>
 80014d0:	071a      	lsls	r2, r3, #28
 80014d2:	d50e      	bpl.n	80014f2 <restore_non_core_regs+0x3e>
 80014d4:	06db      	lsls	r3, r3, #27
 80014d6:	d513      	bpl.n	8001500 <restore_non_core_regs+0x4c>
 80014d8:	bd10      	pop	{r4, pc}
 80014da:	f000 fc45 	bl	8001d68 <__gnu_Unwind_Restore_VFP>
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	0759      	lsls	r1, r3, #29
 80014e2:	d4f5      	bmi.n	80014d0 <restore_non_core_regs+0x1c>
 80014e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80014e8:	f000 fc4e 	bl	8001d88 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	071a      	lsls	r2, r3, #28
 80014f0:	d4f0      	bmi.n	80014d4 <restore_non_core_regs+0x20>
 80014f2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80014f6:	f000 fc4f 	bl	8001d98 <__gnu_Unwind_Restore_WMMXD>
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	06db      	lsls	r3, r3, #27
 80014fe:	d4eb      	bmi.n	80014d8 <restore_non_core_regs+0x24>
 8001500:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001508:	f000 bc8a 	b.w	8001e20 <__gnu_Unwind_Restore_WMMXC>

0800150c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800150c:	6803      	ldr	r3, [r0, #0]
 800150e:	b103      	cbz	r3, 8001512 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001510:	4403      	add	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop

08001518 <__gnu_unwind_24bit.isra.1>:
 8001518:	2009      	movs	r0, #9
 800151a:	4770      	bx	lr

0800151c <_Unwind_DebugHook>:
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <unwind_phase2>:
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	e008      	b.n	800153a <unwind_phase2+0x1a>
 8001528:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800152a:	6923      	ldr	r3, [r4, #16]
 800152c:	6162      	str	r2, [r4, #20]
 800152e:	4621      	mov	r1, r4
 8001530:	462a      	mov	r2, r5
 8001532:	2001      	movs	r0, #1
 8001534:	4798      	blx	r3
 8001536:	2808      	cmp	r0, #8
 8001538:	d108      	bne.n	800154c <unwind_phase2+0x2c>
 800153a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff ff67 	bl	8001410 <get_eit_entry>
 8001542:	4606      	mov	r6, r0
 8001544:	2800      	cmp	r0, #0
 8001546:	d0ef      	beq.n	8001528 <unwind_phase2+0x8>
 8001548:	f005 fa2b 	bl	80069a2 <abort>
 800154c:	2807      	cmp	r0, #7
 800154e:	d1fb      	bne.n	8001548 <unwind_phase2+0x28>
 8001550:	4630      	mov	r0, r6
 8001552:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001554:	f7ff ffe2 	bl	800151c <_Unwind_DebugHook>
 8001558:	1d28      	adds	r0, r5, #4
 800155a:	f000 fbf9 	bl	8001d50 <__restore_core_regs>
 800155e:	bf00      	nop

08001560 <unwind_phase2_forced>:
 8001560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001564:	4605      	mov	r5, r0
 8001566:	2700      	movs	r7, #0
 8001568:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800156c:	ac03      	add	r4, sp, #12
 800156e:	1d0e      	adds	r6, r1, #4
 8001570:	4692      	mov	sl, r2
 8001572:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001576:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800157c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001582:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8001586:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800158a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800158e:	ac02      	add	r4, sp, #8
 8001590:	4628      	mov	r0, r5
 8001592:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001594:	6027      	str	r7, [r4, #0]
 8001596:	f7ff ff3b 	bl	8001410 <get_eit_entry>
 800159a:	f1ba 0f00 	cmp.w	sl, #0
 800159e:	4607      	mov	r7, r0
 80015a0:	bf14      	ite	ne
 80015a2:	260a      	movne	r6, #10
 80015a4:	2609      	moveq	r6, #9
 80015a6:	b17f      	cbz	r7, 80015c8 <unwind_phase2_forced+0x68>
 80015a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015aa:	f046 0110 	orr.w	r1, r6, #16
 80015ae:	e88d 0210 	stmia.w	sp, {r4, r9}
 80015b2:	462a      	mov	r2, r5
 80015b4:	6463      	str	r3, [r4, #68]	; 0x44
 80015b6:	2001      	movs	r0, #1
 80015b8:	462b      	mov	r3, r5
 80015ba:	47c0      	blx	r8
 80015bc:	bb78      	cbnz	r0, 800161e <unwind_phase2_forced+0xbe>
 80015be:	4638      	mov	r0, r7
 80015c0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80015c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80015ce:	616b      	str	r3, [r5, #20]
 80015d0:	4621      	mov	r1, r4
 80015d2:	a87a      	add	r0, sp, #488	; 0x1e8
 80015d4:	f004 fb74 	bl	8005cc0 <memcpy>
 80015d8:	692b      	ldr	r3, [r5, #16]
 80015da:	aa7a      	add	r2, sp, #488	; 0x1e8
 80015dc:	4629      	mov	r1, r5
 80015de:	4630      	mov	r0, r6
 80015e0:	4798      	blx	r3
 80015e2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80015e4:	4682      	mov	sl, r0
 80015e6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80015ea:	4631      	mov	r1, r6
 80015ec:	6463      	str	r3, [r4, #68]	; 0x44
 80015ee:	462a      	mov	r2, r5
 80015f0:	462b      	mov	r3, r5
 80015f2:	2001      	movs	r0, #1
 80015f4:	47c0      	blx	r8
 80015f6:	b990      	cbnz	r0, 800161e <unwind_phase2_forced+0xbe>
 80015f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80015fc:	a97a      	add	r1, sp, #488	; 0x1e8
 80015fe:	4620      	mov	r0, r4
 8001600:	f004 fb5e 	bl	8005cc0 <memcpy>
 8001604:	f1ba 0f08 	cmp.w	sl, #8
 8001608:	d106      	bne.n	8001618 <unwind_phase2_forced+0xb8>
 800160a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800160c:	4628      	mov	r0, r5
 800160e:	f7ff feff 	bl	8001410 <get_eit_entry>
 8001612:	2609      	movs	r6, #9
 8001614:	4607      	mov	r7, r0
 8001616:	e7c6      	b.n	80015a6 <unwind_phase2_forced+0x46>
 8001618:	f1ba 0f07 	cmp.w	sl, #7
 800161c:	d005      	beq.n	800162a <unwind_phase2_forced+0xca>
 800161e:	2709      	movs	r7, #9
 8001620:	4638      	mov	r0, r7
 8001622:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800162a:	4638      	mov	r0, r7
 800162c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800162e:	f7ff ff75 	bl	800151c <_Unwind_DebugHook>
 8001632:	a803      	add	r0, sp, #12
 8001634:	f000 fb8c 	bl	8001d50 <__restore_core_regs>

08001638 <_Unwind_GetCFA>:
 8001638:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800163a:	4770      	bx	lr

0800163c <__gnu_Unwind_RaiseException>:
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	f04f 3eff 	mov.w	lr, #4294967295
 8001642:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001644:	b0f9      	sub	sp, #484	; 0x1e4
 8001646:	640b      	str	r3, [r1, #64]	; 0x40
 8001648:	1d0e      	adds	r6, r1, #4
 800164a:	ad01      	add	r5, sp, #4
 800164c:	460f      	mov	r7, r1
 800164e:	4604      	mov	r4, r0
 8001650:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001654:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001658:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800165a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001660:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001664:	f8cd e000 	str.w	lr, [sp]
 8001668:	e006      	b.n	8001678 <__gnu_Unwind_RaiseException+0x3c>
 800166a:	6923      	ldr	r3, [r4, #16]
 800166c:	466a      	mov	r2, sp
 800166e:	4621      	mov	r1, r4
 8001670:	4798      	blx	r3
 8001672:	2808      	cmp	r0, #8
 8001674:	4605      	mov	r5, r0
 8001676:	d108      	bne.n	800168a <__gnu_Unwind_RaiseException+0x4e>
 8001678:	9910      	ldr	r1, [sp, #64]	; 0x40
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fec8 	bl	8001410 <get_eit_entry>
 8001680:	2800      	cmp	r0, #0
 8001682:	d0f2      	beq.n	800166a <__gnu_Unwind_RaiseException+0x2e>
 8001684:	2009      	movs	r0, #9
 8001686:	b079      	add	sp, #484	; 0x1e4
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	4668      	mov	r0, sp
 800168c:	f7ff ff12 	bl	80014b4 <restore_non_core_regs>
 8001690:	2d06      	cmp	r5, #6
 8001692:	d1f7      	bne.n	8001684 <__gnu_Unwind_RaiseException+0x48>
 8001694:	4639      	mov	r1, r7
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff ff42 	bl	8001520 <unwind_phase2>

0800169c <__gnu_Unwind_ForcedUnwind>:
 800169c:	b430      	push	{r4, r5}
 800169e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80016a0:	60c1      	str	r1, [r0, #12]
 80016a2:	6182      	str	r2, [r0, #24]
 80016a4:	4619      	mov	r1, r3
 80016a6:	641d      	str	r5, [r3, #64]	; 0x40
 80016a8:	2200      	movs	r2, #0
 80016aa:	bc30      	pop	{r4, r5}
 80016ac:	e758      	b.n	8001560 <unwind_phase2_forced>
 80016ae:	bf00      	nop

080016b0 <__gnu_Unwind_Resume>:
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	6943      	ldr	r3, [r0, #20]
 80016b4:	68c6      	ldr	r6, [r0, #12]
 80016b6:	640b      	str	r3, [r1, #64]	; 0x40
 80016b8:	b126      	cbz	r6, 80016c4 <__gnu_Unwind_Resume+0x14>
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff ff50 	bl	8001560 <unwind_phase2_forced>
 80016c0:	f005 f96f 	bl	80069a2 <abort>
 80016c4:	6903      	ldr	r3, [r0, #16]
 80016c6:	460a      	mov	r2, r1
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	4601      	mov	r1, r0
 80016ce:	2002      	movs	r0, #2
 80016d0:	4798      	blx	r3
 80016d2:	2807      	cmp	r0, #7
 80016d4:	d007      	beq.n	80016e6 <__gnu_Unwind_Resume+0x36>
 80016d6:	2808      	cmp	r0, #8
 80016d8:	d103      	bne.n	80016e2 <__gnu_Unwind_Resume+0x32>
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ff1f 	bl	8001520 <unwind_phase2>
 80016e2:	f005 f95e 	bl	80069a2 <abort>
 80016e6:	4630      	mov	r0, r6
 80016e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80016ea:	f7ff ff17 	bl	800151c <_Unwind_DebugHook>
 80016ee:	1d28      	adds	r0, r5, #4
 80016f0:	f000 fb2e 	bl	8001d50 <__restore_core_regs>

080016f4 <__gnu_Unwind_Resume_or_Rethrow>:
 80016f4:	68c2      	ldr	r2, [r0, #12]
 80016f6:	b12a      	cbz	r2, 8001704 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80016f8:	b410      	push	{r4}
 80016fa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80016fc:	2200      	movs	r2, #0
 80016fe:	640c      	str	r4, [r1, #64]	; 0x40
 8001700:	bc10      	pop	{r4}
 8001702:	e72d      	b.n	8001560 <unwind_phase2_forced>
 8001704:	e79a      	b.n	800163c <__gnu_Unwind_RaiseException>
 8001706:	bf00      	nop

08001708 <_Unwind_Complete>:
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop

0800170c <_Unwind_DeleteException>:
 800170c:	6883      	ldr	r3, [r0, #8]
 800170e:	b113      	cbz	r3, 8001716 <_Unwind_DeleteException+0xa>
 8001710:	4601      	mov	r1, r0
 8001712:	2001      	movs	r0, #1
 8001714:	4718      	bx	r3
 8001716:	4770      	bx	lr

08001718 <_Unwind_VRS_Get>:
 8001718:	b500      	push	{lr}
 800171a:	2904      	cmp	r1, #4
 800171c:	d807      	bhi.n	800172e <_Unwind_VRS_Get+0x16>
 800171e:	e8df f001 	tbb	[pc, r1]
 8001722:	0903      	.short	0x0903
 8001724:	0906      	.short	0x0906
 8001726:	09          	.byte	0x09
 8001727:	00          	.byte	0x00
 8001728:	b90b      	cbnz	r3, 800172e <_Unwind_VRS_Get+0x16>
 800172a:	2a0f      	cmp	r2, #15
 800172c:	d905      	bls.n	800173a <_Unwind_VRS_Get+0x22>
 800172e:	2002      	movs	r0, #2
 8001730:	f85d fb04 	ldr.w	pc, [sp], #4
 8001734:	2001      	movs	r0, #1
 8001736:	f85d fb04 	ldr.w	pc, [sp], #4
 800173a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800173e:	6852      	ldr	r2, [r2, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	9b01      	ldr	r3, [sp, #4]
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	f85d fb04 	ldr.w	pc, [sp], #4
 800174a:	bf00      	nop

0800174c <_Unwind_GetGR>:
 800174c:	2300      	movs	r3, #0
 800174e:	b510      	push	{r4, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	ac03      	add	r4, sp, #12
 8001754:	460a      	mov	r2, r1
 8001756:	9400      	str	r4, [sp, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff ffdd 	bl	8001718 <_Unwind_VRS_Get>
 800175e:	9803      	ldr	r0, [sp, #12]
 8001760:	b004      	add	sp, #16
 8001762:	bd10      	pop	{r4, pc}

08001764 <_Unwind_VRS_Set>:
 8001764:	b500      	push	{lr}
 8001766:	2904      	cmp	r1, #4
 8001768:	d807      	bhi.n	800177a <_Unwind_VRS_Set+0x16>
 800176a:	e8df f001 	tbb	[pc, r1]
 800176e:	0903      	.short	0x0903
 8001770:	0906      	.short	0x0906
 8001772:	09          	.byte	0x09
 8001773:	00          	.byte	0x00
 8001774:	b90b      	cbnz	r3, 800177a <_Unwind_VRS_Set+0x16>
 8001776:	2a0f      	cmp	r2, #15
 8001778:	d905      	bls.n	8001786 <_Unwind_VRS_Set+0x22>
 800177a:	2002      	movs	r0, #2
 800177c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001780:	2001      	movs	r0, #1
 8001782:	f85d fb04 	ldr.w	pc, [sp], #4
 8001786:	9901      	ldr	r1, [sp, #4]
 8001788:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800178c:	6809      	ldr	r1, [r1, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	6051      	str	r1, [r2, #4]
 8001792:	f85d fb04 	ldr.w	pc, [sp], #4
 8001796:	bf00      	nop

08001798 <_Unwind_SetGR>:
 8001798:	2300      	movs	r3, #0
 800179a:	b510      	push	{r4, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	ac04      	add	r4, sp, #16
 80017a0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80017a4:	9400      	str	r4, [sp, #0]
 80017a6:	460a      	mov	r2, r1
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff ffdb 	bl	8001764 <_Unwind_VRS_Set>
 80017ae:	b004      	add	sp, #16
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	bf00      	nop

080017b4 <__gnu_Unwind_Backtrace>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	f04f 3eff 	mov.w	lr, #4294967295
 80017ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80017bc:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	1d15      	adds	r5, r2, #4
 80017c4:	ac17      	add	r4, sp, #92	; 0x5c
 80017c6:	4607      	mov	r7, r0
 80017c8:	460e      	mov	r6, r1
 80017ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017de:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80017e2:	e012      	b.n	800180a <__gnu_Unwind_Backtrace+0x56>
 80017e4:	210c      	movs	r1, #12
 80017e6:	a816      	add	r0, sp, #88	; 0x58
 80017e8:	466a      	mov	r2, sp
 80017ea:	f7ff ffd5 	bl	8001798 <_Unwind_SetGR>
 80017ee:	4631      	mov	r1, r6
 80017f0:	a816      	add	r0, sp, #88	; 0x58
 80017f2:	47b8      	blx	r7
 80017f4:	b978      	cbnz	r0, 8001816 <__gnu_Unwind_Backtrace+0x62>
 80017f6:	9b04      	ldr	r3, [sp, #16]
 80017f8:	aa16      	add	r2, sp, #88	; 0x58
 80017fa:	4669      	mov	r1, sp
 80017fc:	2008      	movs	r0, #8
 80017fe:	4798      	blx	r3
 8001800:	2805      	cmp	r0, #5
 8001802:	4604      	mov	r4, r0
 8001804:	d008      	beq.n	8001818 <__gnu_Unwind_Backtrace+0x64>
 8001806:	2809      	cmp	r0, #9
 8001808:	d005      	beq.n	8001816 <__gnu_Unwind_Backtrace+0x62>
 800180a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800180c:	4668      	mov	r0, sp
 800180e:	f7ff fdff 	bl	8001410 <get_eit_entry>
 8001812:	2800      	cmp	r0, #0
 8001814:	d0e6      	beq.n	80017e4 <__gnu_Unwind_Backtrace+0x30>
 8001816:	2409      	movs	r4, #9
 8001818:	a816      	add	r0, sp, #88	; 0x58
 800181a:	f7ff fe4b 	bl	80014b4 <restore_non_core_regs>
 800181e:	4620      	mov	r0, r4
 8001820:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001826:	bf00      	nop

08001828 <__gnu_unwind_pr_common>:
 8001828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800182c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800182e:	4691      	mov	r9, r2
 8001830:	6822      	ldr	r2, [r4, #0]
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	3404      	adds	r4, #4
 8001836:	460d      	mov	r5, r1
 8001838:	9207      	str	r2, [sp, #28]
 800183a:	9408      	str	r4, [sp, #32]
 800183c:	f000 0b03 	and.w	fp, r0, #3
 8001840:	461e      	mov	r6, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d160      	bne.n	8001908 <__gnu_unwind_pr_common+0xe0>
 8001846:	2303      	movs	r3, #3
 8001848:	0212      	lsls	r2, r2, #8
 800184a:	9207      	str	r2, [sp, #28]
 800184c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001850:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001854:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001856:	f1bb 0f02 	cmp.w	fp, #2
 800185a:	bf08      	it	eq
 800185c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800185e:	f013 0301 	ands.w	r3, r3, #1
 8001862:	d140      	bne.n	80018e6 <__gnu_unwind_pr_common+0xbe>
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	f000 0308 	and.w	r3, r0, #8
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	f8d4 8000 	ldr.w	r8, [r4]
 8001870:	f1b8 0f00 	cmp.w	r8, #0
 8001874:	d039      	beq.n	80018ea <__gnu_unwind_pr_common+0xc2>
 8001876:	2e02      	cmp	r6, #2
 8001878:	d043      	beq.n	8001902 <__gnu_unwind_pr_common+0xda>
 800187a:	f8b4 8000 	ldrh.w	r8, [r4]
 800187e:	8867      	ldrh	r7, [r4, #2]
 8001880:	3404      	adds	r4, #4
 8001882:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001884:	f027 0a01 	bic.w	sl, r7, #1
 8001888:	210f      	movs	r1, #15
 800188a:	4648      	mov	r0, r9
 800188c:	449a      	add	sl, r3
 800188e:	f7ff ff5d 	bl	800174c <_Unwind_GetGR>
 8001892:	4582      	cmp	sl, r0
 8001894:	d833      	bhi.n	80018fe <__gnu_unwind_pr_common+0xd6>
 8001896:	f028 0301 	bic.w	r3, r8, #1
 800189a:	449a      	add	sl, r3
 800189c:	4550      	cmp	r0, sl
 800189e:	bf2c      	ite	cs
 80018a0:	2000      	movcs	r0, #0
 80018a2:	2001      	movcc	r0, #1
 80018a4:	007f      	lsls	r7, r7, #1
 80018a6:	f007 0702 	and.w	r7, r7, #2
 80018aa:	f008 0801 	and.w	r8, r8, #1
 80018ae:	ea47 0708 	orr.w	r7, r7, r8
 80018b2:	2f01      	cmp	r7, #1
 80018b4:	d03e      	beq.n	8001934 <__gnu_unwind_pr_common+0x10c>
 80018b6:	d335      	bcc.n	8001924 <__gnu_unwind_pr_common+0xfc>
 80018b8:	2f02      	cmp	r7, #2
 80018ba:	d11c      	bne.n	80018f6 <__gnu_unwind_pr_common+0xce>
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018c2:	9202      	str	r2, [sp, #8]
 80018c4:	f1bb 0f00 	cmp.w	fp, #0
 80018c8:	d176      	bne.n	80019b8 <__gnu_unwind_pr_common+0x190>
 80018ca:	b128      	cbz	r0, 80018d8 <__gnu_unwind_pr_common+0xb0>
 80018cc:	9903      	ldr	r1, [sp, #12]
 80018ce:	2900      	cmp	r1, #0
 80018d0:	d07e      	beq.n	80019d0 <__gnu_unwind_pr_common+0x1a8>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	f000 80a6 	beq.w	8001a24 <__gnu_unwind_pr_common+0x1fc>
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db77      	blt.n	80019cc <__gnu_unwind_pr_common+0x1a4>
 80018dc:	9b02      	ldr	r3, [sp, #8]
 80018de:	3301      	adds	r3, #1
 80018e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80018e4:	e7c2      	b.n	800186c <__gnu_unwind_pr_common+0x44>
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2e02      	cmp	r6, #2
 80018ec:	dd3e      	ble.n	800196c <__gnu_unwind_pr_common+0x144>
 80018ee:	f7ff fe13 	bl	8001518 <__gnu_unwind_24bit.isra.1>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	d040      	beq.n	8001978 <__gnu_unwind_pr_common+0x150>
 80018f6:	2009      	movs	r0, #9
 80018f8:	b00b      	add	sp, #44	; 0x2c
 80018fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018fe:	2000      	movs	r0, #0
 8001900:	e7d0      	b.n	80018a4 <__gnu_unwind_pr_common+0x7c>
 8001902:	6867      	ldr	r7, [r4, #4]
 8001904:	3408      	adds	r4, #8
 8001906:	e7bc      	b.n	8001882 <__gnu_unwind_pr_common+0x5a>
 8001908:	2b02      	cmp	r3, #2
 800190a:	dca3      	bgt.n	8001854 <__gnu_unwind_pr_common+0x2c>
 800190c:	2102      	movs	r1, #2
 800190e:	0c13      	lsrs	r3, r2, #16
 8001910:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001914:	0412      	lsls	r2, r2, #16
 8001916:	b2db      	uxtb	r3, r3
 8001918:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800191c:	9207      	str	r2, [sp, #28]
 800191e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8001922:	e797      	b.n	8001854 <__gnu_unwind_pr_common+0x2c>
 8001924:	f1bb 0f00 	cmp.w	fp, #0
 8001928:	d002      	beq.n	8001930 <__gnu_unwind_pr_common+0x108>
 800192a:	2800      	cmp	r0, #0
 800192c:	f040 80bd 	bne.w	8001aaa <__gnu_unwind_pr_common+0x282>
 8001930:	3404      	adds	r4, #4
 8001932:	e79b      	b.n	800186c <__gnu_unwind_pr_common+0x44>
 8001934:	f1bb 0f00 	cmp.w	fp, #0
 8001938:	d125      	bne.n	8001986 <__gnu_unwind_pr_common+0x15e>
 800193a:	b1a8      	cbz	r0, 8001968 <__gnu_unwind_pr_common+0x140>
 800193c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001940:	1c99      	adds	r1, r3, #2
 8001942:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001946:	d0d6      	beq.n	80018f6 <__gnu_unwind_pr_common+0xce>
 8001948:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800194c:	3301      	adds	r3, #1
 800194e:	9106      	str	r1, [sp, #24]
 8001950:	f000 80a3 	beq.w	8001a9a <__gnu_unwind_pr_common+0x272>
 8001954:	1d20      	adds	r0, r4, #4
 8001956:	f7ff fdd9 	bl	800150c <_Unwind_decode_typeinfo_ptr.isra.0>
 800195a:	ab06      	add	r3, sp, #24
 800195c:	4601      	mov	r1, r0
 800195e:	4628      	mov	r0, r5
 8001960:	f3af 8000 	nop.w
 8001964:	2800      	cmp	r0, #0
 8001966:	d177      	bne.n	8001a58 <__gnu_unwind_pr_common+0x230>
 8001968:	3408      	adds	r4, #8
 800196a:	e77f      	b.n	800186c <__gnu_unwind_pr_common+0x44>
 800196c:	a907      	add	r1, sp, #28
 800196e:	4648      	mov	r0, r9
 8001970:	f000 faf0 	bl	8001f54 <__gnu_unwind_execute>
 8001974:	2800      	cmp	r0, #0
 8001976:	d1be      	bne.n	80018f6 <__gnu_unwind_pr_common+0xce>
 8001978:	9b01      	ldr	r3, [sp, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d15c      	bne.n	8001a38 <__gnu_unwind_pr_common+0x210>
 800197e:	2008      	movs	r0, #8
 8001980:	b00b      	add	sp, #44	; 0x2c
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001986:	210d      	movs	r1, #13
 8001988:	4648      	mov	r0, r9
 800198a:	6a2f      	ldr	r7, [r5, #32]
 800198c:	f7ff fede 	bl	800174c <_Unwind_GetGR>
 8001990:	4287      	cmp	r7, r0
 8001992:	d1e9      	bne.n	8001968 <__gnu_unwind_pr_common+0x140>
 8001994:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001996:	429c      	cmp	r4, r3
 8001998:	d1e6      	bne.n	8001968 <__gnu_unwind_pr_common+0x140>
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff fcea 	bl	8001374 <selfrel_offset31>
 80019a0:	210f      	movs	r1, #15
 80019a2:	4602      	mov	r2, r0
 80019a4:	4648      	mov	r0, r9
 80019a6:	f7ff fef7 	bl	8001798 <_Unwind_SetGR>
 80019aa:	4648      	mov	r0, r9
 80019ac:	462a      	mov	r2, r5
 80019ae:	2100      	movs	r1, #0
 80019b0:	f7ff fef2 	bl	8001798 <_Unwind_SetGR>
 80019b4:	2007      	movs	r0, #7
 80019b6:	e79f      	b.n	80018f8 <__gnu_unwind_pr_common+0xd0>
 80019b8:	210d      	movs	r1, #13
 80019ba:	4648      	mov	r0, r9
 80019bc:	6a2f      	ldr	r7, [r5, #32]
 80019be:	f7ff fec5 	bl	800174c <_Unwind_GetGR>
 80019c2:	4287      	cmp	r7, r0
 80019c4:	d058      	beq.n	8001a78 <__gnu_unwind_pr_common+0x250>
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da87      	bge.n	80018dc <__gnu_unwind_pr_common+0xb4>
 80019cc:	3404      	adds	r4, #4
 80019ce:	e785      	b.n	80018dc <__gnu_unwind_pr_common+0xb4>
 80019d0:	9b02      	ldr	r3, [sp, #8]
 80019d2:	b33b      	cbz	r3, 8001a24 <__gnu_unwind_pr_common+0x1fc>
 80019d4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80019d8:	1d27      	adds	r7, r4, #4
 80019da:	f8cd b010 	str.w	fp, [sp, #16]
 80019de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80019e2:	46a3      	mov	fp, r4
 80019e4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80019e8:	461c      	mov	r4, r3
 80019ea:	9605      	str	r6, [sp, #20]
 80019ec:	e002      	b.n	80019f4 <__gnu_unwind_pr_common+0x1cc>
 80019ee:	45b2      	cmp	sl, r6
 80019f0:	46b0      	mov	r8, r6
 80019f2:	d016      	beq.n	8001a22 <__gnu_unwind_pr_common+0x1fa>
 80019f4:	4638      	mov	r0, r7
 80019f6:	9406      	str	r4, [sp, #24]
 80019f8:	f7ff fd88 	bl	800150c <_Unwind_decode_typeinfo_ptr.isra.0>
 80019fc:	ab06      	add	r3, sp, #24
 80019fe:	4601      	mov	r1, r0
 8001a00:	2200      	movs	r2, #0
 8001a02:	4628      	mov	r0, r5
 8001a04:	f3af 8000 	nop.w
 8001a08:	f108 0601 	add.w	r6, r8, #1
 8001a0c:	3704      	adds	r7, #4
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d0ed      	beq.n	80019ee <__gnu_unwind_pr_common+0x1c6>
 8001a12:	9b02      	ldr	r3, [sp, #8]
 8001a14:	465c      	mov	r4, fp
 8001a16:	4543      	cmp	r3, r8
 8001a18:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001a1c:	9e05      	ldr	r6, [sp, #20]
 8001a1e:	d1d2      	bne.n	80019c6 <__gnu_unwind_pr_common+0x19e>
 8001a20:	e000      	b.n	8001a24 <__gnu_unwind_pr_common+0x1fc>
 8001a22:	465c      	mov	r4, fp
 8001a24:	4648      	mov	r0, r9
 8001a26:	210d      	movs	r1, #13
 8001a28:	f7ff fe90 	bl	800174c <_Unwind_GetGR>
 8001a2c:	9b06      	ldr	r3, [sp, #24]
 8001a2e:	6228      	str	r0, [r5, #32]
 8001a30:	62ac      	str	r4, [r5, #40]	; 0x28
 8001a32:	626b      	str	r3, [r5, #36]	; 0x24
 8001a34:	2006      	movs	r0, #6
 8001a36:	e75f      	b.n	80018f8 <__gnu_unwind_pr_common+0xd0>
 8001a38:	210f      	movs	r1, #15
 8001a3a:	4648      	mov	r0, r9
 8001a3c:	f7ff fe86 	bl	800174c <_Unwind_GetGR>
 8001a40:	210e      	movs	r1, #14
 8001a42:	4602      	mov	r2, r0
 8001a44:	4648      	mov	r0, r9
 8001a46:	f7ff fea7 	bl	8001798 <_Unwind_SetGR>
 8001a4a:	4648      	mov	r0, r9
 8001a4c:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <__gnu_unwind_pr_common+0x2cc>)
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f7ff fea2 	bl	8001798 <_Unwind_SetGR>
 8001a54:	2007      	movs	r0, #7
 8001a56:	e74f      	b.n	80018f8 <__gnu_unwind_pr_common+0xd0>
 8001a58:	4607      	mov	r7, r0
 8001a5a:	210d      	movs	r1, #13
 8001a5c:	4648      	mov	r0, r9
 8001a5e:	f7ff fe75 	bl	800174c <_Unwind_GetGR>
 8001a62:	2f02      	cmp	r7, #2
 8001a64:	6228      	str	r0, [r5, #32]
 8001a66:	d11d      	bne.n	8001aa4 <__gnu_unwind_pr_common+0x27c>
 8001a68:	462b      	mov	r3, r5
 8001a6a:	9a06      	ldr	r2, [sp, #24]
 8001a6c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001a70:	626b      	str	r3, [r5, #36]	; 0x24
 8001a72:	62ac      	str	r4, [r5, #40]	; 0x28
 8001a74:	2006      	movs	r0, #6
 8001a76:	e73f      	b.n	80018f8 <__gnu_unwind_pr_common+0xd0>
 8001a78:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001a7a:	429c      	cmp	r4, r3
 8001a7c:	d1a3      	bne.n	80019c6 <__gnu_unwind_pr_common+0x19e>
 8001a7e:	2204      	movs	r2, #4
 8001a80:	2700      	movs	r7, #0
 8001a82:	9902      	ldr	r1, [sp, #8]
 8001a84:	18a3      	adds	r3, r4, r2
 8001a86:	62a9      	str	r1, [r5, #40]	; 0x28
 8001a88:	62ef      	str	r7, [r5, #44]	; 0x2c
 8001a8a:	632a      	str	r2, [r5, #48]	; 0x30
 8001a8c:	636b      	str	r3, [r5, #52]	; 0x34
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	42bb      	cmp	r3, r7
 8001a92:	db1d      	blt.n	8001ad0 <__gnu_unwind_pr_common+0x2a8>
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	e720      	b.n	80018dc <__gnu_unwind_pr_common+0xb4>
 8001a9a:	4648      	mov	r0, r9
 8001a9c:	210d      	movs	r1, #13
 8001a9e:	f7ff fe55 	bl	800174c <_Unwind_GetGR>
 8001aa2:	6228      	str	r0, [r5, #32]
 8001aa4:	9b06      	ldr	r3, [sp, #24]
 8001aa6:	626b      	str	r3, [r5, #36]	; 0x24
 8001aa8:	e7e3      	b.n	8001a72 <__gnu_unwind_pr_common+0x24a>
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fc62 	bl	8001374 <selfrel_offset31>
 8001ab0:	3404      	adds	r4, #4
 8001ab2:	4606      	mov	r6, r0
 8001ab4:	63ac      	str	r4, [r5, #56]	; 0x38
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f3af 8000 	nop.w
 8001abc:	2800      	cmp	r0, #0
 8001abe:	f43f af1a 	beq.w	80018f6 <__gnu_unwind_pr_common+0xce>
 8001ac2:	4648      	mov	r0, r9
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f7ff fe66 	bl	8001798 <_Unwind_SetGR>
 8001acc:	2007      	movs	r0, #7
 8001ace:	e713      	b.n	80018f8 <__gnu_unwind_pr_common+0xd0>
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001ad8:	f7ff fc4c 	bl	8001374 <selfrel_offset31>
 8001adc:	210f      	movs	r1, #15
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4648      	mov	r0, r9
 8001ae2:	f7ff fe59 	bl	8001798 <_Unwind_SetGR>
 8001ae6:	4648      	mov	r0, r9
 8001ae8:	462a      	mov	r2, r5
 8001aea:	4639      	mov	r1, r7
 8001aec:	f7ff fe54 	bl	8001798 <_Unwind_SetGR>
 8001af0:	2007      	movs	r0, #7
 8001af2:	e701      	b.n	80018f8 <__gnu_unwind_pr_common+0xd0>
 8001af4:	00000000 	.word	0x00000000

08001af8 <__aeabi_unwind_cpp_pr0>:
 8001af8:	2300      	movs	r3, #0
 8001afa:	e695      	b.n	8001828 <__gnu_unwind_pr_common>

08001afc <__aeabi_unwind_cpp_pr1>:
 8001afc:	2301      	movs	r3, #1
 8001afe:	e693      	b.n	8001828 <__gnu_unwind_pr_common>

08001b00 <__aeabi_unwind_cpp_pr2>:
 8001b00:	2302      	movs	r3, #2
 8001b02:	e691      	b.n	8001828 <__gnu_unwind_pr_common>

08001b04 <_Unwind_VRS_Pop>:
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	4604      	mov	r4, r0
 8001b08:	b0c5      	sub	sp, #276	; 0x114
 8001b0a:	2904      	cmp	r1, #4
 8001b0c:	d80d      	bhi.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001b0e:	e8df f001 	tbb	[pc, r1]
 8001b12:	0355      	.short	0x0355
 8001b14:	310c      	.short	0x310c
 8001b16:	0f          	.byte	0x0f
 8001b17:	00          	.byte	0x00
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8001b1e:	b295      	uxth	r5, r2
 8001b20:	d164      	bne.n	8001bec <_Unwind_VRS_Pop+0xe8>
 8001b22:	1972      	adds	r2, r6, r5
 8001b24:	2a10      	cmp	r2, #16
 8001b26:	f240 809d 	bls.w	8001c64 <_Unwind_VRS_Pop+0x160>
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	b045      	add	sp, #276	; 0x114
 8001b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1fa      	bne.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001b34:	2a10      	cmp	r2, #16
 8001b36:	d8f8      	bhi.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	06d8      	lsls	r0, r3, #27
 8001b3c:	f100 80c8 	bmi.w	8001cd0 <_Unwind_VRS_Pop+0x1cc>
 8001b40:	ae22      	add	r6, sp, #136	; 0x88
 8001b42:	4630      	mov	r0, r6
 8001b44:	9201      	str	r2, [sp, #4]
 8001b46:	2501      	movs	r5, #1
 8001b48:	f000 f974 	bl	8001e34 <__gnu_Unwind_Save_WMMXC>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b50:	9a01      	ldr	r2, [sp, #4]
 8001b52:	fa05 f103 	lsl.w	r1, r5, r3
 8001b56:	4211      	tst	r1, r2
 8001b58:	d003      	beq.n	8001b62 <_Unwind_VRS_Pop+0x5e>
 8001b5a:	6801      	ldr	r1, [r0, #0]
 8001b5c:	3004      	adds	r0, #4
 8001b5e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8001b62:	3301      	adds	r3, #1
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d1f4      	bne.n	8001b52 <_Unwind_VRS_Pop+0x4e>
 8001b68:	63a0      	str	r0, [r4, #56]	; 0x38
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f000 f958 	bl	8001e20 <__gnu_Unwind_Restore_WMMXC>
 8001b70:	2000      	movs	r0, #0
 8001b72:	e7db      	b.n	8001b2c <_Unwind_VRS_Pop+0x28>
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d1d8      	bne.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001b78:	0c15      	lsrs	r5, r2, #16
 8001b7a:	b297      	uxth	r7, r2
 8001b7c:	19eb      	adds	r3, r5, r7
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d8d3      	bhi.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	071e      	lsls	r6, r3, #28
 8001b86:	f100 80b7 	bmi.w	8001cf8 <_Unwind_VRS_Pop+0x1f4>
 8001b8a:	ae22      	add	r6, sp, #136	; 0x88
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f000 f925 	bl	8001ddc <__gnu_Unwind_Save_WMMXD>
 8001b92:	00ed      	lsls	r5, r5, #3
 8001b94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b96:	b15f      	cbz	r7, 8001bb0 <_Unwind_VRS_Pop+0xac>
 8001b98:	3d04      	subs	r5, #4
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	1971      	adds	r1, r6, r5
 8001b9e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ba6:	4283      	cmp	r3, r0
 8001ba8:	f841 2f04 	str.w	r2, [r1, #4]!
 8001bac:	d1f9      	bne.n	8001ba2 <_Unwind_VRS_Pop+0x9e>
 8001bae:	4618      	mov	r0, r3
 8001bb0:	63a0      	str	r0, [r4, #56]	; 0x38
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 f8f0 	bl	8001d98 <__gnu_Unwind_Restore_WMMXD>
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e7b7      	b.n	8001b2c <_Unwind_VRS_Pop+0x28>
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1b4      	bne.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001bc0:	2701      	movs	r7, #1
 8001bc2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001bc4:	b296      	uxth	r6, r2
 8001bc6:	1d20      	adds	r0, r4, #4
 8001bc8:	fa07 f103 	lsl.w	r1, r7, r3
 8001bcc:	4231      	tst	r1, r6
 8001bce:	f103 0301 	add.w	r3, r3, #1
 8001bd2:	d002      	beq.n	8001bda <_Unwind_VRS_Pop+0xd6>
 8001bd4:	6829      	ldr	r1, [r5, #0]
 8001bd6:	3504      	adds	r5, #4
 8001bd8:	6001      	str	r1, [r0, #0]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	f100 0004 	add.w	r0, r0, #4
 8001be0:	d1f2      	bne.n	8001bc8 <_Unwind_VRS_Pop+0xc4>
 8001be2:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001be6:	d13b      	bne.n	8001c60 <_Unwind_VRS_Pop+0x15c>
 8001be8:	63a5      	str	r5, [r4, #56]	; 0x38
 8001bea:	e79f      	b.n	8001b2c <_Unwind_VRS_Pop+0x28>
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d19c      	bne.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001bf0:	1977      	adds	r7, r6, r5
 8001bf2:	2f20      	cmp	r7, #32
 8001bf4:	d899      	bhi.n	8001b2a <_Unwind_VRS_Pop+0x26>
 8001bf6:	2e0f      	cmp	r6, #15
 8001bf8:	d966      	bls.n	8001cc8 <_Unwind_VRS_Pop+0x1c4>
 8001bfa:	462f      	mov	r7, r5
 8001bfc:	2d00      	cmp	r5, #0
 8001bfe:	d13a      	bne.n	8001c76 <_Unwind_VRS_Pop+0x172>
 8001c00:	462a      	mov	r2, r5
 8001c02:	2700      	movs	r7, #0
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c08:	dd72      	ble.n	8001cf0 <_Unwind_VRS_Pop+0x1ec>
 8001c0a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001c0e:	4601      	mov	r1, r0
 8001c10:	a844      	add	r0, sp, #272	; 0x110
 8001c12:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001c16:	388c      	subs	r0, #140	; 0x8c
 8001c18:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c1c:	4291      	cmp	r1, r2
 8001c1e:	f840 5f04 	str.w	r5, [r0, #4]!
 8001c22:	d1f9      	bne.n	8001c18 <_Unwind_VRS_Pop+0x114>
 8001c24:	4608      	mov	r0, r1
 8001c26:	b197      	cbz	r7, 8001c4e <_Unwind_VRS_Pop+0x14a>
 8001c28:	2e10      	cmp	r6, #16
 8001c2a:	4632      	mov	r2, r6
 8001c2c:	bf38      	it	cc
 8001c2e:	2210      	movcc	r2, #16
 8001c30:	a944      	add	r1, sp, #272	; 0x110
 8001c32:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001c36:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001c3a:	0079      	lsls	r1, r7, #1
 8001c3c:	3a04      	subs	r2, #4
 8001c3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001c42:	f850 5b04 	ldr.w	r5, [r0], #4
 8001c46:	4288      	cmp	r0, r1
 8001c48:	f842 5f04 	str.w	r5, [r2, #4]!
 8001c4c:	d1f9      	bne.n	8001c42 <_Unwind_VRS_Pop+0x13e>
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d048      	beq.n	8001ce4 <_Unwind_VRS_Pop+0x1e0>
 8001c52:	2e0f      	cmp	r6, #15
 8001c54:	63a1      	str	r1, [r4, #56]	; 0x38
 8001c56:	d933      	bls.n	8001cc0 <_Unwind_VRS_Pop+0x1bc>
 8001c58:	b117      	cbz	r7, 8001c60 <_Unwind_VRS_Pop+0x15c>
 8001c5a:	a802      	add	r0, sp, #8
 8001c5c:	f000 f894 	bl	8001d88 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001c60:	2000      	movs	r0, #0
 8001c62:	e763      	b.n	8001b2c <_Unwind_VRS_Pop+0x28>
 8001c64:	2e0f      	cmp	r6, #15
 8001c66:	f63f af60 	bhi.w	8001b2a <_Unwind_VRS_Pop+0x26>
 8001c6a:	2700      	movs	r7, #0
 8001c6c:	6822      	ldr	r2, [r4, #0]
 8001c6e:	07d1      	lsls	r1, r2, #31
 8001c70:	d417      	bmi.n	8001ca2 <_Unwind_VRS_Pop+0x19e>
 8001c72:	2f00      	cmp	r7, #0
 8001c74:	d060      	beq.n	8001d38 <_Unwind_VRS_Pop+0x234>
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	0751      	lsls	r1, r2, #29
 8001c7a:	d445      	bmi.n	8001d08 <_Unwind_VRS_Pop+0x204>
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d04d      	beq.n	8001d1c <_Unwind_VRS_Pop+0x218>
 8001c80:	2e0f      	cmp	r6, #15
 8001c82:	d806      	bhi.n	8001c92 <_Unwind_VRS_Pop+0x18e>
 8001c84:	a822      	add	r0, sp, #136	; 0x88
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	f000 f87a 	bl	8001d80 <__gnu_Unwind_Save_VFP_D>
 8001c8c:	9b01      	ldr	r3, [sp, #4]
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	d0b6      	beq.n	8001c00 <_Unwind_VRS_Pop+0xfc>
 8001c92:	a802      	add	r0, sp, #8
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	f000 f87b 	bl	8001d90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	f1c6 0210 	rsb	r2, r6, #16
 8001ca0:	e7b0      	b.n	8001c04 <_Unwind_VRS_Pop+0x100>
 8001ca2:	f022 0101 	bic.w	r1, r2, #1
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	6021      	str	r1, [r4, #0]
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	4620      	mov	r0, r4
 8001cae:	d03b      	beq.n	8001d28 <_Unwind_VRS_Pop+0x224>
 8001cb0:	f022 0203 	bic.w	r2, r2, #3
 8001cb4:	f840 2b48 	str.w	r2, [r0], #72
 8001cb8:	f000 f85a 	bl	8001d70 <__gnu_Unwind_Save_VFP>
 8001cbc:	9b01      	ldr	r3, [sp, #4]
 8001cbe:	e7d8      	b.n	8001c72 <_Unwind_VRS_Pop+0x16e>
 8001cc0:	a822      	add	r0, sp, #136	; 0x88
 8001cc2:	f000 f859 	bl	8001d78 <__gnu_Unwind_Restore_VFP_D>
 8001cc6:	e7c7      	b.n	8001c58 <_Unwind_VRS_Pop+0x154>
 8001cc8:	2f10      	cmp	r7, #16
 8001cca:	d9ce      	bls.n	8001c6a <_Unwind_VRS_Pop+0x166>
 8001ccc:	3f10      	subs	r7, #16
 8001cce:	e7cd      	b.n	8001c6c <_Unwind_VRS_Pop+0x168>
 8001cd0:	f023 0310 	bic.w	r3, r3, #16
 8001cd4:	6023      	str	r3, [r4, #0]
 8001cd6:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001cda:	9201      	str	r2, [sp, #4]
 8001cdc:	f000 f8aa 	bl	8001e34 <__gnu_Unwind_Save_WMMXC>
 8001ce0:	9a01      	ldr	r2, [sp, #4]
 8001ce2:	e72d      	b.n	8001b40 <_Unwind_VRS_Pop+0x3c>
 8001ce4:	3104      	adds	r1, #4
 8001ce6:	63a1      	str	r1, [r4, #56]	; 0x38
 8001ce8:	a822      	add	r0, sp, #136	; 0x88
 8001cea:	f000 f83d 	bl	8001d68 <__gnu_Unwind_Restore_VFP>
 8001cee:	e7b7      	b.n	8001c60 <_Unwind_VRS_Pop+0x15c>
 8001cf0:	2f00      	cmp	r7, #0
 8001cf2:	d199      	bne.n	8001c28 <_Unwind_VRS_Pop+0x124>
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	e7aa      	b.n	8001c4e <_Unwind_VRS_Pop+0x14a>
 8001cf8:	f023 0308 	bic.w	r3, r3, #8
 8001cfc:	6023      	str	r3, [r4, #0]
 8001cfe:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001d02:	f000 f86b 	bl	8001ddc <__gnu_Unwind_Save_WMMXD>
 8001d06:	e740      	b.n	8001b8a <_Unwind_VRS_Pop+0x86>
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	f840 2bd0 	str.w	r2, [r0], #208
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	f000 f83c 	bl	8001d90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001d18:	9b01      	ldr	r3, [sp, #4]
 8001d1a:	e7af      	b.n	8001c7c <_Unwind_VRS_Pop+0x178>
 8001d1c:	a822      	add	r0, sp, #136	; 0x88
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	f000 f826 	bl	8001d70 <__gnu_Unwind_Save_VFP>
 8001d24:	9b01      	ldr	r3, [sp, #4]
 8001d26:	e7b9      	b.n	8001c9c <_Unwind_VRS_Pop+0x198>
 8001d28:	f041 0102 	orr.w	r1, r1, #2
 8001d2c:	f840 1b48 	str.w	r1, [r0], #72
 8001d30:	f000 f826 	bl	8001d80 <__gnu_Unwind_Save_VFP_D>
 8001d34:	9b01      	ldr	r3, [sp, #4]
 8001d36:	e79c      	b.n	8001c72 <_Unwind_VRS_Pop+0x16e>
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <_Unwind_VRS_Pop+0x240>
 8001d3c:	2e0f      	cmp	r6, #15
 8001d3e:	f63f af5f 	bhi.w	8001c00 <_Unwind_VRS_Pop+0xfc>
 8001d42:	e79f      	b.n	8001c84 <_Unwind_VRS_Pop+0x180>
 8001d44:	a822      	add	r0, sp, #136	; 0x88
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	f000 f812 	bl	8001d70 <__gnu_Unwind_Save_VFP>
 8001d4c:	9b01      	ldr	r3, [sp, #4]
 8001d4e:	e757      	b.n	8001c00 <_Unwind_VRS_Pop+0xfc>

08001d50 <__restore_core_regs>:
 8001d50:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001d54:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001d58:	469c      	mov	ip, r3
 8001d5a:	46a6      	mov	lr, r4
 8001d5c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001d60:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001d64:	46e5      	mov	sp, ip
 8001d66:	bd00      	pop	{pc}

08001d68 <__gnu_Unwind_Restore_VFP>:
 8001d68:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <__gnu_Unwind_Save_VFP>:
 8001d70:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <__gnu_Unwind_Restore_VFP_D>:
 8001d78:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop

08001d80 <__gnu_Unwind_Save_VFP_D>:
 8001d80:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop

08001d88 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001d88:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop

08001d90 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001d90:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop

08001d98 <__gnu_Unwind_Restore_WMMXD>:
 8001d98:	ecf0 0102 	ldfe	f0, [r0], #8
 8001d9c:	ecf0 1102 	ldfe	f1, [r0], #8
 8001da0:	ecf0 2102 	ldfe	f2, [r0], #8
 8001da4:	ecf0 3102 	ldfe	f3, [r0], #8
 8001da8:	ecf0 4102 	ldfe	f4, [r0], #8
 8001dac:	ecf0 5102 	ldfe	f5, [r0], #8
 8001db0:	ecf0 6102 	ldfe	f6, [r0], #8
 8001db4:	ecf0 7102 	ldfe	f7, [r0], #8
 8001db8:	ecf0 8102 	ldfp	f0, [r0], #8
 8001dbc:	ecf0 9102 	ldfp	f1, [r0], #8
 8001dc0:	ecf0 a102 	ldfp	f2, [r0], #8
 8001dc4:	ecf0 b102 	ldfp	f3, [r0], #8
 8001dc8:	ecf0 c102 	ldfp	f4, [r0], #8
 8001dcc:	ecf0 d102 	ldfp	f5, [r0], #8
 8001dd0:	ecf0 e102 	ldfp	f6, [r0], #8
 8001dd4:	ecf0 f102 	ldfp	f7, [r0], #8
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <__gnu_Unwind_Save_WMMXD>:
 8001ddc:	ece0 0102 	stfe	f0, [r0], #8
 8001de0:	ece0 1102 	stfe	f1, [r0], #8
 8001de4:	ece0 2102 	stfe	f2, [r0], #8
 8001de8:	ece0 3102 	stfe	f3, [r0], #8
 8001dec:	ece0 4102 	stfe	f4, [r0], #8
 8001df0:	ece0 5102 	stfe	f5, [r0], #8
 8001df4:	ece0 6102 	stfe	f6, [r0], #8
 8001df8:	ece0 7102 	stfe	f7, [r0], #8
 8001dfc:	ece0 8102 	stfp	f0, [r0], #8
 8001e00:	ece0 9102 	stfp	f1, [r0], #8
 8001e04:	ece0 a102 	stfp	f2, [r0], #8
 8001e08:	ece0 b102 	stfp	f3, [r0], #8
 8001e0c:	ece0 c102 	stfp	f4, [r0], #8
 8001e10:	ece0 d102 	stfp	f5, [r0], #8
 8001e14:	ece0 e102 	stfp	f6, [r0], #8
 8001e18:	ece0 f102 	stfp	f7, [r0], #8
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop

08001e20 <__gnu_Unwind_Restore_WMMXC>:
 8001e20:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001e24:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001e28:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001e2c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop

08001e34 <__gnu_Unwind_Save_WMMXC>:
 8001e34:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001e38:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001e3c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001e40:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <_Unwind_RaiseException>:
 8001e48:	46ec      	mov	ip, sp
 8001e4a:	b500      	push	{lr}
 8001e4c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001e50:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001e5c:	a901      	add	r1, sp, #4
 8001e5e:	f7ff fbed 	bl	800163c <__gnu_Unwind_RaiseException>
 8001e62:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001e66:	b012      	add	sp, #72	; 0x48
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <_Unwind_Resume>:
 8001e6c:	46ec      	mov	ip, sp
 8001e6e:	b500      	push	{lr}
 8001e70:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001e74:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001e80:	a901      	add	r1, sp, #4
 8001e82:	f7ff fc15 	bl	80016b0 <__gnu_Unwind_Resume>
 8001e86:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001e8a:	b012      	add	sp, #72	; 0x48
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <_Unwind_Resume_or_Rethrow>:
 8001e90:	46ec      	mov	ip, sp
 8001e92:	b500      	push	{lr}
 8001e94:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001e98:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ea4:	a901      	add	r1, sp, #4
 8001ea6:	f7ff fc25 	bl	80016f4 <__gnu_Unwind_Resume_or_Rethrow>
 8001eaa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001eae:	b012      	add	sp, #72	; 0x48
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop

08001eb4 <_Unwind_ForcedUnwind>:
 8001eb4:	46ec      	mov	ip, sp
 8001eb6:	b500      	push	{lr}
 8001eb8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ebc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ec8:	ab01      	add	r3, sp, #4
 8001eca:	f7ff fbe7 	bl	800169c <__gnu_Unwind_ForcedUnwind>
 8001ece:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ed2:	b012      	add	sp, #72	; 0x48
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <_Unwind_Backtrace>:
 8001ed8:	46ec      	mov	ip, sp
 8001eda:	b500      	push	{lr}
 8001edc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ee0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001eec:	aa01      	add	r2, sp, #4
 8001eee:	f7ff fc61 	bl	80017b4 <__gnu_Unwind_Backtrace>
 8001ef2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ef6:	b012      	add	sp, #72	; 0x48
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop

08001efc <next_unwind_byte>:
 8001efc:	7a02      	ldrb	r2, [r0, #8]
 8001efe:	b91a      	cbnz	r2, 8001f08 <next_unwind_byte+0xc>
 8001f00:	7a43      	ldrb	r3, [r0, #9]
 8001f02:	b943      	cbnz	r3, 8001f16 <next_unwind_byte+0x1a>
 8001f04:	20b0      	movs	r0, #176	; 0xb0
 8001f06:	4770      	bx	lr
 8001f08:	6803      	ldr	r3, [r0, #0]
 8001f0a:	3a01      	subs	r2, #1
 8001f0c:	7202      	strb	r2, [r0, #8]
 8001f0e:	021a      	lsls	r2, r3, #8
 8001f10:	6002      	str	r2, [r0, #0]
 8001f12:	0e18      	lsrs	r0, r3, #24
 8001f14:	4770      	bx	lr
 8001f16:	2103      	movs	r1, #3
 8001f18:	6842      	ldr	r2, [r0, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b410      	push	{r4}
 8001f1e:	7243      	strb	r3, [r0, #9]
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	1d14      	adds	r4, r2, #4
 8001f24:	7201      	strb	r1, [r0, #8]
 8001f26:	021a      	lsls	r2, r3, #8
 8001f28:	6044      	str	r4, [r0, #4]
 8001f2a:	6002      	str	r2, [r0, #0]
 8001f2c:	bc10      	pop	{r4}
 8001f2e:	0e18      	lsrs	r0, r3, #24
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop

08001f34 <_Unwind_GetGR.constprop.0>:
 8001f34:	2300      	movs	r3, #0
 8001f36:	b500      	push	{lr}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	aa03      	add	r2, sp, #12
 8001f3c:	9200      	str	r2, [sp, #0]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	220c      	movs	r2, #12
 8001f42:	f7ff fbe9 	bl	8001718 <_Unwind_VRS_Get>
 8001f46:	9803      	ldr	r0, [sp, #12]
 8001f48:	b005      	add	sp, #20
 8001f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4e:	bf00      	nop

08001f50 <unwind_UCB_from_context>:
 8001f50:	e7f0      	b.n	8001f34 <_Unwind_GetGR.constprop.0>
 8001f52:	bf00      	nop

08001f54 <__gnu_unwind_execute>:
 8001f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f58:	4606      	mov	r6, r0
 8001f5a:	460f      	mov	r7, r1
 8001f5c:	f04f 0800 	mov.w	r8, #0
 8001f60:	b085      	sub	sp, #20
 8001f62:	4638      	mov	r0, r7
 8001f64:	f7ff ffca 	bl	8001efc <next_unwind_byte>
 8001f68:	28b0      	cmp	r0, #176	; 0xb0
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	d023      	beq.n	8001fb6 <__gnu_unwind_execute+0x62>
 8001f6e:	0605      	lsls	r5, r0, #24
 8001f70:	d427      	bmi.n	8001fc2 <__gnu_unwind_execute+0x6e>
 8001f72:	2300      	movs	r3, #0
 8001f74:	f10d 090c 	add.w	r9, sp, #12
 8001f78:	4619      	mov	r1, r3
 8001f7a:	0085      	lsls	r5, r0, #2
 8001f7c:	220d      	movs	r2, #13
 8001f7e:	f8cd 9000 	str.w	r9, [sp]
 8001f82:	4630      	mov	r0, r6
 8001f84:	f7ff fbc8 	bl	8001718 <_Unwind_VRS_Get>
 8001f88:	b2ed      	uxtb	r5, r5
 8001f8a:	9b03      	ldr	r3, [sp, #12]
 8001f8c:	0660      	lsls	r0, r4, #25
 8001f8e:	f105 0504 	add.w	r5, r5, #4
 8001f92:	bf4c      	ite	mi
 8001f94:	1b5d      	submi	r5, r3, r5
 8001f96:	18ed      	addpl	r5, r5, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	220d      	movs	r2, #13
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f8cd 9000 	str.w	r9, [sp]
 8001fa2:	4630      	mov	r0, r6
 8001fa4:	9503      	str	r5, [sp, #12]
 8001fa6:	f7ff fbdd 	bl	8001764 <_Unwind_VRS_Set>
 8001faa:	4638      	mov	r0, r7
 8001fac:	f7ff ffa6 	bl	8001efc <next_unwind_byte>
 8001fb0:	28b0      	cmp	r0, #176	; 0xb0
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	d1db      	bne.n	8001f6e <__gnu_unwind_execute+0x1a>
 8001fb6:	f1b8 0f00 	cmp.w	r8, #0
 8001fba:	f000 8094 	beq.w	80020e6 <__gnu_unwind_execute+0x192>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e01c      	b.n	8001ffc <__gnu_unwind_execute+0xa8>
 8001fc2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001fc6:	2b80      	cmp	r3, #128	; 0x80
 8001fc8:	d05c      	beq.n	8002084 <__gnu_unwind_execute+0x130>
 8001fca:	2b90      	cmp	r3, #144	; 0x90
 8001fcc:	d019      	beq.n	8002002 <__gnu_unwind_execute+0xae>
 8001fce:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd0:	d02c      	beq.n	800202c <__gnu_unwind_execute+0xd8>
 8001fd2:	2bb0      	cmp	r3, #176	; 0xb0
 8001fd4:	d03e      	beq.n	8002054 <__gnu_unwind_execute+0x100>
 8001fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8001fd8:	d06b      	beq.n	80020b2 <__gnu_unwind_execute+0x15e>
 8001fda:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001fde:	2bd0      	cmp	r3, #208	; 0xd0
 8001fe0:	d10b      	bne.n	8001ffa <__gnu_unwind_execute+0xa6>
 8001fe2:	f000 0207 	and.w	r2, r0, #7
 8001fe6:	3201      	adds	r2, #1
 8001fe8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001fec:	2305      	movs	r3, #5
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	f7ff fd87 	bl	8001b04 <_Unwind_VRS_Pop>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0b3      	beq.n	8001f62 <__gnu_unwind_execute+0xe>
 8001ffa:	2009      	movs	r0, #9
 8001ffc:	b005      	add	sp, #20
 8001ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002002:	f000 030d 	and.w	r3, r0, #13
 8002006:	2b0d      	cmp	r3, #13
 8002008:	d0f7      	beq.n	8001ffa <__gnu_unwind_execute+0xa6>
 800200a:	2300      	movs	r3, #0
 800200c:	ad03      	add	r5, sp, #12
 800200e:	f000 020f 	and.w	r2, r0, #15
 8002012:	4619      	mov	r1, r3
 8002014:	9500      	str	r5, [sp, #0]
 8002016:	4630      	mov	r0, r6
 8002018:	f7ff fb7e 	bl	8001718 <_Unwind_VRS_Get>
 800201c:	2300      	movs	r3, #0
 800201e:	9500      	str	r5, [sp, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	220d      	movs	r2, #13
 8002024:	4630      	mov	r0, r6
 8002026:	f7ff fb9d 	bl	8001764 <_Unwind_VRS_Set>
 800202a:	e79a      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 800202c:	43c3      	mvns	r3, r0
 800202e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	411a      	asrs	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	0701      	lsls	r1, r0, #28
 800203c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8002040:	bf48      	it	mi
 8002042:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8002046:	4619      	mov	r1, r3
 8002048:	4630      	mov	r0, r6
 800204a:	f7ff fd5b 	bl	8001b04 <_Unwind_VRS_Pop>
 800204e:	2800      	cmp	r0, #0
 8002050:	d1d3      	bne.n	8001ffa <__gnu_unwind_execute+0xa6>
 8002052:	e786      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 8002054:	28b1      	cmp	r0, #177	; 0xb1
 8002056:	d057      	beq.n	8002108 <__gnu_unwind_execute+0x1b4>
 8002058:	28b2      	cmp	r0, #178	; 0xb2
 800205a:	d068      	beq.n	800212e <__gnu_unwind_execute+0x1da>
 800205c:	28b3      	cmp	r0, #179	; 0xb3
 800205e:	f000 8095 	beq.w	800218c <__gnu_unwind_execute+0x238>
 8002062:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8002066:	2bb4      	cmp	r3, #180	; 0xb4
 8002068:	d0c7      	beq.n	8001ffa <__gnu_unwind_execute+0xa6>
 800206a:	2301      	movs	r3, #1
 800206c:	f000 0207 	and.w	r2, r0, #7
 8002070:	441a      	add	r2, r3
 8002072:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002076:	4619      	mov	r1, r3
 8002078:	4630      	mov	r0, r6
 800207a:	f7ff fd43 	bl	8001b04 <_Unwind_VRS_Pop>
 800207e:	2800      	cmp	r0, #0
 8002080:	d1bb      	bne.n	8001ffa <__gnu_unwind_execute+0xa6>
 8002082:	e76e      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 8002084:	4638      	mov	r0, r7
 8002086:	f7ff ff39 	bl	8001efc <next_unwind_byte>
 800208a:	0224      	lsls	r4, r4, #8
 800208c:	4304      	orrs	r4, r0
 800208e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8002092:	d0b2      	beq.n	8001ffa <__gnu_unwind_execute+0xa6>
 8002094:	2300      	movs	r3, #0
 8002096:	0124      	lsls	r4, r4, #4
 8002098:	b2a2      	uxth	r2, r4
 800209a:	4619      	mov	r1, r3
 800209c:	4630      	mov	r0, r6
 800209e:	f7ff fd31 	bl	8001b04 <_Unwind_VRS_Pop>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d1a9      	bne.n	8001ffa <__gnu_unwind_execute+0xa6>
 80020a6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80020aa:	bf18      	it	ne
 80020ac:	f04f 0801 	movne.w	r8, #1
 80020b0:	e757      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 80020b2:	28c6      	cmp	r0, #198	; 0xc6
 80020b4:	d07d      	beq.n	80021b2 <__gnu_unwind_execute+0x25e>
 80020b6:	28c7      	cmp	r0, #199	; 0xc7
 80020b8:	f000 8086 	beq.w	80021c8 <__gnu_unwind_execute+0x274>
 80020bc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80020c0:	2bc0      	cmp	r3, #192	; 0xc0
 80020c2:	f000 8094 	beq.w	80021ee <__gnu_unwind_execute+0x29a>
 80020c6:	28c8      	cmp	r0, #200	; 0xc8
 80020c8:	f000 809f 	beq.w	800220a <__gnu_unwind_execute+0x2b6>
 80020cc:	28c9      	cmp	r0, #201	; 0xc9
 80020ce:	d194      	bne.n	8001ffa <__gnu_unwind_execute+0xa6>
 80020d0:	4638      	mov	r0, r7
 80020d2:	f7ff ff13 	bl	8001efc <next_unwind_byte>
 80020d6:	0302      	lsls	r2, r0, #12
 80020d8:	f000 000f 	and.w	r0, r0, #15
 80020dc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80020e0:	3001      	adds	r0, #1
 80020e2:	4302      	orrs	r2, r0
 80020e4:	e782      	b.n	8001fec <__gnu_unwind_execute+0x98>
 80020e6:	ac03      	add	r4, sp, #12
 80020e8:	4643      	mov	r3, r8
 80020ea:	220e      	movs	r2, #14
 80020ec:	4641      	mov	r1, r8
 80020ee:	9400      	str	r4, [sp, #0]
 80020f0:	4630      	mov	r0, r6
 80020f2:	f7ff fb11 	bl	8001718 <_Unwind_VRS_Get>
 80020f6:	9400      	str	r4, [sp, #0]
 80020f8:	4630      	mov	r0, r6
 80020fa:	4643      	mov	r3, r8
 80020fc:	220f      	movs	r2, #15
 80020fe:	4641      	mov	r1, r8
 8002100:	f7ff fb30 	bl	8001764 <_Unwind_VRS_Set>
 8002104:	4640      	mov	r0, r8
 8002106:	e779      	b.n	8001ffc <__gnu_unwind_execute+0xa8>
 8002108:	4638      	mov	r0, r7
 800210a:	f7ff fef7 	bl	8001efc <next_unwind_byte>
 800210e:	2800      	cmp	r0, #0
 8002110:	f43f af73 	beq.w	8001ffa <__gnu_unwind_execute+0xa6>
 8002114:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8002118:	f47f af6f 	bne.w	8001ffa <__gnu_unwind_execute+0xa6>
 800211c:	4602      	mov	r2, r0
 800211e:	4619      	mov	r1, r3
 8002120:	4630      	mov	r0, r6
 8002122:	f7ff fcef 	bl	8001b04 <_Unwind_VRS_Pop>
 8002126:	2800      	cmp	r0, #0
 8002128:	f47f af67 	bne.w	8001ffa <__gnu_unwind_execute+0xa6>
 800212c:	e719      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 800212e:	2300      	movs	r3, #0
 8002130:	f10d 090c 	add.w	r9, sp, #12
 8002134:	220d      	movs	r2, #13
 8002136:	4619      	mov	r1, r3
 8002138:	f8cd 9000 	str.w	r9, [sp]
 800213c:	4630      	mov	r0, r6
 800213e:	f7ff faeb 	bl	8001718 <_Unwind_VRS_Get>
 8002142:	4638      	mov	r0, r7
 8002144:	f7ff feda 	bl	8001efc <next_unwind_byte>
 8002148:	0602      	lsls	r2, r0, #24
 800214a:	f04f 0402 	mov.w	r4, #2
 800214e:	d50c      	bpl.n	800216a <__gnu_unwind_execute+0x216>
 8002150:	9b03      	ldr	r3, [sp, #12]
 8002152:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002156:	40a0      	lsls	r0, r4
 8002158:	4403      	add	r3, r0
 800215a:	4638      	mov	r0, r7
 800215c:	9303      	str	r3, [sp, #12]
 800215e:	f7ff fecd 	bl	8001efc <next_unwind_byte>
 8002162:	0603      	lsls	r3, r0, #24
 8002164:	f104 0407 	add.w	r4, r4, #7
 8002168:	d4f2      	bmi.n	8002150 <__gnu_unwind_execute+0x1fc>
 800216a:	2300      	movs	r3, #0
 800216c:	9903      	ldr	r1, [sp, #12]
 800216e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8002172:	40a2      	lsls	r2, r4
 8002174:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8002178:	188c      	adds	r4, r1, r2
 800217a:	f8cd 9000 	str.w	r9, [sp]
 800217e:	4619      	mov	r1, r3
 8002180:	220d      	movs	r2, #13
 8002182:	4630      	mov	r0, r6
 8002184:	9403      	str	r4, [sp, #12]
 8002186:	f7ff faed 	bl	8001764 <_Unwind_VRS_Set>
 800218a:	e6ea      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 800218c:	4638      	mov	r0, r7
 800218e:	f7ff feb5 	bl	8001efc <next_unwind_byte>
 8002192:	2301      	movs	r3, #1
 8002194:	0301      	lsls	r1, r0, #12
 8002196:	f000 000f 	and.w	r0, r0, #15
 800219a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800219e:	18c2      	adds	r2, r0, r3
 80021a0:	430a      	orrs	r2, r1
 80021a2:	4630      	mov	r0, r6
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7ff fcad 	bl	8001b04 <_Unwind_VRS_Pop>
 80021aa:	2800      	cmp	r0, #0
 80021ac:	f47f af25 	bne.w	8001ffa <__gnu_unwind_execute+0xa6>
 80021b0:	e6d7      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 80021b2:	4638      	mov	r0, r7
 80021b4:	f7ff fea2 	bl	8001efc <next_unwind_byte>
 80021b8:	0301      	lsls	r1, r0, #12
 80021ba:	f000 000f 	and.w	r0, r0, #15
 80021be:	2303      	movs	r3, #3
 80021c0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80021c4:	1c42      	adds	r2, r0, #1
 80021c6:	e7eb      	b.n	80021a0 <__gnu_unwind_execute+0x24c>
 80021c8:	4638      	mov	r0, r7
 80021ca:	f7ff fe97 	bl	8001efc <next_unwind_byte>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	f43f af13 	beq.w	8001ffa <__gnu_unwind_execute+0xa6>
 80021d4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80021d8:	f47f af0f 	bne.w	8001ffa <__gnu_unwind_execute+0xa6>
 80021dc:	4602      	mov	r2, r0
 80021de:	2104      	movs	r1, #4
 80021e0:	4630      	mov	r0, r6
 80021e2:	f7ff fc8f 	bl	8001b04 <_Unwind_VRS_Pop>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	f47f af07 	bne.w	8001ffa <__gnu_unwind_execute+0xa6>
 80021ec:	e6b9      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 80021ee:	2303      	movs	r3, #3
 80021f0:	f000 020f 	and.w	r2, r0, #15
 80021f4:	3201      	adds	r2, #1
 80021f6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80021fa:	4619      	mov	r1, r3
 80021fc:	4630      	mov	r0, r6
 80021fe:	f7ff fc81 	bl	8001b04 <_Unwind_VRS_Pop>
 8002202:	2800      	cmp	r0, #0
 8002204:	f47f aef9 	bne.w	8001ffa <__gnu_unwind_execute+0xa6>
 8002208:	e6ab      	b.n	8001f62 <__gnu_unwind_execute+0xe>
 800220a:	4638      	mov	r0, r7
 800220c:	f7ff fe76 	bl	8001efc <next_unwind_byte>
 8002210:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8002214:	f000 030f 	and.w	r3, r0, #15
 8002218:	3210      	adds	r2, #16
 800221a:	3301      	adds	r3, #1
 800221c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8002220:	e6e4      	b.n	8001fec <__gnu_unwind_execute+0x98>
 8002222:	bf00      	nop

08002224 <__gnu_unwind_frame>:
 8002224:	b530      	push	{r4, r5, lr}
 8002226:	2403      	movs	r4, #3
 8002228:	460d      	mov	r5, r1
 800222a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800222c:	b085      	sub	sp, #20
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	f88d 400c 	strb.w	r4, [sp, #12]
 8002234:	79dc      	ldrb	r4, [r3, #7]
 8002236:	0212      	lsls	r2, r2, #8
 8002238:	3308      	adds	r3, #8
 800223a:	a901      	add	r1, sp, #4
 800223c:	4628      	mov	r0, r5
 800223e:	9201      	str	r2, [sp, #4]
 8002240:	f88d 400d 	strb.w	r4, [sp, #13]
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	f7ff fe85 	bl	8001f54 <__gnu_unwind_execute>
 800224a:	b005      	add	sp, #20
 800224c:	bd30      	pop	{r4, r5, pc}
 800224e:	bf00      	nop

08002250 <_Unwind_GetRegionStart>:
 8002250:	b508      	push	{r3, lr}
 8002252:	f7ff fe7d 	bl	8001f50 <unwind_UCB_from_context>
 8002256:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002258:	bd08      	pop	{r3, pc}
 800225a:	bf00      	nop

0800225c <_Unwind_GetLanguageSpecificData>:
 800225c:	b508      	push	{r3, lr}
 800225e:	f7ff fe77 	bl	8001f50 <unwind_UCB_from_context>
 8002262:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002264:	79c3      	ldrb	r3, [r0, #7]
 8002266:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800226a:	3008      	adds	r0, #8
 800226c:	bd08      	pop	{r3, pc}
 800226e:	bf00      	nop

08002270 <_Unwind_GetTextRelBase>:
 8002270:	b508      	push	{r3, lr}
 8002272:	f004 fb96 	bl	80069a2 <abort>
 8002276:	bf00      	nop

08002278 <_Unwind_GetDataRelBase>:
 8002278:	b508      	push	{r3, lr}
 800227a:	f7ff fff9 	bl	8002270 <_Unwind_GetTextRelBase>
 800227e:	bf00      	nop

08002280 <__aeabi_idiv0>:
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_InitTick+0x3c>)
{
 8002288:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228a:	7818      	ldrb	r0, [r3, #0]
 800228c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002290:	fbb3 f3f0 	udiv	r3, r3, r0
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_InitTick+0x40>)
 8002296:	6810      	ldr	r0, [r2, #0]
 8002298:	fbb0 f0f3 	udiv	r0, r0, r3
 800229c:	f000 f89e 	bl	80023dc <HAL_SYSTICK_Config>
 80022a0:	4604      	mov	r4, r0
 80022a2:	b958      	cbnz	r0, 80022bc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a4:	2d0f      	cmp	r5, #15
 80022a6:	d809      	bhi.n	80022bc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	4602      	mov	r2, r0
 80022aa:	4629      	mov	r1, r5
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f000 f854 	bl	800235c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_InitTick+0x44>)
 80022b6:	4620      	mov	r0, r4
 80022b8:	601d      	str	r5, [r3, #0]
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_Init+0x20>)
{
 80022ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d4:	f043 0310 	orr.w	r3, r3, #16
 80022d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022da:	f000 f82d 	bl	8002338 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff ffd0 	bl	8002284 <HAL_InitTick>
  HAL_MspInit();
 80022e4:	f001 fb22 	bl	800392c <HAL_MspInit>
}
 80022e8:	2000      	movs	r0, #0
 80022ea:	bd08      	pop	{r3, pc}
 80022ec:	40022000 	.word	0x40022000

080022f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_IncTick+0x10>)
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_IncTick+0x14>)
 80022f4:	6811      	ldr	r1, [r2, #0]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	440b      	add	r3, r1
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000754 	.word	0x20000754
 8002304:	20000000 	.word	0x20000000

08002308 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002308:	4b01      	ldr	r3, [pc, #4]	; (8002310 <HAL_GetTick+0x8>)
 800230a:	6818      	ldr	r0, [r3, #0]
}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000754 	.word	0x20000754

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fff6 	bl	8002308 <HAL_GetTick>
 800231c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002320:	bf1e      	ittt	ne
 8002322:	4b04      	ldrne	r3, [pc, #16]	; (8002334 <HAL_Delay+0x20>)
 8002324:	781b      	ldrbne	r3, [r3, #0]
 8002326:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002328:	f7ff ffee 	bl	8002308 <HAL_GetTick>
 800232c:	1b40      	subs	r0, r0, r5
 800232e:	4284      	cmp	r4, r0
 8002330:	d8fa      	bhi.n	8002328 <HAL_Delay+0x14>
  {
  }
}
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800233a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800233e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002352:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002354:	60d3      	str	r3, [r2, #12]
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b530      	push	{r4, r5, lr}
 8002360:	68dc      	ldr	r4, [r3, #12]
 8002362:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002366:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	2b04      	cmp	r3, #4
 800236e:	bf28      	it	cs
 8002370:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002378:	bf98      	it	ls
 800237a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	fa05 f303 	lsl.w	r3, r5, r3
 8002380:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002384:	bf88      	it	hi
 8002386:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4019      	ands	r1, r3
 800238a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	fa05 f404 	lsl.w	r4, r5, r4
 8002390:	3c01      	subs	r4, #1
 8002392:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8002394:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002396:	ea42 0201 	orr.w	r2, r2, r1
 800239a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	bfaf      	iteee	ge
 80023a0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	4b06      	ldrlt	r3, [pc, #24]	; (80023c0 <HAL_NVIC_SetPriority+0x64>)
 80023a6:	f000 000f 	andlt.w	r0, r0, #15
 80023aa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	bfa5      	ittet	ge
 80023ae:	b2d2      	uxtbge	r2, r2
 80023b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80023ba:	bd30      	pop	{r4, r5, pc}
 80023bc:	e000ed00 	.word	0xe000ed00
 80023c0:	e000ed14 	.word	0xe000ed14

080023c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023c4:	2301      	movs	r3, #1
 80023c6:	0942      	lsrs	r2, r0, #5
 80023c8:	f000 001f 	and.w	r0, r0, #31
 80023cc:	fa03 f000 	lsl.w	r0, r3, r0
 80023d0:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <HAL_NVIC_EnableIRQ+0x14>)
 80023d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100

080023dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	3801      	subs	r0, #1
 80023de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023e2:	d20a      	bcs.n	80023fa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800240c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800240e:	4616      	mov	r6, r2
 8002410:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002412:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80025b8 <HAL_GPIO_Init+0x1b0>
 8002416:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80025bc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800241a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8002420:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002424:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8002428:	45a0      	cmp	r8, r4
 800242a:	d17f      	bne.n	800252c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800242c:	684d      	ldr	r5, [r1, #4]
 800242e:	2d12      	cmp	r5, #18
 8002430:	f000 80af 	beq.w	8002592 <HAL_GPIO_Init+0x18a>
 8002434:	f200 8088 	bhi.w	8002548 <HAL_GPIO_Init+0x140>
 8002438:	2d02      	cmp	r5, #2
 800243a:	f000 80a7 	beq.w	800258c <HAL_GPIO_Init+0x184>
 800243e:	d87c      	bhi.n	800253a <HAL_GPIO_Init+0x132>
 8002440:	2d00      	cmp	r5, #0
 8002442:	f000 808e 	beq.w	8002562 <HAL_GPIO_Init+0x15a>
 8002446:	2d01      	cmp	r5, #1
 8002448:	f000 809e 	beq.w	8002588 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800244c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002450:	2cff      	cmp	r4, #255	; 0xff
 8002452:	bf93      	iteet	ls
 8002454:	4682      	movls	sl, r0
 8002456:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800245a:	3d08      	subhi	r5, #8
 800245c:	f8d0 b000 	ldrls.w	fp, [r0]
 8002460:	bf92      	itee	ls
 8002462:	00b5      	lslls	r5, r6, #2
 8002464:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002468:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800246a:	fa09 f805 	lsl.w	r8, r9, r5
 800246e:	ea2b 0808 	bic.w	r8, fp, r8
 8002472:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002476:	bf88      	it	hi
 8002478:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800247c:	ea48 0505 	orr.w	r5, r8, r5
 8002480:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002484:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002488:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800248c:	d04e      	beq.n	800252c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800248e:	4d47      	ldr	r5, [pc, #284]	; (80025ac <HAL_GPIO_Init+0x1a4>)
 8002490:	4f46      	ldr	r7, [pc, #280]	; (80025ac <HAL_GPIO_Init+0x1a4>)
 8002492:	69ad      	ldr	r5, [r5, #24]
 8002494:	f026 0803 	bic.w	r8, r6, #3
 8002498:	f045 0501 	orr.w	r5, r5, #1
 800249c:	61bd      	str	r5, [r7, #24]
 800249e:	69bd      	ldr	r5, [r7, #24]
 80024a0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80024a4:	f005 0501 	and.w	r5, r5, #1
 80024a8:	9501      	str	r5, [sp, #4]
 80024aa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80024ae:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024b2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80024b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80024b8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80024bc:	fa09 f90b 	lsl.w	r9, r9, fp
 80024c0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c4:	4d3a      	ldr	r5, [pc, #232]	; (80025b0 <HAL_GPIO_Init+0x1a8>)
 80024c6:	42a8      	cmp	r0, r5
 80024c8:	d068      	beq.n	800259c <HAL_GPIO_Init+0x194>
 80024ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024ce:	42a8      	cmp	r0, r5
 80024d0:	d066      	beq.n	80025a0 <HAL_GPIO_Init+0x198>
 80024d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024d6:	42a8      	cmp	r0, r5
 80024d8:	d064      	beq.n	80025a4 <HAL_GPIO_Init+0x19c>
 80024da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024de:	42a8      	cmp	r0, r5
 80024e0:	bf0c      	ite	eq
 80024e2:	2503      	moveq	r5, #3
 80024e4:	2504      	movne	r5, #4
 80024e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80024ea:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80024ee:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024f2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80024f8:	bf14      	ite	ne
 80024fa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024fc:	43a5      	biceq	r5, r4
 80024fe:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002500:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002502:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002506:	bf14      	ite	ne
 8002508:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800250a:	43a5      	biceq	r5, r4
 800250c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800250e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002510:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002514:	bf14      	ite	ne
 8002516:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002518:	43a5      	biceq	r5, r4
 800251a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800251c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800251e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002522:	bf14      	ite	ne
 8002524:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002526:	ea25 0404 	biceq.w	r4, r5, r4
 800252a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800252c:	3601      	adds	r6, #1
 800252e:	2e10      	cmp	r6, #16
 8002530:	f47f af73 	bne.w	800241a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8002534:	b003      	add	sp, #12
 8002536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800253a:	2d03      	cmp	r5, #3
 800253c:	d022      	beq.n	8002584 <HAL_GPIO_Init+0x17c>
 800253e:	2d11      	cmp	r5, #17
 8002540:	d184      	bne.n	800244c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002542:	68ca      	ldr	r2, [r1, #12]
 8002544:	3204      	adds	r2, #4
          break;
 8002546:	e781      	b.n	800244c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8002548:	4f1a      	ldr	r7, [pc, #104]	; (80025b4 <HAL_GPIO_Init+0x1ac>)
 800254a:	42bd      	cmp	r5, r7
 800254c:	d009      	beq.n	8002562 <HAL_GPIO_Init+0x15a>
 800254e:	d812      	bhi.n	8002576 <HAL_GPIO_Init+0x16e>
 8002550:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80025c0 <HAL_GPIO_Init+0x1b8>
 8002554:	454d      	cmp	r5, r9
 8002556:	d004      	beq.n	8002562 <HAL_GPIO_Init+0x15a>
 8002558:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800255c:	454d      	cmp	r5, r9
 800255e:	f47f af75 	bne.w	800244c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002562:	688a      	ldr	r2, [r1, #8]
 8002564:	b1c2      	cbz	r2, 8002598 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002566:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002568:	bf0c      	ite	eq
 800256a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800256e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002572:	2208      	movs	r2, #8
 8002574:	e76a      	b.n	800244c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8002576:	4575      	cmp	r5, lr
 8002578:	d0f3      	beq.n	8002562 <HAL_GPIO_Init+0x15a>
 800257a:	4565      	cmp	r5, ip
 800257c:	d0f1      	beq.n	8002562 <HAL_GPIO_Init+0x15a>
 800257e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80025c4 <HAL_GPIO_Init+0x1bc>
 8002582:	e7eb      	b.n	800255c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002584:	2200      	movs	r2, #0
 8002586:	e761      	b.n	800244c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002588:	68ca      	ldr	r2, [r1, #12]
          break;
 800258a:	e75f      	b.n	800244c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800258c:	68ca      	ldr	r2, [r1, #12]
 800258e:	3208      	adds	r2, #8
          break;
 8002590:	e75c      	b.n	800244c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002592:	68ca      	ldr	r2, [r1, #12]
 8002594:	320c      	adds	r2, #12
          break;
 8002596:	e759      	b.n	800244c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002598:	2204      	movs	r2, #4
 800259a:	e757      	b.n	800244c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259c:	2500      	movs	r5, #0
 800259e:	e7a2      	b.n	80024e6 <HAL_GPIO_Init+0xde>
 80025a0:	2501      	movs	r5, #1
 80025a2:	e7a0      	b.n	80024e6 <HAL_GPIO_Init+0xde>
 80025a4:	2502      	movs	r5, #2
 80025a6:	e79e      	b.n	80024e6 <HAL_GPIO_Init+0xde>
 80025a8:	40010400 	.word	0x40010400
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	10210000 	.word	0x10210000
 80025b8:	10310000 	.word	0x10310000
 80025bc:	10320000 	.word	0x10320000
 80025c0:	10110000 	.word	0x10110000
 80025c4:	10220000 	.word	0x10220000

080025c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c8:	6883      	ldr	r3, [r0, #8]
 80025ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80025cc:	bf14      	ite	ne
 80025ce:	2001      	movne	r0, #1
 80025d0:	2000      	moveq	r0, #0
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d4:	b10a      	cbz	r2, 80025da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d6:	6101      	str	r1, [r0, #16]
 80025d8:	4770      	bx	lr
 80025da:	0409      	lsls	r1, r1, #16
 80025dc:	e7fb      	b.n	80025d6 <HAL_GPIO_WritePin+0x2>
	...

080025e0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e0:	6803      	ldr	r3, [r0, #0]
{
 80025e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	07db      	lsls	r3, r3, #31
{
 80025e8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	d410      	bmi.n	800260e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ec:	682b      	ldr	r3, [r5, #0]
 80025ee:	079f      	lsls	r7, r3, #30
 80025f0:	d45e      	bmi.n	80026b0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	682b      	ldr	r3, [r5, #0]
 80025f4:	0719      	lsls	r1, r3, #28
 80025f6:	f100 8095 	bmi.w	8002724 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fa:	682b      	ldr	r3, [r5, #0]
 80025fc:	075a      	lsls	r2, r3, #29
 80025fe:	f100 80bf 	bmi.w	8002780 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	69ea      	ldr	r2, [r5, #28]
 8002604:	2a00      	cmp	r2, #0
 8002606:	f040 812d 	bne.w	8002864 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800260a:	2000      	movs	r0, #0
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800260e:	4c90      	ldr	r4, [pc, #576]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 8002610:	6863      	ldr	r3, [r4, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d007      	beq.n	800262a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d10c      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
 8002624:	6863      	ldr	r3, [r4, #4]
 8002626:	03de      	lsls	r6, r3, #15
 8002628:	d509      	bpl.n	800263e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	039c      	lsls	r4, r3, #14
 800262e:	d5dd      	bpl.n	80025ec <HAL_RCC_OscConfig+0xc>
 8002630:	686b      	ldr	r3, [r5, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1da      	bne.n	80025ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002636:	2001      	movs	r0, #1
}
 8002638:	b002      	add	sp, #8
 800263a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263e:	686b      	ldr	r3, [r5, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d110      	bne.n	8002668 <HAL_RCC_OscConfig+0x88>
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800264e:	f7ff fe5b 	bl	8002308 <HAL_GetTick>
 8002652:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	0398      	lsls	r0, r3, #14
 8002658:	d4c8      	bmi.n	80025ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265a:	f7ff fe55 	bl	8002308 <HAL_GetTick>
 800265e:	1b80      	subs	r0, r0, r6
 8002660:	2864      	cmp	r0, #100	; 0x64
 8002662:	d9f7      	bls.n	8002654 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002664:	2003      	movs	r0, #3
 8002666:	e7e7      	b.n	8002638 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002668:	b99b      	cbnz	r3, 8002692 <HAL_RCC_OscConfig+0xb2>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002678:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800267a:	f7ff fe45 	bl	8002308 <HAL_GetTick>
 800267e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	0399      	lsls	r1, r3, #14
 8002684:	d5b2      	bpl.n	80025ec <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002686:	f7ff fe3f 	bl	8002308 <HAL_GetTick>
 800268a:	1b80      	subs	r0, r0, r6
 800268c:	2864      	cmp	r0, #100	; 0x64
 800268e:	d9f7      	bls.n	8002680 <HAL_RCC_OscConfig+0xa0>
 8002690:	e7e8      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	d103      	bne.n	80026a2 <HAL_RCC_OscConfig+0xc2>
 800269a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269e:	6023      	str	r3, [r4, #0]
 80026a0:	e7d1      	b.n	8002646 <HAL_RCC_OscConfig+0x66>
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a6:	6023      	str	r3, [r4, #0]
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	e7cd      	b.n	800264c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026b0:	4c67      	ldr	r4, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	f013 0f0c 	tst.w	r3, #12
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d110      	bne.n	80026e6 <HAL_RCC_OscConfig+0x106>
 80026c4:	6863      	ldr	r3, [r4, #4]
 80026c6:	03da      	lsls	r2, r3, #15
 80026c8:	d40d      	bmi.n	80026e6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	079b      	lsls	r3, r3, #30
 80026ce:	d502      	bpl.n	80026d6 <HAL_RCC_OscConfig+0xf6>
 80026d0:	692b      	ldr	r3, [r5, #16]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1af      	bne.n	8002636 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	696a      	ldr	r2, [r5, #20]
 80026da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026e2:	6023      	str	r3, [r4, #0]
 80026e4:	e785      	b.n	80025f2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e6:	692a      	ldr	r2, [r5, #16]
 80026e8:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <HAL_RCC_OscConfig+0x274>)
 80026ea:	b16a      	cbz	r2, 8002708 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026f0:	f7ff fe0a 	bl	8002308 <HAL_GetTick>
 80026f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	079f      	lsls	r7, r3, #30
 80026fa:	d4ec      	bmi.n	80026d6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff fe04 	bl	8002308 <HAL_GetTick>
 8002700:	1b80      	subs	r0, r0, r6
 8002702:	2802      	cmp	r0, #2
 8002704:	d9f7      	bls.n	80026f6 <HAL_RCC_OscConfig+0x116>
 8002706:	e7ad      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002708:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800270a:	f7ff fdfd 	bl	8002308 <HAL_GetTick>
 800270e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	0798      	lsls	r0, r3, #30
 8002714:	f57f af6d 	bpl.w	80025f2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7ff fdf6 	bl	8002308 <HAL_GetTick>
 800271c:	1b80      	subs	r0, r0, r6
 800271e:	2802      	cmp	r0, #2
 8002720:	d9f6      	bls.n	8002710 <HAL_RCC_OscConfig+0x130>
 8002722:	e79f      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002724:	69aa      	ldr	r2, [r5, #24]
 8002726:	4c4a      	ldr	r4, [pc, #296]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <HAL_RCC_OscConfig+0x278>)
 800272a:	b1da      	cbz	r2, 8002764 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002730:	f7ff fdea 	bl	8002308 <HAL_GetTick>
 8002734:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002738:	079b      	lsls	r3, r3, #30
 800273a:	d50d      	bpl.n	8002758 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800273c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <HAL_RCC_OscConfig+0x27c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fbb3 f3f2 	udiv	r3, r3, r2
 8002748:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800274a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800274c:	9b01      	ldr	r3, [sp, #4]
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	9201      	str	r2, [sp, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_RCC_OscConfig+0x16a>
 8002756:	e750      	b.n	80025fa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7ff fdd6 	bl	8002308 <HAL_GetTick>
 800275c:	1b80      	subs	r0, r0, r6
 800275e:	2802      	cmp	r0, #2
 8002760:	d9e9      	bls.n	8002736 <HAL_RCC_OscConfig+0x156>
 8002762:	e77f      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002764:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002766:	f7ff fdcf 	bl	8002308 <HAL_GetTick>
 800276a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800276e:	079f      	lsls	r7, r3, #30
 8002770:	f57f af43 	bpl.w	80025fa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002774:	f7ff fdc8 	bl	8002308 <HAL_GetTick>
 8002778:	1b80      	subs	r0, r0, r6
 800277a:	2802      	cmp	r0, #2
 800277c:	d9f6      	bls.n	800276c <HAL_RCC_OscConfig+0x18c>
 800277e:	e771      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002780:	4c33      	ldr	r4, [pc, #204]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 8002782:	69e3      	ldr	r3, [r4, #28]
 8002784:	00d8      	lsls	r0, r3, #3
 8002786:	d424      	bmi.n	80027d2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002788:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	69e3      	ldr	r3, [r4, #28]
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	61e3      	str	r3, [r4, #28]
 8002792:	69e3      	ldr	r3, [r4, #28]
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4e30      	ldr	r6, [pc, #192]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800279e:	6833      	ldr	r3, [r6, #0]
 80027a0:	05d9      	lsls	r1, r3, #23
 80027a2:	d518      	bpl.n	80027d6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	68eb      	ldr	r3, [r5, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d126      	bne.n	80027f8 <HAL_RCC_OscConfig+0x218>
 80027aa:	6a23      	ldr	r3, [r4, #32]
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80027b2:	f7ff fda9 	bl	8002308 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027ba:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	6a23      	ldr	r3, [r4, #32]
 80027be:	079b      	lsls	r3, r3, #30
 80027c0:	d53f      	bpl.n	8002842 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80027c2:	2f00      	cmp	r7, #0
 80027c4:	f43f af1d 	beq.w	8002602 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	69e3      	ldr	r3, [r4, #28]
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ce:	61e3      	str	r3, [r4, #28]
 80027d0:	e717      	b.n	8002602 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2700      	movs	r7, #0
 80027d4:	e7e2      	b.n	800279c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d6:	6833      	ldr	r3, [r6, #0]
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80027de:	f7ff fd93 	bl	8002308 <HAL_GetTick>
 80027e2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	6833      	ldr	r3, [r6, #0]
 80027e6:	05da      	lsls	r2, r3, #23
 80027e8:	d4dc      	bmi.n	80027a4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7ff fd8d 	bl	8002308 <HAL_GetTick>
 80027ee:	eba0 0008 	sub.w	r0, r0, r8
 80027f2:	2864      	cmp	r0, #100	; 0x64
 80027f4:	d9f6      	bls.n	80027e4 <HAL_RCC_OscConfig+0x204>
 80027f6:	e735      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f8:	b9ab      	cbnz	r3, 8002826 <HAL_RCC_OscConfig+0x246>
 80027fa:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6223      	str	r3, [r4, #32]
 8002806:	6a23      	ldr	r3, [r4, #32]
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800280e:	f7ff fd7b 	bl	8002308 <HAL_GetTick>
 8002812:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	6a23      	ldr	r3, [r4, #32]
 8002816:	0798      	lsls	r0, r3, #30
 8002818:	d5d3      	bpl.n	80027c2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7ff fd75 	bl	8002308 <HAL_GetTick>
 800281e:	1b80      	subs	r0, r0, r6
 8002820:	4540      	cmp	r0, r8
 8002822:	d9f7      	bls.n	8002814 <HAL_RCC_OscConfig+0x234>
 8002824:	e71e      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002826:	2b05      	cmp	r3, #5
 8002828:	6a23      	ldr	r3, [r4, #32]
 800282a:	d103      	bne.n	8002834 <HAL_RCC_OscConfig+0x254>
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6223      	str	r3, [r4, #32]
 8002832:	e7ba      	b.n	80027aa <HAL_RCC_OscConfig+0x1ca>
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6223      	str	r3, [r4, #32]
 800283a:	6a23      	ldr	r3, [r4, #32]
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	e7b6      	b.n	80027b0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff fd61 	bl	8002308 <HAL_GetTick>
 8002846:	eba0 0008 	sub.w	r0, r0, r8
 800284a:	42b0      	cmp	r0, r6
 800284c:	d9b6      	bls.n	80027bc <HAL_RCC_OscConfig+0x1dc>
 800284e:	e709      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
 8002850:	40021000 	.word	0x40021000
 8002854:	42420000 	.word	0x42420000
 8002858:	42420480 	.word	0x42420480
 800285c:	20000008 	.word	0x20000008
 8002860:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	4c22      	ldr	r4, [pc, #136]	; (80028f0 <HAL_RCC_OscConfig+0x310>)
 8002866:	6863      	ldr	r3, [r4, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	f43f aee2 	beq.w	8002636 <HAL_RCC_OscConfig+0x56>
 8002872:	2300      	movs	r3, #0
 8002874:	4e1f      	ldr	r6, [pc, #124]	; (80028f4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002876:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002878:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	d12b      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800287c:	f7ff fd44 	bl	8002308 <HAL_GetTick>
 8002880:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	0199      	lsls	r1, r3, #6
 8002886:	d41f      	bmi.n	80028c8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002888:	6a2b      	ldr	r3, [r5, #32]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002890:	6862      	ldr	r2, [r4, #4]
 8002892:	68a9      	ldr	r1, [r5, #8]
 8002894:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002898:	430a      	orrs	r2, r1
 800289a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800289e:	6862      	ldr	r2, [r4, #4]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80028a6:	4313      	orrs	r3, r2
 80028a8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80028aa:	2301      	movs	r3, #1
 80028ac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80028ae:	f7ff fd2b 	bl	8002308 <HAL_GetTick>
 80028b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	019a      	lsls	r2, r3, #6
 80028b8:	f53f aea7 	bmi.w	800260a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7ff fd24 	bl	8002308 <HAL_GetTick>
 80028c0:	1b40      	subs	r0, r0, r5
 80028c2:	2802      	cmp	r0, #2
 80028c4:	d9f6      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2d4>
 80028c6:	e6cd      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff fd1e 	bl	8002308 <HAL_GetTick>
 80028cc:	1bc0      	subs	r0, r0, r7
 80028ce:	2802      	cmp	r0, #2
 80028d0:	d9d7      	bls.n	8002882 <HAL_RCC_OscConfig+0x2a2>
 80028d2:	e6c7      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80028d4:	f7ff fd18 	bl	8002308 <HAL_GetTick>
 80028d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	f57f ae94 	bpl.w	800260a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e2:	f7ff fd11 	bl	8002308 <HAL_GetTick>
 80028e6:	1b40      	subs	r0, r0, r5
 80028e8:	2802      	cmp	r0, #2
 80028ea:	d9f6      	bls.n	80028da <HAL_RCC_OscConfig+0x2fa>
 80028ec:	e6ba      	b.n	8002664 <HAL_RCC_OscConfig+0x84>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	42420060 	.word	0x42420060

080028f8 <HAL_RCC_GetSysClockFreq>:
{
 80028f8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80028fc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028fe:	ac02      	add	r4, sp, #8
 8002900:	f103 0510 	add.w	r5, r3, #16
 8002904:	4622      	mov	r2, r4
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	3308      	adds	r3, #8
 800290c:	c203      	stmia	r2!, {r0, r1}
 800290e:	42ab      	cmp	r3, r5
 8002910:	4614      	mov	r4, r2
 8002912:	d1f7      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002914:	2301      	movs	r3, #1
 8002916:	f88d 3004 	strb.w	r3, [sp, #4]
 800291a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800291c:	4911      	ldr	r1, [pc, #68]	; (8002964 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800291e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002922:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	f003 020c 	and.w	r2, r3, #12
 8002928:	2a08      	cmp	r2, #8
 800292a:	d117      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002930:	a806      	add	r0, sp, #24
 8002932:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002934:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002936:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800293a:	d50c      	bpl.n	8002956 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293e:	480a      	ldr	r0, [pc, #40]	; (8002968 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002940:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002944:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002946:	aa06      	add	r2, sp, #24
 8002948:	4413      	add	r3, r2
 800294a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002952:	b007      	add	sp, #28
 8002954:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x74>)
 8002958:	4350      	muls	r0, r2
 800295a:	e7fa      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800295e:	e7f8      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x5a>
 8002960:	08006a50 	.word	0x08006a50
 8002964:	40021000 	.word	0x40021000
 8002968:	007a1200 	.word	0x007a1200
 800296c:	003d0900 	.word	0x003d0900

08002970 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_RCC_ClockConfig+0x154>)
{
 8002972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002976:	6813      	ldr	r3, [r2, #0]
{
 8002978:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	428b      	cmp	r3, r1
{
 8002980:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002982:	d32a      	bcc.n	80029da <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	6829      	ldr	r1, [r5, #0]
 8002986:	078c      	lsls	r4, r1, #30
 8002988:	d434      	bmi.n	80029f4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	07ca      	lsls	r2, r1, #31
 800298c:	d447      	bmi.n	8002a1e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800298e:	4a4d      	ldr	r2, [pc, #308]	; (8002ac4 <HAL_RCC_ClockConfig+0x154>)
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	429e      	cmp	r6, r3
 8002998:	f0c0 8082 	bcc.w	8002aa0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	682a      	ldr	r2, [r5, #0]
 800299e:	4c4a      	ldr	r4, [pc, #296]	; (8002ac8 <HAL_RCC_ClockConfig+0x158>)
 80029a0:	f012 0f04 	tst.w	r2, #4
 80029a4:	f040 8087 	bne.w	8002ab6 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	0713      	lsls	r3, r2, #28
 80029aa:	d506      	bpl.n	80029ba <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ac:	6863      	ldr	r3, [r4, #4]
 80029ae:	692a      	ldr	r2, [r5, #16]
 80029b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80029b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80029b8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ba:	f7ff ff9d 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80029be:	6863      	ldr	r3, [r4, #4]
 80029c0:	4a42      	ldr	r2, [pc, #264]	; (8002acc <HAL_RCC_ClockConfig+0x15c>)
 80029c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	40d8      	lsrs	r0, r3
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_ClockConfig+0x160>)
 80029cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7ff fc58 	bl	8002284 <HAL_InitTick>
  return HAL_OK;
 80029d4:	2000      	movs	r0, #0
}
 80029d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	f023 0307 	bic.w	r3, r3, #7
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029e4:	6813      	ldr	r3, [r2, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	4299      	cmp	r1, r3
 80029ec:	d0ca      	beq.n	8002984 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
 80029f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fa:	bf1e      	ittt	ne
 80029fc:	685a      	ldrne	r2, [r3, #4]
 80029fe:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002a02:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a06:	bf42      	ittt	mi
 8002a08:	685a      	ldrmi	r2, [r3, #4]
 8002a0a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002a0e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	68a8      	ldr	r0, [r5, #8]
 8002a14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a18:	4302      	orrs	r2, r0
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	e7b5      	b.n	800298a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	686a      	ldr	r2, [r5, #4]
 8002a20:	4c29      	ldr	r4, [pc, #164]	; (8002ac8 <HAL_RCC_ClockConfig+0x158>)
 8002a22:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a24:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	d11c      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	d0df      	beq.n	80029ee <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a34:	f023 0303 	bic.w	r3, r3, #3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002a3c:	f7ff fc64 	bl	8002308 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002a42:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d114      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a48:	6863      	ldr	r3, [r4, #4]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d09d      	beq.n	800298e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a52:	f7ff fc59 	bl	8002308 <HAL_GetTick>
 8002a56:	1bc0      	subs	r0, r0, r7
 8002a58:	4540      	cmp	r0, r8
 8002a5a:	d9f5      	bls.n	8002a48 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	2a02      	cmp	r2, #2
 8002a64:	d102      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a6a:	e7df      	b.n	8002a2c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	f013 0f02 	tst.w	r3, #2
 8002a70:	e7dc      	b.n	8002a2c <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d086      	beq.n	800298e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7ff fc42 	bl	8002308 <HAL_GetTick>
 8002a84:	1bc0      	subs	r0, r0, r7
 8002a86:	4540      	cmp	r0, r8
 8002a88:	d9f5      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x106>
 8002a8a:	e7e7      	b.n	8002a5c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7ff fc3c 	bl	8002308 <HAL_GetTick>
 8002a90:	1bc0      	subs	r0, r0, r7
 8002a92:	4540      	cmp	r0, r8
 8002a94:	d8e2      	bhi.n	8002a5c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a96:	6863      	ldr	r3, [r4, #4]
 8002a98:	f013 0f0c 	tst.w	r3, #12
 8002a9c:	d1f6      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x11c>
 8002a9e:	e776      	b.n	800298e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	4333      	orrs	r3, r6
 8002aa8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	429e      	cmp	r6, r3
 8002ab2:	d19c      	bne.n	80029ee <HAL_RCC_ClockConfig+0x7e>
 8002ab4:	e772      	b.n	800299c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab6:	6863      	ldr	r3, [r4, #4]
 8002ab8:	68e9      	ldr	r1, [r5, #12]
 8002aba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	e771      	b.n	80029a8 <HAL_RCC_ClockConfig+0x38>
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08006b60 	.word	0x08006b60
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002ad6:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ae2:	6810      	ldr	r0, [r2, #0]
}    
 8002ae4:	40d8      	lsrs	r0, r3
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08006b70 	.word	0x08006b70
 8002af0:	20000008 	.word	0x20000008

08002af4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b02:	6810      	ldr	r0, [r2, #0]
} 
 8002b04:	40d8      	lsrs	r0, r3
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08006b70 	.word	0x08006b70
 8002b10:	20000008 	.word	0x20000008

08002b14 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b14:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002b16:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002b2e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	f04f 0302 	mov.w	r3, #2
 8002b36:	d01c      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x48>
 8002b38:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8002b3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b3e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002b40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002b44:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b46:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b4a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b50:	680a      	ldr	r2, [r1, #0]
 8002b52:	2a40      	cmp	r2, #64	; 0x40
 8002b54:	d079      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x120>
 8002b56:	d819      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x62>
 8002b58:	2a10      	cmp	r2, #16
 8002b5a:	f000 8093 	beq.w	8002c84 <HAL_TIM_ConfigClockSource+0x15a>
 8002b5e:	d80a      	bhi.n	8002b76 <HAL_TIM_ConfigClockSource+0x4c>
 8002b60:	2a00      	cmp	r2, #0
 8002b62:	f000 8089 	beq.w	8002c78 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002b72:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b76:	2a20      	cmp	r2, #32
 8002b78:	f000 808a 	beq.w	8002c90 <HAL_TIM_ConfigClockSource+0x166>
 8002b7c:	2a30      	cmp	r2, #48	; 0x30
 8002b7e:	d1f2      	bne.n	8002b66 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b80:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b86:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002b8a:	e036      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002b8c:	2a70      	cmp	r2, #112	; 0x70
 8002b8e:	d036      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xd4>
 8002b90:	d81b      	bhi.n	8002bca <HAL_TIM_ConfigClockSource+0xa0>
 8002b92:	2a50      	cmp	r2, #80	; 0x50
 8002b94:	d042      	beq.n	8002c1c <HAL_TIM_ConfigClockSource+0xf2>
 8002b96:	2a60      	cmp	r2, #96	; 0x60
 8002b98:	d1e5      	bne.n	8002b66 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b9c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002baa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bb2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002bba:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002bbe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002bc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bc4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002bc8:	e017      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002bca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002bce:	d011      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0xca>
 8002bd0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002bd4:	d1c7      	bne.n	8002b66 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bd6:	688a      	ldr	r2, [r1, #8]
 8002bd8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002bda:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bdc:	68c9      	ldr	r1, [r1, #12]
 8002bde:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002be8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bea:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf2:	e002      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e7b3      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bfe:	688a      	ldr	r2, [r1, #8]
 8002c00:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002c02:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c04:	68c9      	ldr	r1, [r1, #12]
 8002c06:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c10:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002c12:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002c14:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c16:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002c1a:	e7ee      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1c:	684c      	ldr	r4, [r1, #4]
 8002c1e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c20:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c22:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c24:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c28:	f025 0501 	bic.w	r5, r5, #1
 8002c2c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002c30:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c36:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002c3e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c44:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002c48:	e7d7      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	684c      	ldr	r4, [r1, #4]
 8002c4c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c4e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c50:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c52:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c56:	f025 0501 	bic.w	r5, r5, #1
 8002c5a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002c5e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c64:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c6a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002c6c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c72:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002c76:	e7c0      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002c78:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c7e:	f042 0207 	orr.w	r2, r2, #7
 8002c82:	e7ba      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002c84:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c8a:	f042 0217 	orr.w	r2, r2, #23
 8002c8e:	e7b4      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002c90:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c96:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002c9a:	e7ae      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xd0>

08002c9c <HAL_TIM_OC_DelayElapsedCallback>:
 8002c9c:	4770      	bx	lr

08002c9e <HAL_TIM_IC_CaptureCallback>:
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_TriggerCallback>:
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca4:	6803      	ldr	r3, [r0, #0]
{
 8002ca6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca8:	691a      	ldr	r2, [r3, #16]
{
 8002caa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cac:	0791      	lsls	r1, r2, #30
 8002cae:	d50e      	bpl.n	8002cce <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	0792      	lsls	r2, r2, #30
 8002cb4:	d50b      	bpl.n	8002cce <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb6:	f06f 0202 	mvn.w	r2, #2
 8002cba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cbc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cbe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc2:	079b      	lsls	r3, r3, #30
 8002cc4:	d077      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	f7ff ffea 	bl	8002c9e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	0750      	lsls	r0, r2, #29
 8002cd4:	d510      	bpl.n	8002cf8 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	0751      	lsls	r1, r2, #29
 8002cda:	d50d      	bpl.n	8002cf8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cdc:	f06f 0204 	mvn.w	r2, #4
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002cec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cee:	d068      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf0:	f7ff ffd5 	bl	8002c9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	0712      	lsls	r2, r2, #28
 8002cfe:	d50f      	bpl.n	8002d20 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	0710      	lsls	r0, r2, #28
 8002d04:	d50c      	bpl.n	8002d20 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d06:	f06f 0208 	mvn.w	r2, #8
 8002d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d0c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d10:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d12:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002d14:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d16:	d05a      	beq.n	8002dce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d18:	f7ff ffc1 	bl	8002c9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	06d2      	lsls	r2, r2, #27
 8002d26:	d510      	bpl.n	8002d4a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	06d0      	lsls	r0, r2, #27
 8002d2c:	d50d      	bpl.n	8002d4a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d2e:	f06f 0210 	mvn.w	r2, #16
 8002d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d34:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d38:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d3a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d40:	d04b      	beq.n	8002dda <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	f7ff ffac 	bl	8002c9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	2300      	movs	r3, #0
 8002d48:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	07d1      	lsls	r1, r2, #31
 8002d50:	d508      	bpl.n	8002d64 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	07d2      	lsls	r2, r2, #31
 8002d56:	d505      	bpl.n	8002d64 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d58:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d60:	f000 fa34 	bl	80031cc <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	0610      	lsls	r0, r2, #24
 8002d6a:	d508      	bpl.n	8002d7e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	0611      	lsls	r1, r2, #24
 8002d70:	d505      	bpl.n	8002d7e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d72:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002d76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d7a:	f000 f8aa 	bl	8002ed2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	0652      	lsls	r2, r2, #25
 8002d84:	d508      	bpl.n	8002d98 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	0650      	lsls	r0, r2, #25
 8002d8a:	d505      	bpl.n	8002d98 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002d90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d94:	f7ff ff85 	bl	8002ca2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	0691      	lsls	r1, r2, #26
 8002d9e:	d522      	bpl.n	8002de6 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	0692      	lsls	r2, r2, #26
 8002da4:	d51f      	bpl.n	8002de6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002daa:	4620      	mov	r0, r4
}
 8002dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002db2:	f000 b88d 	b.w	8002ed0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	f7ff ff71 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f7ff ff70 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dc0:	e783      	b.n	8002cca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	f7ff ff6b 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff ff6a 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dcc:	e792      	b.n	8002cf4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	f7ff ff65 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7ff ff64 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dd8:	e7a0      	b.n	8002d1c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	f7ff ff5f 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dde:	4620      	mov	r0, r4
 8002de0:	f7ff ff5e 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002de4:	e7af      	b.n	8002d46 <HAL_TIM_IRQHandler+0xa2>
 8002de6:	bd10      	pop	{r4, pc}

08002de8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de8:	4a1a      	ldr	r2, [pc, #104]	; (8002e54 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002dea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	4290      	cmp	r0, r2
 8002dee:	d00a      	beq.n	8002e06 <TIM_Base_SetConfig+0x1e>
 8002df0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002df4:	d007      	beq.n	8002e06 <TIM_Base_SetConfig+0x1e>
 8002df6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dfa:	4290      	cmp	r0, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_Base_SetConfig+0x1e>
 8002dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e02:	4290      	cmp	r0, r2
 8002e04:	d115      	bne.n	8002e32 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002e06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <TIM_Base_SetConfig+0x6c>)
 8002e10:	4290      	cmp	r0, r2
 8002e12:	d00a      	beq.n	8002e2a <TIM_Base_SetConfig+0x42>
 8002e14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0x42>
 8002e1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e1e:	4290      	cmp	r0, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0x42>
 8002e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e26:	4290      	cmp	r0, r2
 8002e28:	d103      	bne.n	8002e32 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e30:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002e32:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002e38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3c:	688b      	ldr	r3, [r1, #8]
 8002e3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002e40:	680b      	ldr	r3, [r1, #0]
 8002e42:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <TIM_Base_SetConfig+0x6c>)
 8002e46:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	bf04      	itt	eq
 8002e4a:	690b      	ldreq	r3, [r1, #16]
 8002e4c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	6143      	str	r3, [r0, #20]
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00

08002e58 <HAL_TIM_Base_Init>:
{
 8002e58:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	b1a0      	cbz	r0, 8002e88 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e66:	b91b      	cbnz	r3, 8002e70 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002e68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e6c:	f000 fd80 	bl	8003970 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002e70:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e72:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002e74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e78:	1d21      	adds	r1, r4, #4
 8002e7a:	f7ff ffb5 	bl	8002de8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002e7e:	2301      	movs	r3, #1
  return HAL_OK;
 8002e80:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002e82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002e86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
}
 8002e8a:	bd10      	pop	{r4, pc}

08002e8c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002e8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002e90:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	f04f 0302 	mov.w	r3, #2
 8002e98:	d018      	beq.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002e9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e9e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002ea2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002ea4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002ea6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002eaa:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4322      	orrs	r2, r4
 8002eb0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002ecc:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002ece:	bd10      	pop	{r4, pc}

08002ed0 <HAL_TIMEx_CommutationCallback>:
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	4770      	bx	lr

08002ed4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed8:	6805      	ldr	r5, [r0, #0]
 8002eda:	68c2      	ldr	r2, [r0, #12]
 8002edc:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ede:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ee8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002eea:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002ef0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002ef4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ef8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002efe:	696b      	ldr	r3, [r5, #20]
 8002f00:	6982      	ldr	r2, [r0, #24]
 8002f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f06:	4313      	orrs	r3, r2
 8002f08:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002f0a:	4b40      	ldr	r3, [pc, #256]	; (800300c <UART_SetConfig+0x138>)
{
 8002f0c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002f0e:	429d      	cmp	r5, r3
 8002f10:	f04f 0419 	mov.w	r4, #25
 8002f14:	d146      	bne.n	8002fa4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f16:	f7ff fded 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8002f1a:	fb04 f300 	mul.w	r3, r4, r0
 8002f1e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002f22:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002f26:	00b6      	lsls	r6, r6, #2
 8002f28:	fbb3 f3f6 	udiv	r3, r3, r6
 8002f2c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f30:	011e      	lsls	r6, r3, #4
 8002f32:	f7ff fddf 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8002f36:	4360      	muls	r0, r4
 8002f38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002f42:	f7ff fdd7 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8002f46:	4360      	muls	r0, r4
 8002f48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f56:	fb08 7313 	mls	r3, r8, r3, r7
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	3332      	adds	r3, #50	; 0x32
 8002f5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f62:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002f66:	f7ff fdc5 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8002f6a:	4360      	muls	r0, r4
 8002f6c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002f70:	0092      	lsls	r2, r2, #2
 8002f72:	fbb0 faf2 	udiv	sl, r0, r2
 8002f76:	f7ff fdbd 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f7a:	4360      	muls	r0, r4
 8002f7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f8a:	fb08 a313 	mls	r3, r8, r3, sl
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	3332      	adds	r3, #50	; 0x32
 8002f92:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	433b      	orrs	r3, r7
 8002f9c:	4433      	add	r3, r6
 8002f9e:	60ab      	str	r3, [r5, #8]
 8002fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa4:	f7ff fd96 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	fb04 f300 	mul.w	r3, r4, r0
 8002fac:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002fb0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002fb4:	00b6      	lsls	r6, r6, #2
 8002fb6:	fbb3 f3f6 	udiv	r3, r3, r6
 8002fba:	fbb3 f3f8 	udiv	r3, r3, r8
 8002fbe:	011e      	lsls	r6, r3, #4
 8002fc0:	f7ff fd88 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	4360      	muls	r0, r4
 8002fc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fbb0 f7f3 	udiv	r7, r0, r3
 8002fd0:	f7ff fd80 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	4360      	muls	r0, r4
 8002fd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe0:	fbb3 f3f8 	udiv	r3, r3, r8
 8002fe4:	fb08 7313 	mls	r3, r8, r3, r7
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	3332      	adds	r3, #50	; 0x32
 8002fec:	fbb3 f3f8 	udiv	r3, r3, r8
 8002ff0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002ff4:	f7ff fd6e 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	4360      	muls	r0, r4
 8002ffa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	fbb0 faf2 	udiv	sl, r0, r2
 8003004:	f7ff fd66 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8003008:	e7b7      	b.n	8002f7a <UART_SetConfig+0xa6>
 800300a:	bf00      	nop
 800300c:	40013800 	.word	0x40013800

08003010 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	460e      	mov	r6, r1
 8003016:	4617      	mov	r7, r2
 8003018:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800301a:	6821      	ldr	r1, [r4, #0]
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	ea36 0303 	bics.w	r3, r6, r3
 8003022:	d101      	bne.n	8003028 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003024:	2000      	movs	r0, #0
}
 8003026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003028:	1c6b      	adds	r3, r5, #1
 800302a:	d0f7      	beq.n	800301c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800302c:	b995      	cbnz	r5, 8003054 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800302e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003030:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003038:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003042:	2320      	movs	r3, #32
 8003044:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800304c:	2300      	movs	r3, #0
 800304e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003054:	f7ff f958 	bl	8002308 <HAL_GetTick>
 8003058:	1bc0      	subs	r0, r0, r7
 800305a:	4285      	cmp	r5, r0
 800305c:	d2dd      	bcs.n	800301a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800305e:	e7e6      	b.n	800302e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003060 <HAL_UART_Init>:
{
 8003060:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003062:	4604      	mov	r4, r0
 8003064:	b340      	cbz	r0, 80030b8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003066:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800306a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800306e:	b91b      	cbnz	r3, 8003078 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003070:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003074:	f000 fc9a 	bl	80039ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003078:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800307a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800307c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003080:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003082:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003088:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800308a:	f7ff ff23 	bl	8002ed4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030a0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80030aa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ac:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80030ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80030b2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80030b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030b8:	2001      	movs	r0, #1
}
 80030ba:	bd10      	pop	{r4, pc}

080030bc <HAL_UART_Transmit>:
{
 80030bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80030c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80030c6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80030c8:	2b20      	cmp	r3, #32
{
 80030ca:	460d      	mov	r5, r1
 80030cc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80030ce:	d14e      	bne.n	800316e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d049      	beq.n	8003168 <HAL_UART_Transmit+0xac>
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d047      	beq.n	8003168 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80030d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d046      	beq.n	800316e <HAL_UART_Transmit+0xb2>
 80030e0:	2301      	movs	r3, #1
 80030e2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ea:	2321      	movs	r3, #33	; 0x21
 80030ec:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80030f0:	f7ff f90a 	bl	8002308 <HAL_GetTick>
 80030f4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80030f6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80030fa:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80030fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003100:	b29b      	uxth	r3, r3
 8003102:	b96b      	cbnz	r3, 8003120 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003104:	463b      	mov	r3, r7
 8003106:	4632      	mov	r2, r6
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff ff80 	bl	8003010 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003110:	b9a8      	cbnz	r0, 800313e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003112:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003114:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003118:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003120:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003124:	3b01      	subs	r3, #1
 8003126:	b29b      	uxth	r3, r3
 8003128:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800312a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003132:	4620      	mov	r0, r4
 8003134:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003136:	d10e      	bne.n	8003156 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003138:	f7ff ff6a 	bl	8003010 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800313c:	b110      	cbz	r0, 8003144 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800313e:	2003      	movs	r0, #3
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003144:	882b      	ldrh	r3, [r5, #0]
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800314e:	6923      	ldr	r3, [r4, #16]
 8003150:	b943      	cbnz	r3, 8003164 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8003152:	3502      	adds	r5, #2
 8003154:	e7d3      	b.n	80030fe <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	f7ff ff5b 	bl	8003010 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800315a:	2800      	cmp	r0, #0
 800315c:	d1ef      	bne.n	800313e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	782a      	ldrb	r2, [r5, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	3501      	adds	r5, #1
 8003166:	e7ca      	b.n	80030fe <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003168:	2001      	movs	r0, #1
 800316a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800316e:	2002      	movs	r0, #2
}
 8003170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003174 <_ZN7DHTDataC1ENS_6StatusE>:
		TimeoutOnDataReceive,
		ChecksumFailed,
		Other
	};

	DHTData(Status stat) : temperature(-1.f), humidity(-1.f), status(stat) {}
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <_ZN7DHTDataC1ENS_6StatusE+0x28>)
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a05      	ldr	r2, [pc, #20]	; (800319c <_ZN7DHTDataC1ENS_6StatusE+0x28>)
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	bf800000 	.word	0xbf800000

080031a0 <_ZN7DHTDataC1Eff>:
	DHTData(float temp, float hum) : temperature(temp), humidity(hum), status(Status::Valid) {}
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_TIM_PeriodElapsedCallback>:
TIM_HandleTypeDef htim3;

volatile unsigned long timerOverflows = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timerOverflows++;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80031e4:	6013      	str	r3, [r2, #0]
	}
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	20000698 	.word	0x20000698
 80031f4:	200006d8 	.word	0x200006d8

080031f8 <_Z6microsv>:

unsigned long micros()
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031fe:	b672      	cpsid	i
	__disable_irq(); //disable interrupts

	int overflows = timerOverflows;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <_Z6microsv+0x48>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	607b      	str	r3, [r7, #4]
	auto ticks = htim3.Instance->CNT;
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <_Z6microsv+0x4c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800320e:	b662      	cpsie	i

	__enable_irq(); //enable interrupts

	//total overflows + counting ticks by cycle rate in microseconds
	//each overflow happens when 2 byte register is full therefore 65536
	return (overflows * 65536 + ticks) * CLOCK_CYCLES_PER_US;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	461a      	mov	r2, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	4413      	add	r3, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fce6 	bl	8000bec <__aeabi_ui2f>
 8003220:	4603      	mov	r3, r0
 8003222:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fd38 	bl	8000c9c <__aeabi_fmul>
 800322c:	4603      	mov	r3, r0
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd fefa 	bl	8001028 <__aeabi_f2uiz>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200006d8 	.word	0x200006d8
 8003244:	20000698 	.word	0x20000698

08003248 <_Z12waitForStateP12GPIO_TypeDefthjm>:

bool waitForState(GPIO_TypeDef* gpio, uint16_t pin, byte state, unsigned int timeout, unsigned long start = micros())
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	4613      	mov	r3, r2
 8003258:	727b      	strb	r3, [r7, #9]
	while (HAL_GPIO_ReadPin(gpio, pin) != state)
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	4619      	mov	r1, r3
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff f9b2 	bl	80025c8 <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	7a7b      	ldrb	r3, [r7, #9]
 800326a:	4293      	cmp	r3, r2
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <_Z12waitForStateP12GPIO_TypeDefthjm+0x48>
	{
		auto diff = micros() - start;
 8003278:	f7ff ffbe 	bl	80031f8 <_Z6microsv>
 800327c:	4602      	mov	r2, r0
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	617b      	str	r3, [r7, #20]
		if(diff >= timeout)
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	d3e6      	bcc.n	800325a <_Z12waitForStateP12GPIO_TypeDefthjm+0x12>
		{
			return false;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <_Z12waitForStateP12GPIO_TypeDefthjm+0x4a>
		}
	}

	return true;
 8003290:	2301      	movs	r3, #1
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_Z7pulseInP12GPIO_TypeDefthj>:

unsigned long pulseIn(GPIO_TypeDef* gpio, uint16_t pin, byte state, unsigned int timeout)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b088      	sub	sp, #32
 800329e:	af02      	add	r7, sp, #8
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	817b      	strh	r3, [r7, #10]
 80032a8:	4613      	mov	r3, r2
 80032aa:	727b      	strb	r3, [r7, #9]
	auto start = micros();
 80032ac:	f7ff ffa4 	bl	80031f8 <_Z6microsv>
 80032b0:	6178      	str	r0, [r7, #20]

	if(!waitForState(gpio, pin, !state, timeout, start))
 80032b2:	7a7b      	ldrb	r3, [r7, #9]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7ff ffbd 	bl	8003248 <_Z12waitForStateP12GPIO_TypeDefthjm>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f083 0301 	eor.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <_Z7pulseInP12GPIO_TypeDefthj+0x44>
	{ //wait till initial state is set
		return 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	e02d      	b.n	800333a <_Z7pulseInP12GPIO_TypeDefthj+0xa0>
	}

	if(!waitForState(gpio, pin, state, timeout, start))
 80032de:	7a7a      	ldrb	r2, [r7, #9]
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff ffad 	bl	8003248 <_Z12waitForStateP12GPIO_TypeDefthjm>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <_Z7pulseInP12GPIO_TypeDefthj+0x64>
	{ //wait for transition HIGH -> LOW or LOW -> HIGH
		return 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e01d      	b.n	800333a <_Z7pulseInP12GPIO_TypeDefthj+0xa0>
	}

	auto end = micros();
 80032fe:	f7ff ff7b 	bl	80031f8 <_Z6microsv>
 8003302:	6138      	str	r0, [r7, #16]

	if(!waitForState(gpio, pin, !state, timeout, start))
 8003304:	7a7b      	ldrb	r3, [r7, #9]
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	8979      	ldrh	r1, [r7, #10]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff ff94 	bl	8003248 <_Z12waitForStateP12GPIO_TypeDefthjm>
 8003320:	4603      	mov	r3, r0
 8003322:	f083 0301 	eor.w	r3, r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <_Z7pulseInP12GPIO_TypeDefthj+0x96>
	{ //wait for transition LOW -> HIGH or HIGH -> LOW
		return 0;
 800332c:	2300      	movs	r3, #0
 800332e:	e004      	b.n	800333a <_Z7pulseInP12GPIO_TypeDefthj+0xa0>
	}

	return micros() - end;
 8003330:	f7ff ff62 	bl	80031f8 <_Z6microsv>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <_Z7toFloathh>:
#include "Definitions.h"

#define bitSet(value, bit) ((value) |= (1UL << (bit)))

float toFloat(byte intPart, byte floatPart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	460a      	mov	r2, r1
 800334e:	71fb      	strb	r3, [r7, #7]
 8003350:	4613      	mov	r3, r2
 8003352:	71bb      	strb	r3, [r7, #6]
	float f = floatPart;
 8003354:	79bb      	ldrb	r3, [r7, #6]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fc48 	bl	8000bec <__aeabi_ui2f>
 800335c:	4603      	mov	r3, r0
 800335e:	60fb      	str	r3, [r7, #12]

	while(f >= 1.f)
 8003360:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fd fe4b 	bl	8001000 <__aeabi_fcmpge>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <_Z7toFloathh+0x3a>
	{
		f /= 10.f;
 8003370:	490a      	ldr	r1, [pc, #40]	; (800339c <_Z7toFloathh+0x58>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7fd fd46 	bl	8000e04 <__aeabi_fdiv>
 8003378:	4603      	mov	r3, r0
 800337a:	60fb      	str	r3, [r7, #12]
	while(f >= 1.f)
 800337c:	e7f0      	b.n	8003360 <_Z7toFloathh+0x1c>
	}

	return static_cast<float>(intPart) + f;
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fc33 	bl	8000bec <__aeabi_ui2f>
 8003386:	4603      	mov	r3, r0
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd fb7e 	bl	8000a8c <__addsf3>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	41200000 	.word	0x41200000

080033a0 <_ZN9DHTReaderC1EP12GPIO_TypeDeft>:
#include "Definitions.h"

class DHTReader
{
public:
	DHTReader(GPIO_TypeDef* gpio, uint16_t pin) : m_gpio(gpio), m_pin(pin)
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	809a      	strh	r2, [r3, #4]
	{
		if(!m_gpio)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <_ZN9DHTReaderC1EP12GPIO_TypeDeft+0x26>
		{
			Error_Handler();
 80033c2:	f000 faad 	bl	8003920 <Error_Handler>
		}
	}
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZN9DHTReader7getDataEv>:

	~DHTReader() = default;

	DHTData getData()
 80033d0:	b5b0      	push	{r4, r5, r7, lr}
 80033d2:	b090      	sub	sp, #64	; 0x40
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	{
		//output && low
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	60da      	str	r2, [r3, #12]

		HAL_GPIO_WritePin(m_gpio, m_pin, GPIO_PIN_RESET);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	889b      	ldrh	r3, [r3, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7ff f8ee 	bl	80025d4 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = m_pin;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	889b      	ldrh	r3, [r3, #4]
 80033fc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fe:	2301      	movs	r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(m_gpio, &GPIO_InitStruct);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f107 0214 	add.w	r2, r7, #20
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe fff7 	bl	8002408 <HAL_GPIO_Init>

		HAL_Delay(18);
 800341a:	2012      	movs	r0, #18
 800341c:	f7fe ff7a 	bl	8002314 <HAL_Delay>

		//set input && pullup
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(m_gpio, &GPIO_InitStruct);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f107 0214 	add.w	r2, r7, #20
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe ffe8 	bl	8002408 <HAL_GPIO_Init>

		auto pulseLength = pulseIn(m_gpio, m_pin, LOW, 100);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	8899      	ldrh	r1, [r3, #4]
 8003440:	2364      	movs	r3, #100	; 0x64
 8003442:	2200      	movs	r2, #0
 8003444:	f7ff ff29 	bl	800329a <_Z7pulseInP12GPIO_TypeDefthj>
 8003448:	4603      	mov	r3, r0
 800344a:	633b      	str	r3, [r7, #48]	; 0x30

		if(pulseLength < 75)
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	2b4a      	cmp	r3, #74	; 0x4a
 8003450:	d804      	bhi.n	800345c <_ZN9DHTReader7getDataEv+0x8c>
		{
			return DHTData{DHTData::Status::TimeoutOnSync1};
 8003452:	2101      	movs	r1, #1
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fe8d 	bl	8003174 <_ZN7DHTDataC1ENS_6StatusE>
 800345a:	e084      	b.n	8003566 <_ZN9DHTReader7getDataEv+0x196>
		}

		if(!waitForState(m_gpio, m_pin, LOW, 100)) //give it 100us to start transmission
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	889d      	ldrh	r5, [r3, #4]
 8003464:	f7ff fec8 	bl	80031f8 <_Z6microsv>
 8003468:	4603      	mov	r3, r0
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2364      	movs	r3, #100	; 0x64
 800346e:	2200      	movs	r2, #0
 8003470:	4629      	mov	r1, r5
 8003472:	4620      	mov	r0, r4
 8003474:	f7ff fee8 	bl	8003248 <_Z12waitForStateP12GPIO_TypeDefthjm>
 8003478:	4603      	mov	r3, r0
 800347a:	f083 0301 	eor.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <_ZN9DHTReader7getDataEv+0xbe>
		{
			return DHTData{DHTData::Status::TimeoutOnSync2};
 8003484:	2102      	movs	r1, #2
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff fe74 	bl	8003174 <_ZN7DHTDataC1ENS_6StatusE>
 800348c:	e06b      	b.n	8003566 <_ZN9DHTReader7getDataEv+0x196>
		}

		byte data[5] = {0};
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	711a      	strb	r2, [r3, #4]
		byte count = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		while(count < 40)
 800349e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034a2:	2b27      	cmp	r3, #39	; 0x27
 80034a4:	dc37      	bgt.n	8003516 <_ZN9DHTReader7getDataEv+0x146>
		{
			pulseLength = pulseIn(m_gpio, m_pin, HIGH, 140);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	8899      	ldrh	r1, [r3, #4]
 80034ae:	238c      	movs	r3, #140	; 0x8c
 80034b0:	2201      	movs	r2, #1
 80034b2:	f7ff fef2 	bl	800329a <_Z7pulseInP12GPIO_TypeDefthj>
 80034b6:	4603      	mov	r3, r0
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30

			if(pulseLength == 0)
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <_ZN9DHTReader7getDataEv+0xfa>
			{
				return DHTData{DHTData::Status::TimeoutOnDataReceive};
 80034c0:	2103      	movs	r1, #3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fe56 	bl	8003174 <_ZN7DHTDataC1ENS_6StatusE>
 80034c8:	e04d      	b.n	8003566 <_ZN9DHTReader7getDataEv+0x196>
			}

			if(pulseLength > 60)
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2b3c      	cmp	r3, #60	; 0x3c
 80034ce:	d91c      	bls.n	800350a <_ZN9DHTReader7getDataEv+0x13a>
			{
				const auto index = count / BITS_IN_BYTE;
 80034d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
				const auto bit = BITS_IN_BYTE - 1 - count % BITS_IN_BYTE; //reverse order
 80034da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034de:	43db      	mvns	r3, r3
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
				bitSet(data[index], bit);
 80034e6:	f107 020c 	add.w	r2, r7, #12
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	4413      	add	r3, r2
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	b2d9      	uxtb	r1, r3
 80034fe:	f107 020c 	add.w	r2, r7, #12
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	4413      	add	r3, r2
 8003506:	460a      	mov	r2, r1
 8003508:	701a      	strb	r2, [r3, #0]
			}

			count++;
 800350a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800350e:	3301      	adds	r3, #1
 8003510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		while(count < 40)
 8003514:	e7c3      	b.n	800349e <_ZN9DHTReader7getDataEv+0xce>
		}

		const byte crc = data[0] + data[1] + data[2] + data[3];
 8003516:	7b3a      	ldrb	r2, [r7, #12]
 8003518:	7b7b      	ldrb	r3, [r7, #13]
 800351a:	4413      	add	r3, r2
 800351c:	b2da      	uxtb	r2, r3
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	4413      	add	r3, r2
 8003522:	b2da      	uxtb	r2, r3
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	4413      	add	r3, r2
 8003528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(crc != data[4])
 800352c:	7c3b      	ldrb	r3, [r7, #16]
 800352e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003532:	429a      	cmp	r2, r3
 8003534:	d004      	beq.n	8003540 <_ZN9DHTReader7getDataEv+0x170>
		{
			return DHTData{DHTData::Status::ChecksumFailed};
 8003536:	2104      	movs	r1, #4
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff fe1b 	bl	8003174 <_ZN7DHTDataC1ENS_6StatusE>
 800353e:	e012      	b.n	8003566 <_ZN9DHTReader7getDataEv+0x196>
		}

		return DHTData{toFloat(data[2], data[3]), toFloat(data[0], data[1])};
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fefc 	bl	8003344 <_Z7toFloathh>
 800354c:	4604      	mov	r4, r0
 800354e:	7b3b      	ldrb	r3, [r7, #12]
 8003550:	7b7a      	ldrb	r2, [r7, #13]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fef5 	bl	8003344 <_Z7toFloathh>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	4621      	mov	r1, r4
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fe1d 	bl	80031a0 <_ZN7DHTDataC1Eff>
	}
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	3738      	adds	r7, #56	; 0x38
 800356a:	46bd      	mov	sp, r7
 800356c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b09a      	sub	sp, #104	; 0x68
 8003574:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003576:	f7fe fea9 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800357a:	f000 f8b5 	bl	80036e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800357e:	f000 f98f 	bl	80038a0 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8003582:	f000 f95f 	bl	8003844 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 8003586:	f000 f8ff 	bl	8003788 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800358a:	484e      	ldr	r0, [pc, #312]	; (80036c4 <main+0x154>)
 800358c:	f7ff fac2 	bl	8002b14 <HAL_TIM_Base_Start_IT>

  DHTReader reader(GPIOB, GPIO_PIN_10);
 8003590:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003598:	494b      	ldr	r1, [pc, #300]	; (80036c8 <main+0x158>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff00 	bl	80033a0 <_ZN9DHTReaderC1EP12GPIO_TypeDeft>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    char buff[64] = {0};
 80035a0:	463b      	mov	r3, r7
 80035a2:	2240      	movs	r2, #64	; 0x40
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 faec 	bl	8003b84 <memset>

    while(true)
    {
    	memset(buff, 0, sizeof(buff));
 80035ac:	463b      	mov	r3, r7
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fae6 	bl	8003b84 <memset>

    	//sensor requires delay for accurate measurement, including startup
	    HAL_Delay(2000);
 80035b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035bc:	f7fe feaa 	bl	8002314 <HAL_Delay>

	    const DHTData& data = reader.getData();
 80035c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff00 	bl	80033d0 <_ZN9DHTReader7getDataEv>
 80035d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035d4:	657b      	str	r3, [r7, #84]	; 0x54

		if (data.status == DHTData::Status::Valid)
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d117      	bne.n	800360e <main+0x9e>
		{
			snprintf(buff, sizeof(buff), "Sample OK: %.2f *C %.2f %% H\n\r", static_cast<double>(data.temperature), static_cast<double>(data.humidity));
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ff20 	bl	8000428 <__aeabi_f2d>
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
 80035ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc ff19 	bl	8000428 <__aeabi_f2d>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4638      	mov	r0, r7
 80035fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003600:	e9cd 4500 	strd	r4, r5, [sp]
 8003604:	4a31      	ldr	r2, [pc, #196]	; (80036cc <main+0x15c>)
 8003606:	2140      	movs	r1, #64	; 0x40
 8003608:	f000 fac4 	bl	8003b94 <snprintf>
 800360c:	e051      	b.n	80036b2 <main+0x142>
		}
		else if (data.status == DHTData::Status::TimeoutOnSync1)
 800360e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d10c      	bne.n	8003630 <main+0xc0>
		{
			snprintf(buff, sizeof(buff), "Read DHT11 timed out on the first step of sync\n\r");
 8003616:	463b      	mov	r3, r7
 8003618:	4a2d      	ldr	r2, [pc, #180]	; (80036d0 <main+0x160>)
 800361a:	461c      	mov	r4, r3
 800361c:	4615      	mov	r5, r2
 800361e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	7023      	strb	r3, [r4, #0]
 800362e:	e040      	b.n	80036b2 <main+0x142>
		}
		else if (data.status == DHTData::Status::TimeoutOnSync2)
 8003630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d10c      	bne.n	8003652 <main+0xe2>
		{
			snprintf(buff, sizeof(buff), "Read DHT11 timed out on the second step of sync\n\r");
 8003638:	463b      	mov	r3, r7
 800363a:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <main+0x164>)
 800363c:	461c      	mov	r4, r3
 800363e:	4615      	mov	r5, r2
 8003640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	8023      	strh	r3, [r4, #0]
 8003650:	e02f      	b.n	80036b2 <main+0x142>
		}
		else if (data.status == DHTData::Status::TimeoutOnDataReceive)
 8003652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d10c      	bne.n	8003674 <main+0x104>
		{
			snprintf(buff, sizeof(buff), "Read DHT11 timed out while receiving data\n\r");
 800365a:	463b      	mov	r3, r7
 800365c:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <main+0x168>)
 800365e:	461c      	mov	r4, r3
 8003660:	4615      	mov	r5, r2
 8003662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800366a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800366e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003672:	e01e      	b.n	80036b2 <main+0x142>
		}
		else if (data.status == DHTData::Status::ChecksumFailed)
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d10a      	bne.n	8003692 <main+0x122>
		{
			snprintf(buff, sizeof(buff), "Read DHT11 with failed checksum\n\r");
 800367c:	463b      	mov	r3, r7
 800367e:	4a17      	ldr	r2, [pc, #92]	; (80036dc <main+0x16c>)
 8003680:	461c      	mov	r4, r3
 8003682:	4615      	mov	r5, r2
 8003684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800368a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	8023      	strh	r3, [r4, #0]
 8003690:	e00f      	b.n	80036b2 <main+0x142>
		}
		else if (data.status == DHTData::Status::Other)
 8003692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10b      	bne.n	80036b2 <main+0x142>
		{
			snprintf(buff, sizeof(buff), "Read DHT11 failed with unknown reason\n\r");
 800369a:	463b      	mov	r3, r7
 800369c:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <main+0x170>)
 800369e:	461c      	mov	r4, r3
 80036a0:	4615      	mov	r5, r2
 80036a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80036ae:	e884 0003 	stmia.w	r4, {r0, r1}
		}

	    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(buff), sizeof(buff), 1000);
 80036b2:	4639      	mov	r1, r7
 80036b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	480a      	ldr	r0, [pc, #40]	; (80036e4 <main+0x174>)
 80036bc:	f7ff fcfe 	bl	80030bc <HAL_UART_Transmit>
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
 80036c0:	e774      	b.n	80035ac <main+0x3c>
 80036c2:	bf00      	nop
 80036c4:	20000698 	.word	0x20000698
 80036c8:	40010c00 	.word	0x40010c00
 80036cc:	08006a60 	.word	0x08006a60
 80036d0:	08006a80 	.word	0x08006a80
 80036d4:	08006ab4 	.word	0x08006ab4
 80036d8:	08006ae8 	.word	0x08006ae8
 80036dc:	08006b14 	.word	0x08006b14
 80036e0:	08006b38 	.word	0x08006b38
 80036e4:	200006dc 	.word	0x200006dc

080036e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b090      	sub	sp, #64	; 0x40
 80036ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ee:	f107 0318 	add.w	r3, r7, #24
 80036f2:	2228      	movs	r2, #40	; 0x28
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fa44 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800370e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003714:	2300      	movs	r3, #0
 8003716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003718:	2301      	movs	r3, #1
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800371c:	2302      	movs	r3, #2
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003726:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800372a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800372c:	f107 0318 	add.w	r3, r7, #24
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe ff55 	bl	80025e0 <HAL_RCC_OscConfig>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8003746:	f000 f8eb 	bl	8003920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800374a:	230f      	movs	r3, #15
 800374c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800374e:	2302      	movs	r3, #2
 8003750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f903 	bl	8002970 <HAL_RCC_ClockConfig>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800377a:	f000 f8d1 	bl	8003920 <Error_Handler>
  }
}
 800377e:	bf00      	nop
 8003780:	3740      	adds	r7, #64	; 0x40
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800378e:	f107 0308 	add.w	r3, r7, #8
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379c:	463b      	mov	r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037a6:	4a26      	ldr	r2, [pc, #152]	; (8003840 <_ZL12MX_TIM3_Initv+0xb8>)
 80037a8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 288;
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037ac:	f44f 7290 	mov.w	r2, #288	; 0x120
 80037b0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037be:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037cc:	481b      	ldr	r0, [pc, #108]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037ce:	f7ff fb43 	bl	8002e58 <HAL_TIM_Base_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <_ZL12MX_TIM3_Initv+0x5e>
	{
	  Error_Handler();
 80037e2:	f000 f89d 	bl	8003920 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ea:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	4619      	mov	r1, r3
 80037f2:	4812      	ldr	r0, [pc, #72]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 80037f4:	f7ff f999 	bl	8002b2a <HAL_TIM_ConfigClockSource>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <_ZL12MX_TIM3_Initv+0x84>
	{
	  Error_Handler();
 8003808:	f000 f88a 	bl	8003920 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380c:	2300      	movs	r3, #0
 800380e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003814:	463b      	mov	r3, r7
 8003816:	4619      	mov	r1, r3
 8003818:	4808      	ldr	r0, [pc, #32]	; (800383c <_ZL12MX_TIM3_Initv+0xb4>)
 800381a:	f7ff fb37 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <_ZL12MX_TIM3_Initv+0xaa>
	{
	  Error_Handler();
 800382e:	f000 f877 	bl	8003920 <Error_Handler>
	}
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000698 	.word	0x20000698
 8003840:	40000400 	.word	0x40000400

08003844 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 800384a:	4a14      	ldr	r2, [pc, #80]	; (800389c <_ZL19MX_USART1_UART_Initv+0x58>)
 800384c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 800385e:	2200      	movs	r2, #0
 8003860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 800386a:	220c      	movs	r2, #12
 800386c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800387a:	4807      	ldr	r0, [pc, #28]	; (8003898 <_ZL19MX_USART1_UART_Initv+0x54>)
 800387c:	f7ff fbf0 	bl	8003060 <HAL_UART_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003890:	f000 f846 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200006dc 	.word	0x200006dc
 800389c:	40013800 	.word	0x40013800

080038a0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <_ZL12MX_GPIO_Initv+0x78>)
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <_ZL12MX_GPIO_Initv+0x78>)
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f043 0320 	orr.w	r3, r3, #32
 80038be:	6193      	str	r3, [r2, #24]
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <_ZL12MX_GPIO_Initv+0x78>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <_ZL12MX_GPIO_Initv+0x78>)
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <_ZL12MX_GPIO_Initv+0x78>)
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	6193      	str	r3, [r2, #24]
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <_ZL12MX_GPIO_Initv+0x78>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80038e4:	2201      	movs	r2, #1
 80038e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038ea:	480c      	ldr	r0, [pc, #48]	; (800391c <_ZL12MX_GPIO_Initv+0x7c>)
 80038ec:	f7fe fe72 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f6:	2301      	movs	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038fe:	2303      	movs	r3, #3
 8003900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003902:	f107 0308 	add.w	r3, r7, #8
 8003906:	4619      	mov	r1, r3
 8003908:	4804      	ldr	r0, [pc, #16]	; (800391c <_ZL12MX_GPIO_Initv+0x7c>)
 800390a:	f7fe fd7d 	bl	8002408 <HAL_GPIO_Init>

}
 800390e:	bf00      	nop
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40010c00 	.word	0x40010c00

08003920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_MspInit+0x3c>)
{
 800392e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	619a      	str	r2, [r3, #24]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	f002 0201 	and.w	r2, r2, #1
 800393e:	9200      	str	r2, [sp, #0]
 8003940:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003948:	61da      	str	r2, [r3, #28]
 800394a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003956:	6853      	ldr	r3, [r2, #4]
 8003958:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800395c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003962:	b002      	add	sp, #8
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	40010000 	.word	0x40010000

08003970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003970:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_TIM_Base_MspInit+0x38>)
 8003974:	6802      	ldr	r2, [r0, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d112      	bne.n	80039a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800397a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800397e:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003980:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003982:	f042 0202 	orr.w	r2, r2, #2
 8003986:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003988:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800398a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800398c:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003996:	f7fe fce1 	bl	800235c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800399a:	201d      	movs	r0, #29
 800399c:	f7fe fd12 	bl	80023c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039a0:	b003      	add	sp, #12
 80039a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80039a6:	bf00      	nop
 80039a8:	40000400 	.word	0x40000400

080039ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4604      	mov	r4, r0
 80039b0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b2:	2210      	movs	r2, #16
 80039b4:	2100      	movs	r1, #0
 80039b6:	a802      	add	r0, sp, #8
 80039b8:	f000 f8e4 	bl	8003b84 <memset>
  if(huart->Instance==USART1)
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_UART_MspInit+0x70>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d128      	bne.n	8003a16 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039c4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80039c8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ca:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80039cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d0:	619a      	str	r2, [r3, #24]
 80039d2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	4812      	ldr	r0, [pc, #72]	; (8003a20 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80039d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80039da:	9200      	str	r2, [sp, #0]
 80039dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	f042 0204 	orr.w	r2, r2, #4
 80039e4:	619a      	str	r2, [r3, #24]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fe:	f7fe fd03 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a08:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0a:	a902      	add	r1, sp, #8
 8003a0c:	4804      	ldr	r0, [pc, #16]	; (8003a20 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a12:	f7fe fcf9 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a16:	b006      	add	sp, #24
 8003a18:	bd10      	pop	{r4, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40013800 	.word	0x40013800
 8003a20:	40010800 	.word	0x40010800

08003a24 <NMI_Handler>:
 8003a24:	4770      	bx	lr

08003a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a26:	e7fe      	b.n	8003a26 <HardFault_Handler>

08003a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a28:	e7fe      	b.n	8003a28 <MemManage_Handler>

08003a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a2a:	e7fe      	b.n	8003a2a <BusFault_Handler>

08003a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a2c:	e7fe      	b.n	8003a2c <UsageFault_Handler>

08003a2e <SVC_Handler>:
 8003a2e:	4770      	bx	lr

08003a30 <DebugMon_Handler>:
 8003a30:	4770      	bx	lr

08003a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a32:	4770      	bx	lr

08003a34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a34:	f7fe bc5c 	b.w	80022f0 <HAL_IncTick>

08003a38 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <TIM3_IRQHandler+0x8>)
 8003a3a:	f7ff b933 	b.w	8002ca4 <HAL_TIM_IRQHandler>
 8003a3e:	bf00      	nop
 8003a40:	20000698 	.word	0x20000698

08003a44 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003a44:	2001      	movs	r0, #1
 8003a46:	4770      	bx	lr

08003a48 <_kill>:

int _kill(int pid, int sig)
{
 8003a48:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003a4a:	f000 f871 	bl	8003b30 <__errno>
 8003a4e:	2316      	movs	r3, #22
 8003a50:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003a52:	f04f 30ff 	mov.w	r0, #4294967295
 8003a56:	bd08      	pop	{r3, pc}

08003a58 <_exit>:

void _exit (int status)
{
 8003a58:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003a5a:	f000 f869 	bl	8003b30 <__errno>
 8003a5e:	2316      	movs	r3, #22
 8003a60:	6003      	str	r3, [r0, #0]
 8003a62:	e7fe      	b.n	8003a62 <_exit+0xa>

08003a64 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003a64:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <_sbrk+0x2c>)
{
 8003a68:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	b909      	cbnz	r1, 8003a72 <_sbrk+0xe>
		heap_end = &end;
 8003a6e:	4909      	ldr	r1, [pc, #36]	; (8003a94 <_sbrk+0x30>)
 8003a70:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003a72:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003a74:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003a76:	4402      	add	r2, r0
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	d906      	bls.n	8003a8a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003a7c:	f000 f858 	bl	8003b30 <__errno>
 8003a80:	230c      	movs	r3, #12
 8003a82:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003a8a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003a8c:	bd08      	pop	{r3, pc}
 8003a8e:	bf00      	nop
 8003a90:	2000071c 	.word	0x2000071c
 8003a94:	20000768 	.word	0x20000768

08003a98 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <SystemInit+0x40>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003aa2:	6859      	ldr	r1, [r3, #4]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <SystemInit+0x44>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003ab0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003abc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003ac6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003aca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003acc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <SystemInit+0x48>)
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	f8ff0000 	.word	0xf8ff0000
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ae4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ae6:	e003      	b.n	8003af0 <LoopCopyDataInit>

08003ae8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003aea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003aec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003aee:	3104      	adds	r1, #4

08003af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003af0:	480a      	ldr	r0, [pc, #40]	; (8003b1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003af4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003af6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003af8:	d3f6      	bcc.n	8003ae8 <CopyDataInit>
  ldr r2, =_sbss
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003afc:	e002      	b.n	8003b04 <LoopFillZerobss>

08003afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003afe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003b00:	f842 3b04 	str.w	r3, [r2], #4

08003b04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b08:	d3f9      	bcc.n	8003afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b0a:	f7ff ffc5 	bl	8003a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b0e:	f000 f815 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b12:	f7ff fd2d 	bl	8003570 <main>
  bx lr
 8003b16:	4770      	bx	lr
  ldr r3, =_sidata
 8003b18:	08006f64 	.word	0x08006f64
  ldr r0, =_sdata
 8003b1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b20:	2000067c 	.word	0x2000067c
  ldr r2, =_sbss
 8003b24:	2000067c 	.word	0x2000067c
  ldr r3, = _ebss
 8003b28:	20000768 	.word	0x20000768

08003b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b2c:	e7fe      	b.n	8003b2c <ADC1_2_IRQHandler>
	...

08003b30 <__errno>:
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <__errno+0x8>)
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000000c 	.word	0x2000000c

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	2500      	movs	r5, #0
 8003b40:	4e0c      	ldr	r6, [pc, #48]	; (8003b74 <__libc_init_array+0x38>)
 8003b42:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b44:	1ba4      	subs	r4, r4, r6
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	42a5      	cmp	r5, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	f002 ff74 	bl	8006a38 <_init>
 8003b50:	2500      	movs	r5, #0
 8003b52:	4e0a      	ldr	r6, [pc, #40]	; (8003b7c <__libc_init_array+0x40>)
 8003b54:	4c0a      	ldr	r4, [pc, #40]	; (8003b80 <__libc_init_array+0x44>)
 8003b56:	1ba4      	subs	r4, r4, r6
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	42a5      	cmp	r5, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b64:	4798      	blx	r3
 8003b66:	3501      	adds	r5, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b6e:	4798      	blx	r3
 8003b70:	3501      	adds	r5, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08006f5c 	.word	0x08006f5c
 8003b78:	08006f5c 	.word	0x08006f5c
 8003b7c:	08006f5c 	.word	0x08006f5c
 8003b80:	08006f60 	.word	0x08006f60

08003b84 <memset>:
 8003b84:	4603      	mov	r3, r0
 8003b86:	4402      	add	r2, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <snprintf>:
 8003b94:	b40c      	push	{r2, r3}
 8003b96:	b530      	push	{r4, r5, lr}
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <snprintf+0x64>)
 8003b9a:	1e0c      	subs	r4, r1, #0
 8003b9c:	b09d      	sub	sp, #116	; 0x74
 8003b9e:	681d      	ldr	r5, [r3, #0]
 8003ba0:	da08      	bge.n	8003bb4 <snprintf+0x20>
 8003ba2:	238b      	movs	r3, #139	; 0x8b
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	b01d      	add	sp, #116	; 0x74
 8003bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb0:	b002      	add	sp, #8
 8003bb2:	4770      	bx	lr
 8003bb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003bbc:	bf0c      	ite	eq
 8003bbe:	4623      	moveq	r3, r4
 8003bc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	9307      	str	r3, [sp, #28]
 8003bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bcc:	9002      	str	r0, [sp, #8]
 8003bce:	9006      	str	r0, [sp, #24]
 8003bd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003bd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bd6:	ab21      	add	r3, sp, #132	; 0x84
 8003bd8:	a902      	add	r1, sp, #8
 8003bda:	4628      	mov	r0, r5
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	f000 f80d 	bl	8003bfc <_svfprintf_r>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	bfbc      	itt	lt
 8003be6:	238b      	movlt	r3, #139	; 0x8b
 8003be8:	602b      	strlt	r3, [r5, #0]
 8003bea:	2c00      	cmp	r4, #0
 8003bec:	d0dd      	beq.n	8003baa <snprintf+0x16>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	9b02      	ldr	r3, [sp, #8]
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e7d9      	b.n	8003baa <snprintf+0x16>
 8003bf6:	bf00      	nop
 8003bf8:	2000000c 	.word	0x2000000c

08003bfc <_svfprintf_r>:
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	b0bf      	sub	sp, #252	; 0xfc
 8003c02:	4689      	mov	r9, r1
 8003c04:	4615      	mov	r5, r2
 8003c06:	461f      	mov	r7, r3
 8003c08:	4682      	mov	sl, r0
 8003c0a:	f001 fe29 	bl	8005860 <_localeconv_r>
 8003c0e:	6803      	ldr	r3, [r0, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	9311      	str	r3, [sp, #68]	; 0x44
 8003c14:	f7fc fa9c 	bl	8000150 <strlen>
 8003c18:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003c1c:	900a      	str	r0, [sp, #40]	; 0x28
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	d518      	bpl.n	8003c54 <_svfprintf_r+0x58>
 8003c22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c26:	b9ab      	cbnz	r3, 8003c54 <_svfprintf_r+0x58>
 8003c28:	2140      	movs	r1, #64	; 0x40
 8003c2a:	4650      	mov	r0, sl
 8003c2c:	f001 fe2e 	bl	800588c <_malloc_r>
 8003c30:	f8c9 0000 	str.w	r0, [r9]
 8003c34:	f8c9 0010 	str.w	r0, [r9, #16]
 8003c38:	b948      	cbnz	r0, 8003c4e <_svfprintf_r+0x52>
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	f8ca 3000 	str.w	r3, [sl]
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c48:	b03f      	add	sp, #252	; 0xfc
 8003c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4e:	2340      	movs	r3, #64	; 0x40
 8003c50:	f8c9 3014 	str.w	r3, [r9, #20]
 8003c54:	2300      	movs	r3, #0
 8003c56:	ac2e      	add	r4, sp, #184	; 0xb8
 8003c58:	9421      	str	r4, [sp, #132]	; 0x84
 8003c5a:	9323      	str	r3, [sp, #140]	; 0x8c
 8003c5c:	9322      	str	r3, [sp, #136]	; 0x88
 8003c5e:	9509      	str	r5, [sp, #36]	; 0x24
 8003c60:	9307      	str	r3, [sp, #28]
 8003c62:	930d      	str	r3, [sp, #52]	; 0x34
 8003c64:	930e      	str	r3, [sp, #56]	; 0x38
 8003c66:	9315      	str	r3, [sp, #84]	; 0x54
 8003c68:	9314      	str	r3, [sp, #80]	; 0x50
 8003c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c6c:	9312      	str	r3, [sp, #72]	; 0x48
 8003c6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003c72:	462b      	mov	r3, r5
 8003c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c78:	b112      	cbz	r2, 8003c80 <_svfprintf_r+0x84>
 8003c7a:	2a25      	cmp	r2, #37	; 0x25
 8003c7c:	f040 8083 	bne.w	8003d86 <_svfprintf_r+0x18a>
 8003c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c82:	1aee      	subs	r6, r5, r3
 8003c84:	d00d      	beq.n	8003ca2 <_svfprintf_r+0xa6>
 8003c86:	e884 0048 	stmia.w	r4, {r3, r6}
 8003c8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c8c:	4433      	add	r3, r6
 8003c8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c92:	3301      	adds	r3, #1
 8003c94:	2b07      	cmp	r3, #7
 8003c96:	9322      	str	r3, [sp, #136]	; 0x88
 8003c98:	dc77      	bgt.n	8003d8a <_svfprintf_r+0x18e>
 8003c9a:	3408      	adds	r4, #8
 8003c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c9e:	4433      	add	r3, r6
 8003ca0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ca2:	782b      	ldrb	r3, [r5, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8725 	beq.w	8004af4 <_svfprintf_r+0xef8>
 8003caa:	2300      	movs	r3, #0
 8003cac:	1c69      	adds	r1, r5, #1
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f04f 3bff 	mov.w	fp, #4294967295
 8003cb4:	461d      	mov	r5, r3
 8003cb6:	200a      	movs	r0, #10
 8003cb8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8003cbe:	1c4e      	adds	r6, r1, #1
 8003cc0:	7809      	ldrb	r1, [r1, #0]
 8003cc2:	9609      	str	r6, [sp, #36]	; 0x24
 8003cc4:	9106      	str	r1, [sp, #24]
 8003cc6:	9906      	ldr	r1, [sp, #24]
 8003cc8:	3920      	subs	r1, #32
 8003cca:	2958      	cmp	r1, #88	; 0x58
 8003ccc:	f200 8414 	bhi.w	80044f8 <_svfprintf_r+0x8fc>
 8003cd0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003cd4:	041200a5 	.word	0x041200a5
 8003cd8:	00aa0412 	.word	0x00aa0412
 8003cdc:	04120412 	.word	0x04120412
 8003ce0:	04120412 	.word	0x04120412
 8003ce4:	04120412 	.word	0x04120412
 8003ce8:	006500ad 	.word	0x006500ad
 8003cec:	00b50412 	.word	0x00b50412
 8003cf0:	041200b8 	.word	0x041200b8
 8003cf4:	00d800d5 	.word	0x00d800d5
 8003cf8:	00d800d8 	.word	0x00d800d8
 8003cfc:	00d800d8 	.word	0x00d800d8
 8003d00:	00d800d8 	.word	0x00d800d8
 8003d04:	00d800d8 	.word	0x00d800d8
 8003d08:	04120412 	.word	0x04120412
 8003d0c:	04120412 	.word	0x04120412
 8003d10:	04120412 	.word	0x04120412
 8003d14:	04120412 	.word	0x04120412
 8003d18:	04120412 	.word	0x04120412
 8003d1c:	0122010c 	.word	0x0122010c
 8003d20:	01220412 	.word	0x01220412
 8003d24:	04120412 	.word	0x04120412
 8003d28:	04120412 	.word	0x04120412
 8003d2c:	041200eb 	.word	0x041200eb
 8003d30:	033c0412 	.word	0x033c0412
 8003d34:	04120412 	.word	0x04120412
 8003d38:	04120412 	.word	0x04120412
 8003d3c:	03a40412 	.word	0x03a40412
 8003d40:	04120412 	.word	0x04120412
 8003d44:	04120085 	.word	0x04120085
 8003d48:	04120412 	.word	0x04120412
 8003d4c:	04120412 	.word	0x04120412
 8003d50:	04120412 	.word	0x04120412
 8003d54:	04120412 	.word	0x04120412
 8003d58:	00fe0412 	.word	0x00fe0412
 8003d5c:	0122006b 	.word	0x0122006b
 8003d60:	01220122 	.word	0x01220122
 8003d64:	006b00ee 	.word	0x006b00ee
 8003d68:	04120412 	.word	0x04120412
 8003d6c:	041200f1 	.word	0x041200f1
 8003d70:	033e031e 	.word	0x033e031e
 8003d74:	00f80372 	.word	0x00f80372
 8003d78:	03830412 	.word	0x03830412
 8003d7c:	03a60412 	.word	0x03a60412
 8003d80:	04120412 	.word	0x04120412
 8003d84:	03be      	.short	0x03be
 8003d86:	461d      	mov	r5, r3
 8003d88:	e773      	b.n	8003c72 <_svfprintf_r+0x76>
 8003d8a:	aa21      	add	r2, sp, #132	; 0x84
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	4650      	mov	r0, sl
 8003d90:	f002 fa90 	bl	80062b4 <__ssprint_r>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	f040 868e 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8003d9a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003d9c:	e77e      	b.n	8003c9c <_svfprintf_r+0xa0>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	222b      	movs	r2, #43	; 0x2b
 8003da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003da4:	e78b      	b.n	8003cbe <_svfprintf_r+0xc2>
 8003da6:	460f      	mov	r7, r1
 8003da8:	e7fb      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003daa:	b10b      	cbz	r3, 8003db0 <_svfprintf_r+0x1b4>
 8003dac:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003db0:	06ae      	lsls	r6, r5, #26
 8003db2:	f140 80a1 	bpl.w	8003ef8 <_svfprintf_r+0x2fc>
 8003db6:	3707      	adds	r7, #7
 8003db8:	f027 0707 	bic.w	r7, r7, #7
 8003dbc:	f107 0308 	add.w	r3, r7, #8
 8003dc0:	9308      	str	r3, [sp, #32]
 8003dc2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	f177 0300 	sbcs.w	r3, r7, #0
 8003dcc:	da05      	bge.n	8003dda <_svfprintf_r+0x1de>
 8003dce:	232d      	movs	r3, #45	; 0x2d
 8003dd0:	4276      	negs	r6, r6
 8003dd2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003dd6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e2c7      	b.n	800436e <_svfprintf_r+0x772>
 8003dde:	b10b      	cbz	r3, 8003de4 <_svfprintf_r+0x1e8>
 8003de0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003de4:	4ba0      	ldr	r3, [pc, #640]	; (8004068 <_svfprintf_r+0x46c>)
 8003de6:	9315      	str	r3, [sp, #84]	; 0x54
 8003de8:	06ab      	lsls	r3, r5, #26
 8003dea:	f140 8336 	bpl.w	800445a <_svfprintf_r+0x85e>
 8003dee:	3707      	adds	r7, #7
 8003df0:	f027 0707 	bic.w	r7, r7, #7
 8003df4:	f107 0308 	add.w	r3, r7, #8
 8003df8:	9308      	str	r3, [sp, #32]
 8003dfa:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003dfe:	07e8      	lsls	r0, r5, #31
 8003e00:	d50b      	bpl.n	8003e1a <_svfprintf_r+0x21e>
 8003e02:	ea56 0307 	orrs.w	r3, r6, r7
 8003e06:	d008      	beq.n	8003e1a <_svfprintf_r+0x21e>
 8003e08:	2330      	movs	r3, #48	; 0x30
 8003e0a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003e0e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003e12:	f045 0502 	orr.w	r5, r5, #2
 8003e16:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e2a4      	b.n	8004368 <_svfprintf_r+0x76c>
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d1bf      	bne.n	8003da2 <_svfprintf_r+0x1a6>
 8003e22:	2301      	movs	r3, #1
 8003e24:	2220      	movs	r2, #32
 8003e26:	e7bc      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003e28:	f045 0501 	orr.w	r5, r5, #1
 8003e2c:	e7b9      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003e2e:	683e      	ldr	r6, [r7, #0]
 8003e30:	1d39      	adds	r1, r7, #4
 8003e32:	2e00      	cmp	r6, #0
 8003e34:	960c      	str	r6, [sp, #48]	; 0x30
 8003e36:	dab6      	bge.n	8003da6 <_svfprintf_r+0x1aa>
 8003e38:	460f      	mov	r7, r1
 8003e3a:	4276      	negs	r6, r6
 8003e3c:	960c      	str	r6, [sp, #48]	; 0x30
 8003e3e:	f045 0504 	orr.w	r5, r5, #4
 8003e42:	e7ae      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e46:	1c4e      	adds	r6, r1, #1
 8003e48:	7809      	ldrb	r1, [r1, #0]
 8003e4a:	292a      	cmp	r1, #42	; 0x2a
 8003e4c:	9106      	str	r1, [sp, #24]
 8003e4e:	d010      	beq.n	8003e72 <_svfprintf_r+0x276>
 8003e50:	f04f 0b00 	mov.w	fp, #0
 8003e54:	9609      	str	r6, [sp, #36]	; 0x24
 8003e56:	9906      	ldr	r1, [sp, #24]
 8003e58:	3930      	subs	r1, #48	; 0x30
 8003e5a:	2909      	cmp	r1, #9
 8003e5c:	f63f af33 	bhi.w	8003cc6 <_svfprintf_r+0xca>
 8003e60:	fb00 1b0b 	mla	fp, r0, fp, r1
 8003e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e66:	460e      	mov	r6, r1
 8003e68:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003e6c:	9106      	str	r1, [sp, #24]
 8003e6e:	9609      	str	r6, [sp, #36]	; 0x24
 8003e70:	e7f1      	b.n	8003e56 <_svfprintf_r+0x25a>
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	9609      	str	r6, [sp, #36]	; 0x24
 8003e76:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8003e7a:	3704      	adds	r7, #4
 8003e7c:	e791      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003e7e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003e82:	e78e      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003e84:	2100      	movs	r1, #0
 8003e86:	910c      	str	r1, [sp, #48]	; 0x30
 8003e88:	9906      	ldr	r1, [sp, #24]
 8003e8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003e8c:	3930      	subs	r1, #48	; 0x30
 8003e8e:	fb00 1106 	mla	r1, r0, r6, r1
 8003e92:	910c      	str	r1, [sp, #48]	; 0x30
 8003e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e96:	460e      	mov	r6, r1
 8003e98:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003e9c:	9106      	str	r1, [sp, #24]
 8003e9e:	9906      	ldr	r1, [sp, #24]
 8003ea0:	9609      	str	r6, [sp, #36]	; 0x24
 8003ea2:	3930      	subs	r1, #48	; 0x30
 8003ea4:	2909      	cmp	r1, #9
 8003ea6:	d9ef      	bls.n	8003e88 <_svfprintf_r+0x28c>
 8003ea8:	e70d      	b.n	8003cc6 <_svfprintf_r+0xca>
 8003eaa:	f045 0508 	orr.w	r5, r5, #8
 8003eae:	e778      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003eb0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003eb4:	e775      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003eb8:	7809      	ldrb	r1, [r1, #0]
 8003eba:	296c      	cmp	r1, #108	; 0x6c
 8003ebc:	d105      	bne.n	8003eca <_svfprintf_r+0x2ce>
 8003ebe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ec0:	3101      	adds	r1, #1
 8003ec2:	9109      	str	r1, [sp, #36]	; 0x24
 8003ec4:	f045 0520 	orr.w	r5, r5, #32
 8003ec8:	e76b      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003eca:	f045 0510 	orr.w	r5, r5, #16
 8003ece:	e768      	b.n	8003da2 <_svfprintf_r+0x1a6>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	9308      	str	r3, [sp, #32]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8003edc:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8003ee0:	f04f 0b01 	mov.w	fp, #1
 8003ee4:	4637      	mov	r7, r6
 8003ee6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8003eea:	e11c      	b.n	8004126 <_svfprintf_r+0x52a>
 8003eec:	b10b      	cbz	r3, 8003ef2 <_svfprintf_r+0x2f6>
 8003eee:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003ef2:	f045 0510 	orr.w	r5, r5, #16
 8003ef6:	e75b      	b.n	8003db0 <_svfprintf_r+0x1b4>
 8003ef8:	f015 0f10 	tst.w	r5, #16
 8003efc:	f107 0304 	add.w	r3, r7, #4
 8003f00:	d003      	beq.n	8003f0a <_svfprintf_r+0x30e>
 8003f02:	683e      	ldr	r6, [r7, #0]
 8003f04:	9308      	str	r3, [sp, #32]
 8003f06:	17f7      	asrs	r7, r6, #31
 8003f08:	e75d      	b.n	8003dc6 <_svfprintf_r+0x1ca>
 8003f0a:	683e      	ldr	r6, [r7, #0]
 8003f0c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f10:	9308      	str	r3, [sp, #32]
 8003f12:	bf18      	it	ne
 8003f14:	b236      	sxthne	r6, r6
 8003f16:	e7f6      	b.n	8003f06 <_svfprintf_r+0x30a>
 8003f18:	b10b      	cbz	r3, 8003f1e <_svfprintf_r+0x322>
 8003f1a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003f1e:	3707      	adds	r7, #7
 8003f20:	f027 0707 	bic.w	r7, r7, #7
 8003f24:	f107 0308 	add.w	r3, r7, #8
 8003f28:	9308      	str	r3, [sp, #32]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	930d      	str	r3, [sp, #52]	; 0x34
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003f36:	930e      	str	r3, [sp, #56]	; 0x38
 8003f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8003f40:	4631      	mov	r1, r6
 8003f42:	4b4a      	ldr	r3, [pc, #296]	; (800406c <_svfprintf_r+0x470>)
 8003f44:	f7fc fd5e 	bl	8000a04 <__aeabi_dcmpun>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	f040 85dc 	bne.w	8004b06 <_svfprintf_r+0xf0a>
 8003f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f52:	4b46      	ldr	r3, [pc, #280]	; (800406c <_svfprintf_r+0x470>)
 8003f54:	4638      	mov	r0, r7
 8003f56:	4631      	mov	r1, r6
 8003f58:	f7fc fd36 	bl	80009c8 <__aeabi_dcmple>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f040 85d2 	bne.w	8004b06 <_svfprintf_r+0xf0a>
 8003f62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f68:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003f6a:	f7fc fd23 	bl	80009b4 <__aeabi_dcmplt>
 8003f6e:	b110      	cbz	r0, 8003f76 <_svfprintf_r+0x37a>
 8003f70:	232d      	movs	r3, #45	; 0x2d
 8003f72:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003f76:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <_svfprintf_r+0x474>)
 8003f78:	4a3e      	ldr	r2, [pc, #248]	; (8004074 <_svfprintf_r+0x478>)
 8003f7a:	9906      	ldr	r1, [sp, #24]
 8003f7c:	f04f 0b03 	mov.w	fp, #3
 8003f80:	2947      	cmp	r1, #71	; 0x47
 8003f82:	bfcc      	ite	gt
 8003f84:	4690      	movgt	r8, r2
 8003f86:	4698      	movle	r8, r3
 8003f88:	2600      	movs	r6, #0
 8003f8a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003f8e:	4637      	mov	r7, r6
 8003f90:	e0c9      	b.n	8004126 <_svfprintf_r+0x52a>
 8003f92:	f1bb 3fff 	cmp.w	fp, #4294967295
 8003f96:	d026      	beq.n	8003fe6 <_svfprintf_r+0x3ea>
 8003f98:	9b06      	ldr	r3, [sp, #24]
 8003f9a:	f023 0320 	bic.w	r3, r3, #32
 8003f9e:	2b47      	cmp	r3, #71	; 0x47
 8003fa0:	d104      	bne.n	8003fac <_svfprintf_r+0x3b0>
 8003fa2:	f1bb 0f00 	cmp.w	fp, #0
 8003fa6:	bf08      	it	eq
 8003fa8:	f04f 0b01 	moveq.w	fp, #1
 8003fac:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8003fb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8003fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fb4:	1e1f      	subs	r7, r3, #0
 8003fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fb8:	bfa8      	it	ge
 8003fba:	9710      	strge	r7, [sp, #64]	; 0x40
 8003fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fbe:	bfbd      	ittte	lt
 8003fc0:	463b      	movlt	r3, r7
 8003fc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003fc6:	9310      	strlt	r3, [sp, #64]	; 0x40
 8003fc8:	2300      	movge	r3, #0
 8003fca:	bfb8      	it	lt
 8003fcc:	232d      	movlt	r3, #45	; 0x2d
 8003fce:	9316      	str	r3, [sp, #88]	; 0x58
 8003fd0:	9b06      	ldr	r3, [sp, #24]
 8003fd2:	f023 0720 	bic.w	r7, r3, #32
 8003fd6:	2f46      	cmp	r7, #70	; 0x46
 8003fd8:	d008      	beq.n	8003fec <_svfprintf_r+0x3f0>
 8003fda:	2f45      	cmp	r7, #69	; 0x45
 8003fdc:	d142      	bne.n	8004064 <_svfprintf_r+0x468>
 8003fde:	f10b 0601 	add.w	r6, fp, #1
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e004      	b.n	8003ff0 <_svfprintf_r+0x3f4>
 8003fe6:	f04f 0b06 	mov.w	fp, #6
 8003fea:	e7df      	b.n	8003fac <_svfprintf_r+0x3b0>
 8003fec:	465e      	mov	r6, fp
 8003fee:	2303      	movs	r3, #3
 8003ff0:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ff2:	9204      	str	r2, [sp, #16]
 8003ff4:	aa1c      	add	r2, sp, #112	; 0x70
 8003ff6:	9203      	str	r2, [sp, #12]
 8003ff8:	aa1b      	add	r2, sp, #108	; 0x6c
 8003ffa:	9202      	str	r2, [sp, #8]
 8003ffc:	e88d 0048 	stmia.w	sp, {r3, r6}
 8004000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004004:	4650      	mov	r0, sl
 8004006:	f000 fe57 	bl	8004cb8 <_dtoa_r>
 800400a:	2f47      	cmp	r7, #71	; 0x47
 800400c:	4680      	mov	r8, r0
 800400e:	d102      	bne.n	8004016 <_svfprintf_r+0x41a>
 8004010:	07e8      	lsls	r0, r5, #31
 8004012:	f140 8585 	bpl.w	8004b20 <_svfprintf_r+0xf24>
 8004016:	eb08 0306 	add.w	r3, r8, r6
 800401a:	2f46      	cmp	r7, #70	; 0x46
 800401c:	9307      	str	r3, [sp, #28]
 800401e:	d111      	bne.n	8004044 <_svfprintf_r+0x448>
 8004020:	f898 3000 	ldrb.w	r3, [r8]
 8004024:	2b30      	cmp	r3, #48	; 0x30
 8004026:	d109      	bne.n	800403c <_svfprintf_r+0x440>
 8004028:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800402a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800402c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800402e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004030:	f7fc fcb6 	bl	80009a0 <__aeabi_dcmpeq>
 8004034:	b910      	cbnz	r0, 800403c <_svfprintf_r+0x440>
 8004036:	f1c6 0601 	rsb	r6, r6, #1
 800403a:	961b      	str	r6, [sp, #108]	; 0x6c
 800403c:	9a07      	ldr	r2, [sp, #28]
 800403e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004040:	441a      	add	r2, r3
 8004042:	9207      	str	r2, [sp, #28]
 8004044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004048:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800404a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800404c:	f7fc fca8 	bl	80009a0 <__aeabi_dcmpeq>
 8004050:	b990      	cbnz	r0, 8004078 <_svfprintf_r+0x47c>
 8004052:	2230      	movs	r2, #48	; 0x30
 8004054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004056:	9907      	ldr	r1, [sp, #28]
 8004058:	4299      	cmp	r1, r3
 800405a:	d90f      	bls.n	800407c <_svfprintf_r+0x480>
 800405c:	1c59      	adds	r1, r3, #1
 800405e:	911f      	str	r1, [sp, #124]	; 0x7c
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e7f7      	b.n	8004054 <_svfprintf_r+0x458>
 8004064:	465e      	mov	r6, fp
 8004066:	e7bc      	b.n	8003fe2 <_svfprintf_r+0x3e6>
 8004068:	08006b88 	.word	0x08006b88
 800406c:	7fefffff 	.word	0x7fefffff
 8004070:	08006b78 	.word	0x08006b78
 8004074:	08006b7c 	.word	0x08006b7c
 8004078:	9b07      	ldr	r3, [sp, #28]
 800407a:	931f      	str	r3, [sp, #124]	; 0x7c
 800407c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800407e:	2f47      	cmp	r7, #71	; 0x47
 8004080:	eba3 0308 	sub.w	r3, r3, r8
 8004084:	9307      	str	r3, [sp, #28]
 8004086:	f040 8100 	bne.w	800428a <_svfprintf_r+0x68e>
 800408a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800408c:	1cd9      	adds	r1, r3, #3
 800408e:	db02      	blt.n	8004096 <_svfprintf_r+0x49a>
 8004090:	459b      	cmp	fp, r3
 8004092:	f280 8126 	bge.w	80042e2 <_svfprintf_r+0x6e6>
 8004096:	9b06      	ldr	r3, [sp, #24]
 8004098:	3b02      	subs	r3, #2
 800409a:	9306      	str	r3, [sp, #24]
 800409c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800409e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80040a2:	1e53      	subs	r3, r2, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bfa8      	it	ge
 80040a8:	222b      	movge	r2, #43	; 0x2b
 80040aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80040ac:	bfbc      	itt	lt
 80040ae:	f1c2 0301 	rsblt	r3, r2, #1
 80040b2:	222d      	movlt	r2, #45	; 0x2d
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 80040ba:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80040be:	f340 8100 	ble.w	80042c2 <_svfprintf_r+0x6c6>
 80040c2:	260a      	movs	r6, #10
 80040c4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80040c8:	fb93 f0f6 	sdiv	r0, r3, r6
 80040cc:	fb06 3310 	mls	r3, r6, r0, r3
 80040d0:	2809      	cmp	r0, #9
 80040d2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80040d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80040da:	f102 31ff 	add.w	r1, r2, #4294967295
 80040de:	4603      	mov	r3, r0
 80040e0:	f300 80e8 	bgt.w	80042b4 <_svfprintf_r+0x6b8>
 80040e4:	3330      	adds	r3, #48	; 0x30
 80040e6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80040ea:	3a02      	subs	r2, #2
 80040ec:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80040f0:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 80040f4:	4282      	cmp	r2, r0
 80040f6:	4619      	mov	r1, r3
 80040f8:	f0c0 80de 	bcc.w	80042b8 <_svfprintf_r+0x6bc>
 80040fc:	9a07      	ldr	r2, [sp, #28]
 80040fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004100:	1acb      	subs	r3, r1, r3
 8004102:	2a01      	cmp	r2, #1
 8004104:	9314      	str	r3, [sp, #80]	; 0x50
 8004106:	eb03 0b02 	add.w	fp, r3, r2
 800410a:	dc02      	bgt.n	8004112 <_svfprintf_r+0x516>
 800410c:	f015 0701 	ands.w	r7, r5, #1
 8004110:	d002      	beq.n	8004118 <_svfprintf_r+0x51c>
 8004112:	2700      	movs	r7, #0
 8004114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004116:	449b      	add	fp, r3
 8004118:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800411a:	b113      	cbz	r3, 8004122 <_svfprintf_r+0x526>
 800411c:	232d      	movs	r3, #45	; 0x2d
 800411e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004122:	2600      	movs	r6, #0
 8004124:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004126:	455e      	cmp	r6, fp
 8004128:	4633      	mov	r3, r6
 800412a:	bfb8      	it	lt
 800412c:	465b      	movlt	r3, fp
 800412e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004130:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004134:	b113      	cbz	r3, 800413c <_svfprintf_r+0x540>
 8004136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004138:	3301      	adds	r3, #1
 800413a:	930f      	str	r3, [sp, #60]	; 0x3c
 800413c:	f015 0302 	ands.w	r3, r5, #2
 8004140:	9316      	str	r3, [sp, #88]	; 0x58
 8004142:	bf1e      	ittt	ne
 8004144:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8004146:	3302      	addne	r3, #2
 8004148:	930f      	strne	r3, [sp, #60]	; 0x3c
 800414a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800414e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004150:	d118      	bne.n	8004184 <_svfprintf_r+0x588>
 8004152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	9310      	str	r3, [sp, #64]	; 0x40
 800415c:	dd12      	ble.n	8004184 <_svfprintf_r+0x588>
 800415e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004160:	2b10      	cmp	r3, #16
 8004162:	4bab      	ldr	r3, [pc, #684]	; (8004410 <_svfprintf_r+0x814>)
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	f300 81d9 	bgt.w	800451c <_svfprintf_r+0x920>
 800416a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800416c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800416e:	6063      	str	r3, [r4, #4]
 8004170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004172:	4413      	add	r3, r2
 8004174:	9323      	str	r3, [sp, #140]	; 0x8c
 8004176:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004178:	3301      	adds	r3, #1
 800417a:	2b07      	cmp	r3, #7
 800417c:	9322      	str	r3, [sp, #136]	; 0x88
 800417e:	f300 81e6 	bgt.w	800454e <_svfprintf_r+0x952>
 8004182:	3408      	adds	r4, #8
 8004184:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004188:	b173      	cbz	r3, 80041a8 <_svfprintf_r+0x5ac>
 800418a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	2301      	movs	r3, #1
 8004192:	6063      	str	r3, [r4, #4]
 8004194:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004196:	3301      	adds	r3, #1
 8004198:	9323      	str	r3, [sp, #140]	; 0x8c
 800419a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800419c:	3301      	adds	r3, #1
 800419e:	2b07      	cmp	r3, #7
 80041a0:	9322      	str	r3, [sp, #136]	; 0x88
 80041a2:	f300 81de 	bgt.w	8004562 <_svfprintf_r+0x966>
 80041a6:	3408      	adds	r4, #8
 80041a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80041aa:	b16b      	cbz	r3, 80041c8 <_svfprintf_r+0x5cc>
 80041ac:	ab1a      	add	r3, sp, #104	; 0x68
 80041ae:	6023      	str	r3, [r4, #0]
 80041b0:	2302      	movs	r3, #2
 80041b2:	6063      	str	r3, [r4, #4]
 80041b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041b6:	3302      	adds	r3, #2
 80041b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80041ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041bc:	3301      	adds	r3, #1
 80041be:	2b07      	cmp	r3, #7
 80041c0:	9322      	str	r3, [sp, #136]	; 0x88
 80041c2:	f300 81d8 	bgt.w	8004576 <_svfprintf_r+0x97a>
 80041c6:	3408      	adds	r4, #8
 80041c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d118      	bne.n	8004200 <_svfprintf_r+0x604>
 80041ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	9310      	str	r3, [sp, #64]	; 0x40
 80041d8:	dd12      	ble.n	8004200 <_svfprintf_r+0x604>
 80041da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041dc:	2b10      	cmp	r3, #16
 80041de:	4b8d      	ldr	r3, [pc, #564]	; (8004414 <_svfprintf_r+0x818>)
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	f300 81d2 	bgt.w	800458a <_svfprintf_r+0x98e>
 80041e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041ea:	6063      	str	r3, [r4, #4]
 80041ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041ee:	4413      	add	r3, r2
 80041f0:	9323      	str	r3, [sp, #140]	; 0x8c
 80041f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041f4:	3301      	adds	r3, #1
 80041f6:	2b07      	cmp	r3, #7
 80041f8:	9322      	str	r3, [sp, #136]	; 0x88
 80041fa:	f300 81df 	bgt.w	80045bc <_svfprintf_r+0x9c0>
 80041fe:	3408      	adds	r4, #8
 8004200:	eba6 060b 	sub.w	r6, r6, fp
 8004204:	2e00      	cmp	r6, #0
 8004206:	dd0f      	ble.n	8004228 <_svfprintf_r+0x62c>
 8004208:	4b82      	ldr	r3, [pc, #520]	; (8004414 <_svfprintf_r+0x818>)
 800420a:	2e10      	cmp	r6, #16
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	f300 81df 	bgt.w	80045d0 <_svfprintf_r+0x9d4>
 8004212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004214:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004216:	3301      	adds	r3, #1
 8004218:	6066      	str	r6, [r4, #4]
 800421a:	2b07      	cmp	r3, #7
 800421c:	4406      	add	r6, r0
 800421e:	9623      	str	r6, [sp, #140]	; 0x8c
 8004220:	9322      	str	r3, [sp, #136]	; 0x88
 8004222:	f300 81ec 	bgt.w	80045fe <_svfprintf_r+0xa02>
 8004226:	3408      	adds	r4, #8
 8004228:	05eb      	lsls	r3, r5, #23
 800422a:	f100 81f2 	bmi.w	8004612 <_svfprintf_r+0xa16>
 800422e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004230:	e884 0900 	stmia.w	r4, {r8, fp}
 8004234:	445b      	add	r3, fp
 8004236:	9323      	str	r3, [sp, #140]	; 0x8c
 8004238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800423a:	3301      	adds	r3, #1
 800423c:	2b07      	cmp	r3, #7
 800423e:	9322      	str	r3, [sp, #136]	; 0x88
 8004240:	f340 8419 	ble.w	8004a76 <_svfprintf_r+0xe7a>
 8004244:	aa21      	add	r2, sp, #132	; 0x84
 8004246:	4649      	mov	r1, r9
 8004248:	4650      	mov	r0, sl
 800424a:	f002 f833 	bl	80062b4 <__ssprint_r>
 800424e:	2800      	cmp	r0, #0
 8004250:	f040 8431 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8004254:	ac2e      	add	r4, sp, #184	; 0xb8
 8004256:	076b      	lsls	r3, r5, #29
 8004258:	f100 8410 	bmi.w	8004a7c <_svfprintf_r+0xe80>
 800425c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800425e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004260:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004262:	428a      	cmp	r2, r1
 8004264:	bfac      	ite	ge
 8004266:	189b      	addge	r3, r3, r2
 8004268:	185b      	addlt	r3, r3, r1
 800426a:	930b      	str	r3, [sp, #44]	; 0x2c
 800426c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800426e:	b13b      	cbz	r3, 8004280 <_svfprintf_r+0x684>
 8004270:	aa21      	add	r2, sp, #132	; 0x84
 8004272:	4649      	mov	r1, r9
 8004274:	4650      	mov	r0, sl
 8004276:	f002 f81d 	bl	80062b4 <__ssprint_r>
 800427a:	2800      	cmp	r0, #0
 800427c:	f040 841b 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8004280:	2300      	movs	r3, #0
 8004282:	9f08      	ldr	r7, [sp, #32]
 8004284:	9322      	str	r3, [sp, #136]	; 0x88
 8004286:	ac2e      	add	r4, sp, #184	; 0xb8
 8004288:	e4f2      	b.n	8003c70 <_svfprintf_r+0x74>
 800428a:	9b06      	ldr	r3, [sp, #24]
 800428c:	2b65      	cmp	r3, #101	; 0x65
 800428e:	f77f af05 	ble.w	800409c <_svfprintf_r+0x4a0>
 8004292:	9b06      	ldr	r3, [sp, #24]
 8004294:	2b66      	cmp	r3, #102	; 0x66
 8004296:	d124      	bne.n	80042e2 <_svfprintf_r+0x6e6>
 8004298:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800429a:	2b00      	cmp	r3, #0
 800429c:	dd19      	ble.n	80042d2 <_svfprintf_r+0x6d6>
 800429e:	f1bb 0f00 	cmp.w	fp, #0
 80042a2:	d101      	bne.n	80042a8 <_svfprintf_r+0x6ac>
 80042a4:	07ea      	lsls	r2, r5, #31
 80042a6:	d502      	bpl.n	80042ae <_svfprintf_r+0x6b2>
 80042a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042aa:	4413      	add	r3, r2
 80042ac:	445b      	add	r3, fp
 80042ae:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80042b0:	469b      	mov	fp, r3
 80042b2:	e731      	b.n	8004118 <_svfprintf_r+0x51c>
 80042b4:	460a      	mov	r2, r1
 80042b6:	e707      	b.n	80040c8 <_svfprintf_r+0x4cc>
 80042b8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80042bc:	f803 1b01 	strb.w	r1, [r3], #1
 80042c0:	e718      	b.n	80040f4 <_svfprintf_r+0x4f8>
 80042c2:	2230      	movs	r2, #48	; 0x30
 80042c4:	4413      	add	r3, r2
 80042c6:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80042ca:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80042ce:	a91e      	add	r1, sp, #120	; 0x78
 80042d0:	e714      	b.n	80040fc <_svfprintf_r+0x500>
 80042d2:	f1bb 0f00 	cmp.w	fp, #0
 80042d6:	d101      	bne.n	80042dc <_svfprintf_r+0x6e0>
 80042d8:	07eb      	lsls	r3, r5, #31
 80042da:	d515      	bpl.n	8004308 <_svfprintf_r+0x70c>
 80042dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042de:	3301      	adds	r3, #1
 80042e0:	e7e4      	b.n	80042ac <_svfprintf_r+0x6b0>
 80042e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	db06      	blt.n	80042f8 <_svfprintf_r+0x6fc>
 80042ea:	07ef      	lsls	r7, r5, #31
 80042ec:	d50e      	bpl.n	800430c <_svfprintf_r+0x710>
 80042ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f0:	4413      	add	r3, r2
 80042f2:	2267      	movs	r2, #103	; 0x67
 80042f4:	9206      	str	r2, [sp, #24]
 80042f6:	e7da      	b.n	80042ae <_svfprintf_r+0x6b2>
 80042f8:	9b07      	ldr	r3, [sp, #28]
 80042fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042fc:	2a00      	cmp	r2, #0
 80042fe:	440b      	add	r3, r1
 8004300:	dcf7      	bgt.n	80042f2 <_svfprintf_r+0x6f6>
 8004302:	f1c2 0201 	rsb	r2, r2, #1
 8004306:	e7f3      	b.n	80042f0 <_svfprintf_r+0x6f4>
 8004308:	2301      	movs	r3, #1
 800430a:	e7d0      	b.n	80042ae <_svfprintf_r+0x6b2>
 800430c:	4613      	mov	r3, r2
 800430e:	e7f0      	b.n	80042f2 <_svfprintf_r+0x6f6>
 8004310:	b10b      	cbz	r3, 8004316 <_svfprintf_r+0x71a>
 8004312:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004316:	f015 0f20 	tst.w	r5, #32
 800431a:	f107 0304 	add.w	r3, r7, #4
 800431e:	d008      	beq.n	8004332 <_svfprintf_r+0x736>
 8004320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	17ce      	asrs	r6, r1, #31
 8004326:	4608      	mov	r0, r1
 8004328:	4631      	mov	r1, r6
 800432a:	e9c2 0100 	strd	r0, r1, [r2]
 800432e:	461f      	mov	r7, r3
 8004330:	e49e      	b.n	8003c70 <_svfprintf_r+0x74>
 8004332:	06ee      	lsls	r6, r5, #27
 8004334:	d503      	bpl.n	800433e <_svfprintf_r+0x742>
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800433a:	6011      	str	r1, [r2, #0]
 800433c:	e7f7      	b.n	800432e <_svfprintf_r+0x732>
 800433e:	0668      	lsls	r0, r5, #25
 8004340:	d5f9      	bpl.n	8004336 <_svfprintf_r+0x73a>
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8004348:	8011      	strh	r1, [r2, #0]
 800434a:	e7f0      	b.n	800432e <_svfprintf_r+0x732>
 800434c:	f045 0510 	orr.w	r5, r5, #16
 8004350:	f015 0320 	ands.w	r3, r5, #32
 8004354:	d022      	beq.n	800439c <_svfprintf_r+0x7a0>
 8004356:	3707      	adds	r7, #7
 8004358:	f027 0707 	bic.w	r7, r7, #7
 800435c:	f107 0308 	add.w	r3, r7, #8
 8004360:	9308      	str	r3, [sp, #32]
 8004362:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004366:	2300      	movs	r3, #0
 8004368:	2200      	movs	r2, #0
 800436a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800436e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8004372:	f000 83db 	beq.w	8004b2c <_svfprintf_r+0xf30>
 8004376:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800437a:	920f      	str	r2, [sp, #60]	; 0x3c
 800437c:	ea56 0207 	orrs.w	r2, r6, r7
 8004380:	f040 83d9 	bne.w	8004b36 <_svfprintf_r+0xf3a>
 8004384:	f1bb 0f00 	cmp.w	fp, #0
 8004388:	f000 80aa 	beq.w	80044e0 <_svfprintf_r+0x8e4>
 800438c:	2b01      	cmp	r3, #1
 800438e:	d076      	beq.n	800447e <_svfprintf_r+0x882>
 8004390:	2b02      	cmp	r3, #2
 8004392:	f000 8091 	beq.w	80044b8 <_svfprintf_r+0x8bc>
 8004396:	2600      	movs	r6, #0
 8004398:	2700      	movs	r7, #0
 800439a:	e3d2      	b.n	8004b42 <_svfprintf_r+0xf46>
 800439c:	1d3a      	adds	r2, r7, #4
 800439e:	f015 0110 	ands.w	r1, r5, #16
 80043a2:	9208      	str	r2, [sp, #32]
 80043a4:	d002      	beq.n	80043ac <_svfprintf_r+0x7b0>
 80043a6:	683e      	ldr	r6, [r7, #0]
 80043a8:	2700      	movs	r7, #0
 80043aa:	e7dd      	b.n	8004368 <_svfprintf_r+0x76c>
 80043ac:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80043b0:	d0f9      	beq.n	80043a6 <_svfprintf_r+0x7aa>
 80043b2:	883e      	ldrh	r6, [r7, #0]
 80043b4:	2700      	movs	r7, #0
 80043b6:	e7d6      	b.n	8004366 <_svfprintf_r+0x76a>
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	9308      	str	r3, [sp, #32]
 80043bc:	2330      	movs	r3, #48	; 0x30
 80043be:	2278      	movs	r2, #120	; 0x78
 80043c0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <_svfprintf_r+0x81c>)
 80043c6:	683e      	ldr	r6, [r7, #0]
 80043c8:	9315      	str	r3, [sp, #84]	; 0x54
 80043ca:	2700      	movs	r7, #0
 80043cc:	f045 0502 	orr.w	r5, r5, #2
 80043d0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80043d4:	2302      	movs	r3, #2
 80043d6:	9206      	str	r2, [sp, #24]
 80043d8:	e7c6      	b.n	8004368 <_svfprintf_r+0x76c>
 80043da:	2600      	movs	r6, #0
 80043dc:	1d3b      	adds	r3, r7, #4
 80043de:	f1bb 3fff 	cmp.w	fp, #4294967295
 80043e2:	9308      	str	r3, [sp, #32]
 80043e4:	f8d7 8000 	ldr.w	r8, [r7]
 80043e8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80043ec:	d00a      	beq.n	8004404 <_svfprintf_r+0x808>
 80043ee:	465a      	mov	r2, fp
 80043f0:	4631      	mov	r1, r6
 80043f2:	4640      	mov	r0, r8
 80043f4:	f001 fc56 	bl	8005ca4 <memchr>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	f000 808d 	beq.w	8004518 <_svfprintf_r+0x91c>
 80043fe:	eba0 0b08 	sub.w	fp, r0, r8
 8004402:	e5c4      	b.n	8003f8e <_svfprintf_r+0x392>
 8004404:	4640      	mov	r0, r8
 8004406:	f7fb fea3 	bl	8000150 <strlen>
 800440a:	4683      	mov	fp, r0
 800440c:	e5bf      	b.n	8003f8e <_svfprintf_r+0x392>
 800440e:	bf00      	nop
 8004410:	08006bac 	.word	0x08006bac
 8004414:	08006bbc 	.word	0x08006bbc
 8004418:	08006b99 	.word	0x08006b99
 800441c:	f045 0510 	orr.w	r5, r5, #16
 8004420:	06a9      	lsls	r1, r5, #26
 8004422:	d509      	bpl.n	8004438 <_svfprintf_r+0x83c>
 8004424:	3707      	adds	r7, #7
 8004426:	f027 0707 	bic.w	r7, r7, #7
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	9308      	str	r3, [sp, #32]
 8004430:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004434:	2301      	movs	r3, #1
 8004436:	e797      	b.n	8004368 <_svfprintf_r+0x76c>
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	f015 0f10 	tst.w	r5, #16
 800443e:	9308      	str	r3, [sp, #32]
 8004440:	d001      	beq.n	8004446 <_svfprintf_r+0x84a>
 8004442:	683e      	ldr	r6, [r7, #0]
 8004444:	e002      	b.n	800444c <_svfprintf_r+0x850>
 8004446:	066a      	lsls	r2, r5, #25
 8004448:	d5fb      	bpl.n	8004442 <_svfprintf_r+0x846>
 800444a:	883e      	ldrh	r6, [r7, #0]
 800444c:	2700      	movs	r7, #0
 800444e:	e7f1      	b.n	8004434 <_svfprintf_r+0x838>
 8004450:	b10b      	cbz	r3, 8004456 <_svfprintf_r+0x85a>
 8004452:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004456:	4ba3      	ldr	r3, [pc, #652]	; (80046e4 <_svfprintf_r+0xae8>)
 8004458:	e4c5      	b.n	8003de6 <_svfprintf_r+0x1ea>
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	f015 0f10 	tst.w	r5, #16
 8004460:	9308      	str	r3, [sp, #32]
 8004462:	d001      	beq.n	8004468 <_svfprintf_r+0x86c>
 8004464:	683e      	ldr	r6, [r7, #0]
 8004466:	e002      	b.n	800446e <_svfprintf_r+0x872>
 8004468:	066e      	lsls	r6, r5, #25
 800446a:	d5fb      	bpl.n	8004464 <_svfprintf_r+0x868>
 800446c:	883e      	ldrh	r6, [r7, #0]
 800446e:	2700      	movs	r7, #0
 8004470:	e4c5      	b.n	8003dfe <_svfprintf_r+0x202>
 8004472:	4643      	mov	r3, r8
 8004474:	e366      	b.n	8004b44 <_svfprintf_r+0xf48>
 8004476:	2f00      	cmp	r7, #0
 8004478:	bf08      	it	eq
 800447a:	2e0a      	cmpeq	r6, #10
 800447c:	d205      	bcs.n	800448a <_svfprintf_r+0x88e>
 800447e:	3630      	adds	r6, #48	; 0x30
 8004480:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8004484:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004488:	e377      	b.n	8004b7a <_svfprintf_r+0xf7e>
 800448a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	220a      	movs	r2, #10
 8004494:	2300      	movs	r3, #0
 8004496:	f7fc fde7 	bl	8001068 <__aeabi_uldivmod>
 800449a:	3230      	adds	r2, #48	; 0x30
 800449c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80044a0:	2300      	movs	r3, #0
 80044a2:	4630      	mov	r0, r6
 80044a4:	4639      	mov	r1, r7
 80044a6:	220a      	movs	r2, #10
 80044a8:	f7fc fdde 	bl	8001068 <__aeabi_uldivmod>
 80044ac:	4606      	mov	r6, r0
 80044ae:	460f      	mov	r7, r1
 80044b0:	ea56 0307 	orrs.w	r3, r6, r7
 80044b4:	d1eb      	bne.n	800448e <_svfprintf_r+0x892>
 80044b6:	e360      	b.n	8004b7a <_svfprintf_r+0xf7e>
 80044b8:	2600      	movs	r6, #0
 80044ba:	2700      	movs	r7, #0
 80044bc:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80044c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044c2:	f006 030f 	and.w	r3, r6, #15
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	093a      	lsrs	r2, r7, #4
 80044ca:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80044ce:	0933      	lsrs	r3, r6, #4
 80044d0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80044d4:	461e      	mov	r6, r3
 80044d6:	4617      	mov	r7, r2
 80044d8:	ea56 0307 	orrs.w	r3, r6, r7
 80044dc:	d1f0      	bne.n	80044c0 <_svfprintf_r+0x8c4>
 80044de:	e34c      	b.n	8004b7a <_svfprintf_r+0xf7e>
 80044e0:	b93b      	cbnz	r3, 80044f2 <_svfprintf_r+0x8f6>
 80044e2:	07ea      	lsls	r2, r5, #31
 80044e4:	d505      	bpl.n	80044f2 <_svfprintf_r+0x8f6>
 80044e6:	2330      	movs	r3, #48	; 0x30
 80044e8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80044ec:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80044f0:	e343      	b.n	8004b7a <_svfprintf_r+0xf7e>
 80044f2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80044f6:	e340      	b.n	8004b7a <_svfprintf_r+0xf7e>
 80044f8:	b10b      	cbz	r3, 80044fe <_svfprintf_r+0x902>
 80044fa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80044fe:	9b06      	ldr	r3, [sp, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 82f7 	beq.w	8004af4 <_svfprintf_r+0xef8>
 8004506:	2600      	movs	r6, #0
 8004508:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800450c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004510:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8004514:	9708      	str	r7, [sp, #32]
 8004516:	e4e3      	b.n	8003ee0 <_svfprintf_r+0x2e4>
 8004518:	4606      	mov	r6, r0
 800451a:	e538      	b.n	8003f8e <_svfprintf_r+0x392>
 800451c:	2310      	movs	r3, #16
 800451e:	6063      	str	r3, [r4, #4]
 8004520:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004522:	3310      	adds	r3, #16
 8004524:	9323      	str	r3, [sp, #140]	; 0x8c
 8004526:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004528:	3301      	adds	r3, #1
 800452a:	2b07      	cmp	r3, #7
 800452c:	9322      	str	r3, [sp, #136]	; 0x88
 800452e:	dc04      	bgt.n	800453a <_svfprintf_r+0x93e>
 8004530:	3408      	adds	r4, #8
 8004532:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004534:	3b10      	subs	r3, #16
 8004536:	9310      	str	r3, [sp, #64]	; 0x40
 8004538:	e611      	b.n	800415e <_svfprintf_r+0x562>
 800453a:	aa21      	add	r2, sp, #132	; 0x84
 800453c:	4649      	mov	r1, r9
 800453e:	4650      	mov	r0, sl
 8004540:	f001 feb8 	bl	80062b4 <__ssprint_r>
 8004544:	2800      	cmp	r0, #0
 8004546:	f040 82b6 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 800454a:	ac2e      	add	r4, sp, #184	; 0xb8
 800454c:	e7f1      	b.n	8004532 <_svfprintf_r+0x936>
 800454e:	aa21      	add	r2, sp, #132	; 0x84
 8004550:	4649      	mov	r1, r9
 8004552:	4650      	mov	r0, sl
 8004554:	f001 feae 	bl	80062b4 <__ssprint_r>
 8004558:	2800      	cmp	r0, #0
 800455a:	f040 82ac 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 800455e:	ac2e      	add	r4, sp, #184	; 0xb8
 8004560:	e610      	b.n	8004184 <_svfprintf_r+0x588>
 8004562:	aa21      	add	r2, sp, #132	; 0x84
 8004564:	4649      	mov	r1, r9
 8004566:	4650      	mov	r0, sl
 8004568:	f001 fea4 	bl	80062b4 <__ssprint_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	f040 82a2 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8004572:	ac2e      	add	r4, sp, #184	; 0xb8
 8004574:	e618      	b.n	80041a8 <_svfprintf_r+0x5ac>
 8004576:	aa21      	add	r2, sp, #132	; 0x84
 8004578:	4649      	mov	r1, r9
 800457a:	4650      	mov	r0, sl
 800457c:	f001 fe9a 	bl	80062b4 <__ssprint_r>
 8004580:	2800      	cmp	r0, #0
 8004582:	f040 8298 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8004586:	ac2e      	add	r4, sp, #184	; 0xb8
 8004588:	e61e      	b.n	80041c8 <_svfprintf_r+0x5cc>
 800458a:	2310      	movs	r3, #16
 800458c:	6063      	str	r3, [r4, #4]
 800458e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004590:	3310      	adds	r3, #16
 8004592:	9323      	str	r3, [sp, #140]	; 0x8c
 8004594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004596:	3301      	adds	r3, #1
 8004598:	2b07      	cmp	r3, #7
 800459a:	9322      	str	r3, [sp, #136]	; 0x88
 800459c:	dc04      	bgt.n	80045a8 <_svfprintf_r+0x9ac>
 800459e:	3408      	adds	r4, #8
 80045a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045a2:	3b10      	subs	r3, #16
 80045a4:	9310      	str	r3, [sp, #64]	; 0x40
 80045a6:	e618      	b.n	80041da <_svfprintf_r+0x5de>
 80045a8:	aa21      	add	r2, sp, #132	; 0x84
 80045aa:	4649      	mov	r1, r9
 80045ac:	4650      	mov	r0, sl
 80045ae:	f001 fe81 	bl	80062b4 <__ssprint_r>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	f040 827f 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80045b8:	ac2e      	add	r4, sp, #184	; 0xb8
 80045ba:	e7f1      	b.n	80045a0 <_svfprintf_r+0x9a4>
 80045bc:	aa21      	add	r2, sp, #132	; 0x84
 80045be:	4649      	mov	r1, r9
 80045c0:	4650      	mov	r0, sl
 80045c2:	f001 fe77 	bl	80062b4 <__ssprint_r>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f040 8275 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80045cc:	ac2e      	add	r4, sp, #184	; 0xb8
 80045ce:	e617      	b.n	8004200 <_svfprintf_r+0x604>
 80045d0:	2310      	movs	r3, #16
 80045d2:	6063      	str	r3, [r4, #4]
 80045d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045d6:	3310      	adds	r3, #16
 80045d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80045da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045dc:	3301      	adds	r3, #1
 80045de:	2b07      	cmp	r3, #7
 80045e0:	9322      	str	r3, [sp, #136]	; 0x88
 80045e2:	dc02      	bgt.n	80045ea <_svfprintf_r+0x9ee>
 80045e4:	3408      	adds	r4, #8
 80045e6:	3e10      	subs	r6, #16
 80045e8:	e60e      	b.n	8004208 <_svfprintf_r+0x60c>
 80045ea:	aa21      	add	r2, sp, #132	; 0x84
 80045ec:	4649      	mov	r1, r9
 80045ee:	4650      	mov	r0, sl
 80045f0:	f001 fe60 	bl	80062b4 <__ssprint_r>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f040 825e 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80045fa:	ac2e      	add	r4, sp, #184	; 0xb8
 80045fc:	e7f3      	b.n	80045e6 <_svfprintf_r+0x9ea>
 80045fe:	aa21      	add	r2, sp, #132	; 0x84
 8004600:	4649      	mov	r1, r9
 8004602:	4650      	mov	r0, sl
 8004604:	f001 fe56 	bl	80062b4 <__ssprint_r>
 8004608:	2800      	cmp	r0, #0
 800460a:	f040 8254 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 800460e:	ac2e      	add	r4, sp, #184	; 0xb8
 8004610:	e60a      	b.n	8004228 <_svfprintf_r+0x62c>
 8004612:	9b06      	ldr	r3, [sp, #24]
 8004614:	2b65      	cmp	r3, #101	; 0x65
 8004616:	f340 81a9 	ble.w	800496c <_svfprintf_r+0xd70>
 800461a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800461c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800461e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004620:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004622:	f7fc f9bd 	bl	80009a0 <__aeabi_dcmpeq>
 8004626:	2800      	cmp	r0, #0
 8004628:	d062      	beq.n	80046f0 <_svfprintf_r+0xaf4>
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <_svfprintf_r+0xaec>)
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	2301      	movs	r3, #1
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004634:	3301      	adds	r3, #1
 8004636:	9323      	str	r3, [sp, #140]	; 0x8c
 8004638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800463a:	3301      	adds	r3, #1
 800463c:	2b07      	cmp	r3, #7
 800463e:	9322      	str	r3, [sp, #136]	; 0x88
 8004640:	dc25      	bgt.n	800468e <_svfprintf_r+0xa92>
 8004642:	3408      	adds	r4, #8
 8004644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004646:	9a07      	ldr	r2, [sp, #28]
 8004648:	4293      	cmp	r3, r2
 800464a:	db02      	blt.n	8004652 <_svfprintf_r+0xa56>
 800464c:	07ee      	lsls	r6, r5, #31
 800464e:	f57f ae02 	bpl.w	8004256 <_svfprintf_r+0x65a>
 8004652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465a:	6063      	str	r3, [r4, #4]
 800465c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800465e:	4413      	add	r3, r2
 8004660:	9323      	str	r3, [sp, #140]	; 0x8c
 8004662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004664:	3301      	adds	r3, #1
 8004666:	2b07      	cmp	r3, #7
 8004668:	9322      	str	r3, [sp, #136]	; 0x88
 800466a:	dc1a      	bgt.n	80046a2 <_svfprintf_r+0xaa6>
 800466c:	3408      	adds	r4, #8
 800466e:	9b07      	ldr	r3, [sp, #28]
 8004670:	1e5e      	subs	r6, r3, #1
 8004672:	2e00      	cmp	r6, #0
 8004674:	f77f adef 	ble.w	8004256 <_svfprintf_r+0x65a>
 8004678:	f04f 0810 	mov.w	r8, #16
 800467c:	4f1b      	ldr	r7, [pc, #108]	; (80046ec <_svfprintf_r+0xaf0>)
 800467e:	2e10      	cmp	r6, #16
 8004680:	6027      	str	r7, [r4, #0]
 8004682:	dc18      	bgt.n	80046b6 <_svfprintf_r+0xaba>
 8004684:	6066      	str	r6, [r4, #4]
 8004686:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004688:	441e      	add	r6, r3
 800468a:	9623      	str	r6, [sp, #140]	; 0x8c
 800468c:	e5d4      	b.n	8004238 <_svfprintf_r+0x63c>
 800468e:	aa21      	add	r2, sp, #132	; 0x84
 8004690:	4649      	mov	r1, r9
 8004692:	4650      	mov	r0, sl
 8004694:	f001 fe0e 	bl	80062b4 <__ssprint_r>
 8004698:	2800      	cmp	r0, #0
 800469a:	f040 820c 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 800469e:	ac2e      	add	r4, sp, #184	; 0xb8
 80046a0:	e7d0      	b.n	8004644 <_svfprintf_r+0xa48>
 80046a2:	aa21      	add	r2, sp, #132	; 0x84
 80046a4:	4649      	mov	r1, r9
 80046a6:	4650      	mov	r0, sl
 80046a8:	f001 fe04 	bl	80062b4 <__ssprint_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	f040 8202 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80046b2:	ac2e      	add	r4, sp, #184	; 0xb8
 80046b4:	e7db      	b.n	800466e <_svfprintf_r+0xa72>
 80046b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046b8:	f8c4 8004 	str.w	r8, [r4, #4]
 80046bc:	3310      	adds	r3, #16
 80046be:	9323      	str	r3, [sp, #140]	; 0x8c
 80046c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046c2:	3301      	adds	r3, #1
 80046c4:	2b07      	cmp	r3, #7
 80046c6:	9322      	str	r3, [sp, #136]	; 0x88
 80046c8:	dc02      	bgt.n	80046d0 <_svfprintf_r+0xad4>
 80046ca:	3408      	adds	r4, #8
 80046cc:	3e10      	subs	r6, #16
 80046ce:	e7d6      	b.n	800467e <_svfprintf_r+0xa82>
 80046d0:	aa21      	add	r2, sp, #132	; 0x84
 80046d2:	4649      	mov	r1, r9
 80046d4:	4650      	mov	r0, sl
 80046d6:	f001 fded 	bl	80062b4 <__ssprint_r>
 80046da:	2800      	cmp	r0, #0
 80046dc:	f040 81eb 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80046e0:	ac2e      	add	r4, sp, #184	; 0xb8
 80046e2:	e7f3      	b.n	80046cc <_svfprintf_r+0xad0>
 80046e4:	08006b99 	.word	0x08006b99
 80046e8:	08006baa 	.word	0x08006baa
 80046ec:	08006bbc 	.word	0x08006bbc
 80046f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dc7a      	bgt.n	80047ec <_svfprintf_r+0xbf0>
 80046f6:	4b9b      	ldr	r3, [pc, #620]	; (8004964 <_svfprintf_r+0xd68>)
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	2301      	movs	r3, #1
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004700:	3301      	adds	r3, #1
 8004702:	9323      	str	r3, [sp, #140]	; 0x8c
 8004704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004706:	3301      	adds	r3, #1
 8004708:	2b07      	cmp	r3, #7
 800470a:	9322      	str	r3, [sp, #136]	; 0x88
 800470c:	dc44      	bgt.n	8004798 <_svfprintf_r+0xb9c>
 800470e:	3408      	adds	r4, #8
 8004710:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004712:	b923      	cbnz	r3, 800471e <_svfprintf_r+0xb22>
 8004714:	9b07      	ldr	r3, [sp, #28]
 8004716:	b913      	cbnz	r3, 800471e <_svfprintf_r+0xb22>
 8004718:	07e8      	lsls	r0, r5, #31
 800471a:	f57f ad9c 	bpl.w	8004256 <_svfprintf_r+0x65a>
 800471e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004726:	6063      	str	r3, [r4, #4]
 8004728:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800472a:	4413      	add	r3, r2
 800472c:	9323      	str	r3, [sp, #140]	; 0x8c
 800472e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004730:	3301      	adds	r3, #1
 8004732:	2b07      	cmp	r3, #7
 8004734:	9322      	str	r3, [sp, #136]	; 0x88
 8004736:	dc39      	bgt.n	80047ac <_svfprintf_r+0xbb0>
 8004738:	f104 0308 	add.w	r3, r4, #8
 800473c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800473e:	2e00      	cmp	r6, #0
 8004740:	da19      	bge.n	8004776 <_svfprintf_r+0xb7a>
 8004742:	2410      	movs	r4, #16
 8004744:	4f88      	ldr	r7, [pc, #544]	; (8004968 <_svfprintf_r+0xd6c>)
 8004746:	4276      	negs	r6, r6
 8004748:	2e10      	cmp	r6, #16
 800474a:	601f      	str	r7, [r3, #0]
 800474c:	dc38      	bgt.n	80047c0 <_svfprintf_r+0xbc4>
 800474e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004750:	605e      	str	r6, [r3, #4]
 8004752:	4416      	add	r6, r2
 8004754:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004756:	9623      	str	r6, [sp, #140]	; 0x8c
 8004758:	3201      	adds	r2, #1
 800475a:	2a07      	cmp	r2, #7
 800475c:	f103 0308 	add.w	r3, r3, #8
 8004760:	9222      	str	r2, [sp, #136]	; 0x88
 8004762:	dd08      	ble.n	8004776 <_svfprintf_r+0xb7a>
 8004764:	aa21      	add	r2, sp, #132	; 0x84
 8004766:	4649      	mov	r1, r9
 8004768:	4650      	mov	r0, sl
 800476a:	f001 fda3 	bl	80062b4 <__ssprint_r>
 800476e:	2800      	cmp	r0, #0
 8004770:	f040 81a1 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8004774:	ab2e      	add	r3, sp, #184	; 0xb8
 8004776:	9a07      	ldr	r2, [sp, #28]
 8004778:	9907      	ldr	r1, [sp, #28]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800477e:	f8c3 8000 	str.w	r8, [r3]
 8004782:	440a      	add	r2, r1
 8004784:	9223      	str	r2, [sp, #140]	; 0x8c
 8004786:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004788:	3201      	adds	r2, #1
 800478a:	2a07      	cmp	r2, #7
 800478c:	9222      	str	r2, [sp, #136]	; 0x88
 800478e:	f73f ad59 	bgt.w	8004244 <_svfprintf_r+0x648>
 8004792:	f103 0408 	add.w	r4, r3, #8
 8004796:	e55e      	b.n	8004256 <_svfprintf_r+0x65a>
 8004798:	aa21      	add	r2, sp, #132	; 0x84
 800479a:	4649      	mov	r1, r9
 800479c:	4650      	mov	r0, sl
 800479e:	f001 fd89 	bl	80062b4 <__ssprint_r>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	f040 8187 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80047a8:	ac2e      	add	r4, sp, #184	; 0xb8
 80047aa:	e7b1      	b.n	8004710 <_svfprintf_r+0xb14>
 80047ac:	aa21      	add	r2, sp, #132	; 0x84
 80047ae:	4649      	mov	r1, r9
 80047b0:	4650      	mov	r0, sl
 80047b2:	f001 fd7f 	bl	80062b4 <__ssprint_r>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f040 817d 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80047bc:	ab2e      	add	r3, sp, #184	; 0xb8
 80047be:	e7bd      	b.n	800473c <_svfprintf_r+0xb40>
 80047c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80047c2:	605c      	str	r4, [r3, #4]
 80047c4:	3210      	adds	r2, #16
 80047c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80047c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80047ca:	3201      	adds	r2, #1
 80047cc:	2a07      	cmp	r2, #7
 80047ce:	9222      	str	r2, [sp, #136]	; 0x88
 80047d0:	dc02      	bgt.n	80047d8 <_svfprintf_r+0xbdc>
 80047d2:	3308      	adds	r3, #8
 80047d4:	3e10      	subs	r6, #16
 80047d6:	e7b7      	b.n	8004748 <_svfprintf_r+0xb4c>
 80047d8:	aa21      	add	r2, sp, #132	; 0x84
 80047da:	4649      	mov	r1, r9
 80047dc:	4650      	mov	r0, sl
 80047de:	f001 fd69 	bl	80062b4 <__ssprint_r>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f040 8167 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80047e8:	ab2e      	add	r3, sp, #184	; 0xb8
 80047ea:	e7f3      	b.n	80047d4 <_svfprintf_r+0xbd8>
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	42bb      	cmp	r3, r7
 80047f0:	bfa8      	it	ge
 80047f2:	463b      	movge	r3, r7
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	461e      	mov	r6, r3
 80047f8:	dd0b      	ble.n	8004812 <_svfprintf_r+0xc16>
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047fe:	f8c4 8000 	str.w	r8, [r4]
 8004802:	4433      	add	r3, r6
 8004804:	9323      	str	r3, [sp, #140]	; 0x8c
 8004806:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004808:	3301      	adds	r3, #1
 800480a:	2b07      	cmp	r3, #7
 800480c:	9322      	str	r3, [sp, #136]	; 0x88
 800480e:	dc5f      	bgt.n	80048d0 <_svfprintf_r+0xcd4>
 8004810:	3408      	adds	r4, #8
 8004812:	2e00      	cmp	r6, #0
 8004814:	bfb4      	ite	lt
 8004816:	463e      	movlt	r6, r7
 8004818:	1bbe      	subge	r6, r7, r6
 800481a:	2e00      	cmp	r6, #0
 800481c:	dd0f      	ble.n	800483e <_svfprintf_r+0xc42>
 800481e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8004968 <_svfprintf_r+0xd6c>
 8004822:	2e10      	cmp	r6, #16
 8004824:	f8c4 b000 	str.w	fp, [r4]
 8004828:	dc5c      	bgt.n	80048e4 <_svfprintf_r+0xce8>
 800482a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800482c:	6066      	str	r6, [r4, #4]
 800482e:	441e      	add	r6, r3
 8004830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004832:	9623      	str	r6, [sp, #140]	; 0x8c
 8004834:	3301      	adds	r3, #1
 8004836:	2b07      	cmp	r3, #7
 8004838:	9322      	str	r3, [sp, #136]	; 0x88
 800483a:	dc6a      	bgt.n	8004912 <_svfprintf_r+0xd16>
 800483c:	3408      	adds	r4, #8
 800483e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004840:	9a07      	ldr	r2, [sp, #28]
 8004842:	4293      	cmp	r3, r2
 8004844:	db01      	blt.n	800484a <_svfprintf_r+0xc4e>
 8004846:	07e9      	lsls	r1, r5, #31
 8004848:	d50d      	bpl.n	8004866 <_svfprintf_r+0xc6a>
 800484a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800484c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004856:	4413      	add	r3, r2
 8004858:	9323      	str	r3, [sp, #140]	; 0x8c
 800485a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800485c:	3301      	adds	r3, #1
 800485e:	2b07      	cmp	r3, #7
 8004860:	9322      	str	r3, [sp, #136]	; 0x88
 8004862:	dc60      	bgt.n	8004926 <_svfprintf_r+0xd2a>
 8004864:	3408      	adds	r4, #8
 8004866:	9b07      	ldr	r3, [sp, #28]
 8004868:	9a07      	ldr	r2, [sp, #28]
 800486a:	1bde      	subs	r6, r3, r7
 800486c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	429e      	cmp	r6, r3
 8004872:	bfa8      	it	ge
 8004874:	461e      	movge	r6, r3
 8004876:	2e00      	cmp	r6, #0
 8004878:	dd0b      	ble.n	8004892 <_svfprintf_r+0xc96>
 800487a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800487c:	4447      	add	r7, r8
 800487e:	4433      	add	r3, r6
 8004880:	9323      	str	r3, [sp, #140]	; 0x8c
 8004882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004884:	6027      	str	r7, [r4, #0]
 8004886:	3301      	adds	r3, #1
 8004888:	2b07      	cmp	r3, #7
 800488a:	6066      	str	r6, [r4, #4]
 800488c:	9322      	str	r3, [sp, #136]	; 0x88
 800488e:	dc54      	bgt.n	800493a <_svfprintf_r+0xd3e>
 8004890:	3408      	adds	r4, #8
 8004892:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004894:	9a07      	ldr	r2, [sp, #28]
 8004896:	2e00      	cmp	r6, #0
 8004898:	eba2 0303 	sub.w	r3, r2, r3
 800489c:	bfb4      	ite	lt
 800489e:	461e      	movlt	r6, r3
 80048a0:	1b9e      	subge	r6, r3, r6
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	f77f acd7 	ble.w	8004256 <_svfprintf_r+0x65a>
 80048a8:	f04f 0810 	mov.w	r8, #16
 80048ac:	4f2e      	ldr	r7, [pc, #184]	; (8004968 <_svfprintf_r+0xd6c>)
 80048ae:	2e10      	cmp	r6, #16
 80048b0:	6027      	str	r7, [r4, #0]
 80048b2:	f77f aee7 	ble.w	8004684 <_svfprintf_r+0xa88>
 80048b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048b8:	f8c4 8004 	str.w	r8, [r4, #4]
 80048bc:	3310      	adds	r3, #16
 80048be:	9323      	str	r3, [sp, #140]	; 0x8c
 80048c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048c2:	3301      	adds	r3, #1
 80048c4:	2b07      	cmp	r3, #7
 80048c6:	9322      	str	r3, [sp, #136]	; 0x88
 80048c8:	dc41      	bgt.n	800494e <_svfprintf_r+0xd52>
 80048ca:	3408      	adds	r4, #8
 80048cc:	3e10      	subs	r6, #16
 80048ce:	e7ee      	b.n	80048ae <_svfprintf_r+0xcb2>
 80048d0:	aa21      	add	r2, sp, #132	; 0x84
 80048d2:	4649      	mov	r1, r9
 80048d4:	4650      	mov	r0, sl
 80048d6:	f001 fced 	bl	80062b4 <__ssprint_r>
 80048da:	2800      	cmp	r0, #0
 80048dc:	f040 80eb 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 80048e0:	ac2e      	add	r4, sp, #184	; 0xb8
 80048e2:	e796      	b.n	8004812 <_svfprintf_r+0xc16>
 80048e4:	2310      	movs	r3, #16
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048ea:	3310      	adds	r3, #16
 80048ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80048ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048f0:	3301      	adds	r3, #1
 80048f2:	2b07      	cmp	r3, #7
 80048f4:	9322      	str	r3, [sp, #136]	; 0x88
 80048f6:	dc02      	bgt.n	80048fe <_svfprintf_r+0xd02>
 80048f8:	3408      	adds	r4, #8
 80048fa:	3e10      	subs	r6, #16
 80048fc:	e791      	b.n	8004822 <_svfprintf_r+0xc26>
 80048fe:	aa21      	add	r2, sp, #132	; 0x84
 8004900:	4649      	mov	r1, r9
 8004902:	4650      	mov	r0, sl
 8004904:	f001 fcd6 	bl	80062b4 <__ssprint_r>
 8004908:	2800      	cmp	r0, #0
 800490a:	f040 80d4 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 800490e:	ac2e      	add	r4, sp, #184	; 0xb8
 8004910:	e7f3      	b.n	80048fa <_svfprintf_r+0xcfe>
 8004912:	aa21      	add	r2, sp, #132	; 0x84
 8004914:	4649      	mov	r1, r9
 8004916:	4650      	mov	r0, sl
 8004918:	f001 fccc 	bl	80062b4 <__ssprint_r>
 800491c:	2800      	cmp	r0, #0
 800491e:	f040 80ca 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8004922:	ac2e      	add	r4, sp, #184	; 0xb8
 8004924:	e78b      	b.n	800483e <_svfprintf_r+0xc42>
 8004926:	aa21      	add	r2, sp, #132	; 0x84
 8004928:	4649      	mov	r1, r9
 800492a:	4650      	mov	r0, sl
 800492c:	f001 fcc2 	bl	80062b4 <__ssprint_r>
 8004930:	2800      	cmp	r0, #0
 8004932:	f040 80c0 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 8004936:	ac2e      	add	r4, sp, #184	; 0xb8
 8004938:	e795      	b.n	8004866 <_svfprintf_r+0xc6a>
 800493a:	aa21      	add	r2, sp, #132	; 0x84
 800493c:	4649      	mov	r1, r9
 800493e:	4650      	mov	r0, sl
 8004940:	f001 fcb8 	bl	80062b4 <__ssprint_r>
 8004944:	2800      	cmp	r0, #0
 8004946:	f040 80b6 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 800494a:	ac2e      	add	r4, sp, #184	; 0xb8
 800494c:	e7a1      	b.n	8004892 <_svfprintf_r+0xc96>
 800494e:	aa21      	add	r2, sp, #132	; 0x84
 8004950:	4649      	mov	r1, r9
 8004952:	4650      	mov	r0, sl
 8004954:	f001 fcae 	bl	80062b4 <__ssprint_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	f040 80ac 	bne.w	8004ab6 <_svfprintf_r+0xeba>
 800495e:	ac2e      	add	r4, sp, #184	; 0xb8
 8004960:	e7b4      	b.n	80048cc <_svfprintf_r+0xcd0>
 8004962:	bf00      	nop
 8004964:	08006baa 	.word	0x08006baa
 8004968:	08006bbc 	.word	0x08006bbc
 800496c:	9b07      	ldr	r3, [sp, #28]
 800496e:	2b01      	cmp	r3, #1
 8004970:	dc01      	bgt.n	8004976 <_svfprintf_r+0xd7a>
 8004972:	07ea      	lsls	r2, r5, #31
 8004974:	d576      	bpl.n	8004a64 <_svfprintf_r+0xe68>
 8004976:	2301      	movs	r3, #1
 8004978:	6063      	str	r3, [r4, #4]
 800497a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800497c:	f8c4 8000 	str.w	r8, [r4]
 8004980:	3301      	adds	r3, #1
 8004982:	9323      	str	r3, [sp, #140]	; 0x8c
 8004984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004986:	3301      	adds	r3, #1
 8004988:	2b07      	cmp	r3, #7
 800498a:	9322      	str	r3, [sp, #136]	; 0x88
 800498c:	dc36      	bgt.n	80049fc <_svfprintf_r+0xe00>
 800498e:	3408      	adds	r4, #8
 8004990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800499c:	4413      	add	r3, r2
 800499e:	9323      	str	r3, [sp, #140]	; 0x8c
 80049a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049a2:	3301      	adds	r3, #1
 80049a4:	2b07      	cmp	r3, #7
 80049a6:	9322      	str	r3, [sp, #136]	; 0x88
 80049a8:	dc31      	bgt.n	8004a0e <_svfprintf_r+0xe12>
 80049aa:	3408      	adds	r4, #8
 80049ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80049ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80049b4:	f7fb fff4 	bl	80009a0 <__aeabi_dcmpeq>
 80049b8:	9b07      	ldr	r3, [sp, #28]
 80049ba:	1e5e      	subs	r6, r3, #1
 80049bc:	2800      	cmp	r0, #0
 80049be:	d12f      	bne.n	8004a20 <_svfprintf_r+0xe24>
 80049c0:	f108 0301 	add.w	r3, r8, #1
 80049c4:	e884 0048 	stmia.w	r4, {r3, r6}
 80049c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	9323      	str	r3, [sp, #140]	; 0x8c
 80049d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049d4:	3301      	adds	r3, #1
 80049d6:	2b07      	cmp	r3, #7
 80049d8:	9322      	str	r3, [sp, #136]	; 0x88
 80049da:	dd4a      	ble.n	8004a72 <_svfprintf_r+0xe76>
 80049dc:	aa21      	add	r2, sp, #132	; 0x84
 80049de:	4649      	mov	r1, r9
 80049e0:	4650      	mov	r0, sl
 80049e2:	f001 fc67 	bl	80062b4 <__ssprint_r>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d165      	bne.n	8004ab6 <_svfprintf_r+0xeba>
 80049ea:	ac2e      	add	r4, sp, #184	; 0xb8
 80049ec:	ab1d      	add	r3, sp, #116	; 0x74
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80049f4:	6063      	str	r3, [r4, #4]
 80049f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049f8:	4413      	add	r3, r2
 80049fa:	e41c      	b.n	8004236 <_svfprintf_r+0x63a>
 80049fc:	aa21      	add	r2, sp, #132	; 0x84
 80049fe:	4649      	mov	r1, r9
 8004a00:	4650      	mov	r0, sl
 8004a02:	f001 fc57 	bl	80062b4 <__ssprint_r>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d155      	bne.n	8004ab6 <_svfprintf_r+0xeba>
 8004a0a:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a0c:	e7c0      	b.n	8004990 <_svfprintf_r+0xd94>
 8004a0e:	aa21      	add	r2, sp, #132	; 0x84
 8004a10:	4649      	mov	r1, r9
 8004a12:	4650      	mov	r0, sl
 8004a14:	f001 fc4e 	bl	80062b4 <__ssprint_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d14c      	bne.n	8004ab6 <_svfprintf_r+0xeba>
 8004a1c:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a1e:	e7c5      	b.n	80049ac <_svfprintf_r+0xdb0>
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	dde3      	ble.n	80049ec <_svfprintf_r+0xdf0>
 8004a24:	f04f 0810 	mov.w	r8, #16
 8004a28:	4f58      	ldr	r7, [pc, #352]	; (8004b8c <_svfprintf_r+0xf90>)
 8004a2a:	2e10      	cmp	r6, #16
 8004a2c:	6027      	str	r7, [r4, #0]
 8004a2e:	dc04      	bgt.n	8004a3a <_svfprintf_r+0xe3e>
 8004a30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a32:	6066      	str	r6, [r4, #4]
 8004a34:	441e      	add	r6, r3
 8004a36:	9623      	str	r6, [sp, #140]	; 0x8c
 8004a38:	e7cb      	b.n	80049d2 <_svfprintf_r+0xdd6>
 8004a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a3c:	f8c4 8004 	str.w	r8, [r4, #4]
 8004a40:	3310      	adds	r3, #16
 8004a42:	9323      	str	r3, [sp, #140]	; 0x8c
 8004a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a46:	3301      	adds	r3, #1
 8004a48:	2b07      	cmp	r3, #7
 8004a4a:	9322      	str	r3, [sp, #136]	; 0x88
 8004a4c:	dc02      	bgt.n	8004a54 <_svfprintf_r+0xe58>
 8004a4e:	3408      	adds	r4, #8
 8004a50:	3e10      	subs	r6, #16
 8004a52:	e7ea      	b.n	8004a2a <_svfprintf_r+0xe2e>
 8004a54:	aa21      	add	r2, sp, #132	; 0x84
 8004a56:	4649      	mov	r1, r9
 8004a58:	4650      	mov	r0, sl
 8004a5a:	f001 fc2b 	bl	80062b4 <__ssprint_r>
 8004a5e:	bb50      	cbnz	r0, 8004ab6 <_svfprintf_r+0xeba>
 8004a60:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a62:	e7f5      	b.n	8004a50 <_svfprintf_r+0xe54>
 8004a64:	2301      	movs	r3, #1
 8004a66:	6063      	str	r3, [r4, #4]
 8004a68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a6a:	f8c4 8000 	str.w	r8, [r4]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	e7ae      	b.n	80049d0 <_svfprintf_r+0xdd4>
 8004a72:	3408      	adds	r4, #8
 8004a74:	e7ba      	b.n	80049ec <_svfprintf_r+0xdf0>
 8004a76:	3408      	adds	r4, #8
 8004a78:	f7ff bbed 	b.w	8004256 <_svfprintf_r+0x65a>
 8004a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a80:	1a9d      	subs	r5, r3, r2
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	f77f abea 	ble.w	800425c <_svfprintf_r+0x660>
 8004a88:	2610      	movs	r6, #16
 8004a8a:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <_svfprintf_r+0xf94>)
 8004a8c:	2d10      	cmp	r5, #16
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	dc1b      	bgt.n	8004aca <_svfprintf_r+0xece>
 8004a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a94:	6065      	str	r5, [r4, #4]
 8004a96:	441d      	add	r5, r3
 8004a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a9a:	9523      	str	r5, [sp, #140]	; 0x8c
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	2b07      	cmp	r3, #7
 8004aa0:	9322      	str	r3, [sp, #136]	; 0x88
 8004aa2:	f77f abdb 	ble.w	800425c <_svfprintf_r+0x660>
 8004aa6:	aa21      	add	r2, sp, #132	; 0x84
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4650      	mov	r0, sl
 8004aac:	f001 fc02 	bl	80062b4 <__ssprint_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	f43f abd3 	beq.w	800425c <_svfprintf_r+0x660>
 8004ab6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004aba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac0:	bf18      	it	ne
 8004ac2:	f04f 33ff 	movne.w	r3, #4294967295
 8004ac6:	f7ff b8bd 	b.w	8003c44 <_svfprintf_r+0x48>
 8004aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004acc:	6066      	str	r6, [r4, #4]
 8004ace:	3310      	adds	r3, #16
 8004ad0:	9323      	str	r3, [sp, #140]	; 0x8c
 8004ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	2b07      	cmp	r3, #7
 8004ad8:	9322      	str	r3, [sp, #136]	; 0x88
 8004ada:	dc02      	bgt.n	8004ae2 <_svfprintf_r+0xee6>
 8004adc:	3408      	adds	r4, #8
 8004ade:	3d10      	subs	r5, #16
 8004ae0:	e7d3      	b.n	8004a8a <_svfprintf_r+0xe8e>
 8004ae2:	aa21      	add	r2, sp, #132	; 0x84
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	4650      	mov	r0, sl
 8004ae8:	f001 fbe4 	bl	80062b4 <__ssprint_r>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d1e2      	bne.n	8004ab6 <_svfprintf_r+0xeba>
 8004af0:	ac2e      	add	r4, sp, #184	; 0xb8
 8004af2:	e7f4      	b.n	8004ade <_svfprintf_r+0xee2>
 8004af4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0dd      	beq.n	8004ab6 <_svfprintf_r+0xeba>
 8004afa:	aa21      	add	r2, sp, #132	; 0x84
 8004afc:	4649      	mov	r1, r9
 8004afe:	4650      	mov	r0, sl
 8004b00:	f001 fbd8 	bl	80062b4 <__ssprint_r>
 8004b04:	e7d7      	b.n	8004ab6 <_svfprintf_r+0xeba>
 8004b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b0e:	f7fb ff79 	bl	8000a04 <__aeabi_dcmpun>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f43f aa3d 	beq.w	8003f92 <_svfprintf_r+0x396>
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <_svfprintf_r+0xf98>)
 8004b1a:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <_svfprintf_r+0xf9c>)
 8004b1c:	f7ff ba2d 	b.w	8003f7a <_svfprintf_r+0x37e>
 8004b20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b22:	eba3 0308 	sub.w	r3, r3, r8
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	f7ff baaf 	b.w	800408a <_svfprintf_r+0x48e>
 8004b2c:	ea56 0207 	orrs.w	r2, r6, r7
 8004b30:	950f      	str	r5, [sp, #60]	; 0x3c
 8004b32:	f43f ac2b 	beq.w	800438c <_svfprintf_r+0x790>
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	f43f ac9d 	beq.w	8004476 <_svfprintf_r+0x87a>
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	f43f acbd 	beq.w	80044bc <_svfprintf_r+0x8c0>
 8004b42:	ab2e      	add	r3, sp, #184	; 0xb8
 8004b44:	08f1      	lsrs	r1, r6, #3
 8004b46:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8004b4a:	08f8      	lsrs	r0, r7, #3
 8004b4c:	f006 0207 	and.w	r2, r6, #7
 8004b50:	4607      	mov	r7, r0
 8004b52:	460e      	mov	r6, r1
 8004b54:	3230      	adds	r2, #48	; 0x30
 8004b56:	ea56 0107 	orrs.w	r1, r6, r7
 8004b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8004b5e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004b62:	f47f ac86 	bne.w	8004472 <_svfprintf_r+0x876>
 8004b66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b68:	07c9      	lsls	r1, r1, #31
 8004b6a:	d506      	bpl.n	8004b7a <_svfprintf_r+0xf7e>
 8004b6c:	2a30      	cmp	r2, #48	; 0x30
 8004b6e:	d004      	beq.n	8004b7a <_svfprintf_r+0xf7e>
 8004b70:	2230      	movs	r2, #48	; 0x30
 8004b72:	f808 2c01 	strb.w	r2, [r8, #-1]
 8004b76:	f1a3 0802 	sub.w	r8, r3, #2
 8004b7a:	ab2e      	add	r3, sp, #184	; 0xb8
 8004b7c:	465e      	mov	r6, fp
 8004b7e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004b80:	eba3 0b08 	sub.w	fp, r3, r8
 8004b84:	2700      	movs	r7, #0
 8004b86:	f7ff bace 	b.w	8004126 <_svfprintf_r+0x52a>
 8004b8a:	bf00      	nop
 8004b8c:	08006bbc 	.word	0x08006bbc
 8004b90:	08006bac 	.word	0x08006bac
 8004b94:	08006b80 	.word	0x08006b80
 8004b98:	08006b84 	.word	0x08006b84

08004b9c <quorem>:
 8004b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba0:	6903      	ldr	r3, [r0, #16]
 8004ba2:	690c      	ldr	r4, [r1, #16]
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	f300 8082 	bgt.w	8004cb0 <quorem+0x114>
 8004bac:	3c01      	subs	r4, #1
 8004bae:	f101 0714 	add.w	r7, r1, #20
 8004bb2:	f100 0614 	add.w	r6, r0, #20
 8004bb6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004bba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	fbb0 f5f5 	udiv	r5, r0, r5
 8004bc4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004bc8:	eb06 030e 	add.w	r3, r6, lr
 8004bcc:	eb07 090e 	add.w	r9, r7, lr
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	b38d      	cbz	r5, 8004c38 <quorem+0x9c>
 8004bd4:	f04f 0a00 	mov.w	sl, #0
 8004bd8:	4638      	mov	r0, r7
 8004bda:	46b4      	mov	ip, r6
 8004bdc:	46d3      	mov	fp, sl
 8004bde:	f850 2b04 	ldr.w	r2, [r0], #4
 8004be2:	b293      	uxth	r3, r2
 8004be4:	fb05 a303 	mla	r3, r5, r3, sl
 8004be8:	0c12      	lsrs	r2, r2, #16
 8004bea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bee:	fb05 a202 	mla	r2, r5, r2, sl
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	ebab 0303 	sub.w	r3, fp, r3
 8004bf8:	f8bc b000 	ldrh.w	fp, [ip]
 8004bfc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c00:	445b      	add	r3, fp
 8004c02:	fa1f fb82 	uxth.w	fp, r2
 8004c06:	f8dc 2000 	ldr.w	r2, [ip]
 8004c0a:	4581      	cmp	r9, r0
 8004c0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c1a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c1e:	f84c 3b04 	str.w	r3, [ip], #4
 8004c22:	d2dc      	bcs.n	8004bde <quorem+0x42>
 8004c24:	f856 300e 	ldr.w	r3, [r6, lr]
 8004c28:	b933      	cbnz	r3, 8004c38 <quorem+0x9c>
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	3b04      	subs	r3, #4
 8004c2e:	429e      	cmp	r6, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	d331      	bcc.n	8004c98 <quorem+0xfc>
 8004c34:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c38:	4640      	mov	r0, r8
 8004c3a:	f001 fa62 	bl	8006102 <__mcmp>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	db26      	blt.n	8004c90 <quorem+0xf4>
 8004c42:	4630      	mov	r0, r6
 8004c44:	f04f 0e00 	mov.w	lr, #0
 8004c48:	3501      	adds	r5, #1
 8004c4a:	f857 1b04 	ldr.w	r1, [r7], #4
 8004c4e:	f8d0 c000 	ldr.w	ip, [r0]
 8004c52:	b28b      	uxth	r3, r1
 8004c54:	ebae 0303 	sub.w	r3, lr, r3
 8004c58:	fa1f f28c 	uxth.w	r2, ip
 8004c5c:	4413      	add	r3, r2
 8004c5e:	0c0a      	lsrs	r2, r1, #16
 8004c60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c6e:	45b9      	cmp	r9, r7
 8004c70:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004c74:	f840 3b04 	str.w	r3, [r0], #4
 8004c78:	d2e7      	bcs.n	8004c4a <quorem+0xae>
 8004c7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c82:	b92a      	cbnz	r2, 8004c90 <quorem+0xf4>
 8004c84:	3b04      	subs	r3, #4
 8004c86:	429e      	cmp	r6, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	d30b      	bcc.n	8004ca4 <quorem+0x108>
 8004c8c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c90:	4628      	mov	r0, r5
 8004c92:	b003      	add	sp, #12
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	3b04      	subs	r3, #4
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	d1c9      	bne.n	8004c34 <quorem+0x98>
 8004ca0:	3c01      	subs	r4, #1
 8004ca2:	e7c4      	b.n	8004c2e <quorem+0x92>
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	3b04      	subs	r3, #4
 8004ca8:	2a00      	cmp	r2, #0
 8004caa:	d1ef      	bne.n	8004c8c <quorem+0xf0>
 8004cac:	3c01      	subs	r4, #1
 8004cae:	e7ea      	b.n	8004c86 <quorem+0xea>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e7ee      	b.n	8004c92 <quorem+0xf6>
 8004cb4:	0000      	movs	r0, r0
	...

08004cb8 <_dtoa_r>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004cbe:	b095      	sub	sp, #84	; 0x54
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cc8:	b93e      	cbnz	r6, 8004cda <_dtoa_r+0x22>
 8004cca:	2010      	movs	r0, #16
 8004ccc:	f000 fdd6 	bl	800587c <malloc>
 8004cd0:	6260      	str	r0, [r4, #36]	; 0x24
 8004cd2:	6046      	str	r6, [r0, #4]
 8004cd4:	6086      	str	r6, [r0, #8]
 8004cd6:	6006      	str	r6, [r0, #0]
 8004cd8:	60c6      	str	r6, [r0, #12]
 8004cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	b151      	cbz	r1, 8004cf6 <_dtoa_r+0x3e>
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4093      	lsls	r3, r2
 8004ce6:	604a      	str	r2, [r1, #4]
 8004ce8:	608b      	str	r3, [r1, #8]
 8004cea:	4620      	mov	r0, r4
 8004cec:	f001 f834 	bl	8005d58 <_Bfree>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	9b03      	ldr	r3, [sp, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb7      	itett	lt
 8004cfc:	2301      	movlt	r3, #1
 8004cfe:	2300      	movge	r3, #0
 8004d00:	602b      	strlt	r3, [r5, #0]
 8004d02:	9b03      	ldrlt	r3, [sp, #12]
 8004d04:	bfae      	itee	ge
 8004d06:	602b      	strge	r3, [r5, #0]
 8004d08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	9303      	strlt	r3, [sp, #12]
 8004d0e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004d12:	4bab      	ldr	r3, [pc, #684]	; (8004fc0 <_dtoa_r+0x308>)
 8004d14:	ea33 0309 	bics.w	r3, r3, r9
 8004d18:	d11b      	bne.n	8004d52 <_dtoa_r+0x9a>
 8004d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	9b02      	ldr	r3, [sp, #8]
 8004d24:	b923      	cbnz	r3, 8004d30 <_dtoa_r+0x78>
 8004d26:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	f000 8583 	beq.w	8005836 <_dtoa_r+0xb7e>
 8004d30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d32:	b953      	cbnz	r3, 8004d4a <_dtoa_r+0x92>
 8004d34:	4ba3      	ldr	r3, [pc, #652]	; (8004fc4 <_dtoa_r+0x30c>)
 8004d36:	e021      	b.n	8004d7c <_dtoa_r+0xc4>
 8004d38:	4ba3      	ldr	r3, [pc, #652]	; (8004fc8 <_dtoa_r+0x310>)
 8004d3a:	9306      	str	r3, [sp, #24]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	9806      	ldr	r0, [sp, #24]
 8004d44:	b015      	add	sp, #84	; 0x54
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4a:	4b9e      	ldr	r3, [pc, #632]	; (8004fc4 <_dtoa_r+0x30c>)
 8004d4c:	9306      	str	r3, [sp, #24]
 8004d4e:	3303      	adds	r3, #3
 8004d50:	e7f5      	b.n	8004d3e <_dtoa_r+0x86>
 8004d52:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	f7fb fe1f 	bl	80009a0 <__aeabi_dcmpeq>
 8004d62:	4680      	mov	r8, r0
 8004d64:	b160      	cbz	r0, 8004d80 <_dtoa_r+0xc8>
 8004d66:	2301      	movs	r3, #1
 8004d68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 855e 	beq.w	8005830 <_dtoa_r+0xb78>
 8004d74:	4b95      	ldr	r3, [pc, #596]	; (8004fcc <_dtoa_r+0x314>)
 8004d76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	9306      	str	r3, [sp, #24]
 8004d7e:	e7e0      	b.n	8004d42 <_dtoa_r+0x8a>
 8004d80:	ab12      	add	r3, sp, #72	; 0x48
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	ab13      	add	r3, sp, #76	; 0x4c
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	4632      	mov	r2, r6
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f001 fa31 	bl	80061f4 <__d2b>
 8004d92:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d96:	4682      	mov	sl, r0
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	d07d      	beq.n	8004e98 <_dtoa_r+0x1e0>
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004da2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004da6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004daa:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004dae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004db2:	2200      	movs	r2, #0
 8004db4:	4b86      	ldr	r3, [pc, #536]	; (8004fd0 <_dtoa_r+0x318>)
 8004db6:	f7fb f9d7 	bl	8000168 <__aeabi_dsub>
 8004dba:	a37b      	add	r3, pc, #492	; (adr r3, 8004fa8 <_dtoa_r+0x2f0>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fb86 	bl	80004d0 <__aeabi_dmul>
 8004dc4:	a37a      	add	r3, pc, #488	; (adr r3, 8004fb0 <_dtoa_r+0x2f8>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	f7fb f9cf 	bl	800016c <__adddf3>
 8004dce:	4606      	mov	r6, r0
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	460f      	mov	r7, r1
 8004dd4:	f7fb fb16 	bl	8000404 <__aeabi_i2d>
 8004dd8:	a377      	add	r3, pc, #476	; (adr r3, 8004fb8 <_dtoa_r+0x300>)
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f7fb fb77 	bl	80004d0 <__aeabi_dmul>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb f9bf 	bl	800016c <__adddf3>
 8004dee:	4606      	mov	r6, r0
 8004df0:	460f      	mov	r7, r1
 8004df2:	f7fb fe1d 	bl	8000a30 <__aeabi_d2iz>
 8004df6:	2200      	movs	r2, #0
 8004df8:	4683      	mov	fp, r0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	4639      	mov	r1, r7
 8004e00:	f7fb fdd8 	bl	80009b4 <__aeabi_dcmplt>
 8004e04:	b158      	cbz	r0, 8004e1e <_dtoa_r+0x166>
 8004e06:	4658      	mov	r0, fp
 8004e08:	f7fb fafc 	bl	8000404 <__aeabi_i2d>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4630      	mov	r0, r6
 8004e12:	4639      	mov	r1, r7
 8004e14:	f7fb fdc4 	bl	80009a0 <__aeabi_dcmpeq>
 8004e18:	b908      	cbnz	r0, 8004e1e <_dtoa_r+0x166>
 8004e1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e1e:	f1bb 0f16 	cmp.w	fp, #22
 8004e22:	d858      	bhi.n	8004ed6 <_dtoa_r+0x21e>
 8004e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e28:	496a      	ldr	r1, [pc, #424]	; (8004fd4 <_dtoa_r+0x31c>)
 8004e2a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e32:	f7fb fddd 	bl	80009f0 <__aeabi_dcmpgt>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d04f      	beq.n	8004eda <_dtoa_r+0x222>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e40:	930d      	str	r3, [sp, #52]	; 0x34
 8004e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e44:	1b5d      	subs	r5, r3, r5
 8004e46:	1e6b      	subs	r3, r5, #1
 8004e48:	9307      	str	r3, [sp, #28]
 8004e4a:	bf43      	ittte	mi
 8004e4c:	2300      	movmi	r3, #0
 8004e4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004e52:	9307      	strmi	r3, [sp, #28]
 8004e54:	f04f 0800 	movpl.w	r8, #0
 8004e58:	f1bb 0f00 	cmp.w	fp, #0
 8004e5c:	db3f      	blt.n	8004ede <_dtoa_r+0x226>
 8004e5e:	9b07      	ldr	r3, [sp, #28]
 8004e60:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004e64:	445b      	add	r3, fp
 8004e66:	9307      	str	r3, [sp, #28]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9308      	str	r3, [sp, #32]
 8004e6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e6e:	2b09      	cmp	r3, #9
 8004e70:	f200 80b4 	bhi.w	8004fdc <_dtoa_r+0x324>
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	bfc4      	itt	gt
 8004e78:	3b04      	subgt	r3, #4
 8004e7a:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004e7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e7e:	bfc8      	it	gt
 8004e80:	2600      	movgt	r6, #0
 8004e82:	f1a3 0302 	sub.w	r3, r3, #2
 8004e86:	bfd8      	it	le
 8004e88:	2601      	movle	r6, #1
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	f200 80b2 	bhi.w	8004ff4 <_dtoa_r+0x33c>
 8004e90:	e8df f003 	tbb	[pc, r3]
 8004e94:	782d8684 	.word	0x782d8684
 8004e98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004e9c:	441d      	add	r5, r3
 8004e9e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	dd11      	ble.n	8004eca <_dtoa_r+0x212>
 8004ea6:	9a02      	ldr	r2, [sp, #8]
 8004ea8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004eac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004eb0:	fa22 f000 	lsr.w	r0, r2, r0
 8004eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb8:	4318      	orrs	r0, r3
 8004eba:	f7fb fa93 	bl	80003e4 <__aeabi_ui2d>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004ec4:	3d01      	subs	r5, #1
 8004ec6:	9310      	str	r3, [sp, #64]	; 0x40
 8004ec8:	e773      	b.n	8004db2 <_dtoa_r+0xfa>
 8004eca:	f1c3 0020 	rsb	r0, r3, #32
 8004ece:	9b02      	ldr	r3, [sp, #8]
 8004ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ed4:	e7f1      	b.n	8004eba <_dtoa_r+0x202>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e7b2      	b.n	8004e40 <_dtoa_r+0x188>
 8004eda:	900d      	str	r0, [sp, #52]	; 0x34
 8004edc:	e7b1      	b.n	8004e42 <_dtoa_r+0x18a>
 8004ede:	f1cb 0300 	rsb	r3, fp, #0
 8004ee2:	9308      	str	r3, [sp, #32]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	eba8 080b 	sub.w	r8, r8, fp
 8004eea:	930c      	str	r3, [sp, #48]	; 0x30
 8004eec:	e7be      	b.n	8004e6c <_dtoa_r+0x1b4>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f340 8080 	ble.w	8004ffa <_dtoa_r+0x342>
 8004efa:	4699      	mov	r9, r3
 8004efc:	9304      	str	r3, [sp, #16]
 8004efe:	2200      	movs	r2, #0
 8004f00:	2104      	movs	r1, #4
 8004f02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004f04:	606a      	str	r2, [r5, #4]
 8004f06:	f101 0214 	add.w	r2, r1, #20
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d97a      	bls.n	8005004 <_dtoa_r+0x34c>
 8004f0e:	6869      	ldr	r1, [r5, #4]
 8004f10:	4620      	mov	r0, r4
 8004f12:	f000 feed 	bl	8005cf0 <_Balloc>
 8004f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f18:	6028      	str	r0, [r5, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b9 0f0e 	cmp.w	r9, #14
 8004f20:	9306      	str	r3, [sp, #24]
 8004f22:	f200 80f0 	bhi.w	8005106 <_dtoa_r+0x44e>
 8004f26:	2e00      	cmp	r6, #0
 8004f28:	f000 80ed 	beq.w	8005106 <_dtoa_r+0x44e>
 8004f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f30:	f1bb 0f00 	cmp.w	fp, #0
 8004f34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004f38:	dd79      	ble.n	800502e <_dtoa_r+0x376>
 8004f3a:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <_dtoa_r+0x31c>)
 8004f3c:	f00b 030f 	and.w	r3, fp, #15
 8004f40:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004f44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f48:	06f0      	lsls	r0, r6, #27
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f52:	d55c      	bpl.n	800500e <_dtoa_r+0x356>
 8004f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f58:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <_dtoa_r+0x320>)
 8004f5a:	2503      	movs	r5, #3
 8004f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f60:	f7fb fbe0 	bl	8000724 <__aeabi_ddiv>
 8004f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f68:	f006 060f 	and.w	r6, r6, #15
 8004f6c:	4f1a      	ldr	r7, [pc, #104]	; (8004fd8 <_dtoa_r+0x320>)
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	d14f      	bne.n	8005012 <_dtoa_r+0x35a>
 8004f72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f7a:	f7fb fbd3 	bl	8000724 <__aeabi_ddiv>
 8004f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f82:	e06e      	b.n	8005062 <_dtoa_r+0x3aa>
 8004f84:	2301      	movs	r3, #1
 8004f86:	9309      	str	r3, [sp, #36]	; 0x24
 8004f88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f8a:	445b      	add	r3, fp
 8004f8c:	f103 0901 	add.w	r9, r3, #1
 8004f90:	9304      	str	r3, [sp, #16]
 8004f92:	464b      	mov	r3, r9
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	bfb8      	it	lt
 8004f98:	2301      	movlt	r3, #1
 8004f9a:	e7b0      	b.n	8004efe <_dtoa_r+0x246>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e7a7      	b.n	8004ef0 <_dtoa_r+0x238>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e7f0      	b.n	8004f86 <_dtoa_r+0x2ce>
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	636f4361 	.word	0x636f4361
 8004fac:	3fd287a7 	.word	0x3fd287a7
 8004fb0:	8b60c8b3 	.word	0x8b60c8b3
 8004fb4:	3fc68a28 	.word	0x3fc68a28
 8004fb8:	509f79fb 	.word	0x509f79fb
 8004fbc:	3fd34413 	.word	0x3fd34413
 8004fc0:	7ff00000 	.word	0x7ff00000
 8004fc4:	08006bd5 	.word	0x08006bd5
 8004fc8:	08006bcc 	.word	0x08006bcc
 8004fcc:	08006bab 	.word	0x08006bab
 8004fd0:	3ff80000 	.word	0x3ff80000
 8004fd4:	08006c08 	.word	0x08006c08
 8004fd8:	08006be0 	.word	0x08006be0
 8004fdc:	2601      	movs	r6, #1
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9609      	str	r6, [sp, #36]	; 0x24
 8004fe2:	931e      	str	r3, [sp, #120]	; 0x78
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	2200      	movs	r2, #0
 8004fea:	9304      	str	r3, [sp, #16]
 8004fec:	4699      	mov	r9, r3
 8004fee:	2312      	movs	r3, #18
 8004ff0:	921f      	str	r2, [sp, #124]	; 0x7c
 8004ff2:	e784      	b.n	8004efe <_dtoa_r+0x246>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff8:	e7f4      	b.n	8004fe4 <_dtoa_r+0x32c>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	4699      	mov	r9, r3
 8005000:	461a      	mov	r2, r3
 8005002:	e7f5      	b.n	8004ff0 <_dtoa_r+0x338>
 8005004:	686a      	ldr	r2, [r5, #4]
 8005006:	0049      	lsls	r1, r1, #1
 8005008:	3201      	adds	r2, #1
 800500a:	606a      	str	r2, [r5, #4]
 800500c:	e77b      	b.n	8004f06 <_dtoa_r+0x24e>
 800500e:	2502      	movs	r5, #2
 8005010:	e7ac      	b.n	8004f6c <_dtoa_r+0x2b4>
 8005012:	07f1      	lsls	r1, r6, #31
 8005014:	d508      	bpl.n	8005028 <_dtoa_r+0x370>
 8005016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800501a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800501e:	f7fb fa57 	bl	80004d0 <__aeabi_dmul>
 8005022:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005026:	3501      	adds	r5, #1
 8005028:	1076      	asrs	r6, r6, #1
 800502a:	3708      	adds	r7, #8
 800502c:	e79f      	b.n	8004f6e <_dtoa_r+0x2b6>
 800502e:	f000 80a5 	beq.w	800517c <_dtoa_r+0x4c4>
 8005032:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005036:	f1cb 0600 	rsb	r6, fp, #0
 800503a:	4ba2      	ldr	r3, [pc, #648]	; (80052c4 <_dtoa_r+0x60c>)
 800503c:	f006 020f 	and.w	r2, r6, #15
 8005040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f7fb fa42 	bl	80004d0 <__aeabi_dmul>
 800504c:	2502      	movs	r5, #2
 800504e:	2300      	movs	r3, #0
 8005050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005054:	4f9c      	ldr	r7, [pc, #624]	; (80052c8 <_dtoa_r+0x610>)
 8005056:	1136      	asrs	r6, r6, #4
 8005058:	2e00      	cmp	r6, #0
 800505a:	f040 8084 	bne.w	8005166 <_dtoa_r+0x4ae>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d18d      	bne.n	8004f7e <_dtoa_r+0x2c6>
 8005062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 808b 	beq.w	8005180 <_dtoa_r+0x4c8>
 800506a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800506e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005076:	2200      	movs	r2, #0
 8005078:	4b94      	ldr	r3, [pc, #592]	; (80052cc <_dtoa_r+0x614>)
 800507a:	f7fb fc9b 	bl	80009b4 <__aeabi_dcmplt>
 800507e:	2800      	cmp	r0, #0
 8005080:	d07e      	beq.n	8005180 <_dtoa_r+0x4c8>
 8005082:	f1b9 0f00 	cmp.w	r9, #0
 8005086:	d07b      	beq.n	8005180 <_dtoa_r+0x4c8>
 8005088:	9b04      	ldr	r3, [sp, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	dd37      	ble.n	80050fe <_dtoa_r+0x446>
 800508e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005092:	2200      	movs	r2, #0
 8005094:	4b8e      	ldr	r3, [pc, #568]	; (80052d0 <_dtoa_r+0x618>)
 8005096:	f7fb fa1b 	bl	80004d0 <__aeabi_dmul>
 800509a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800509e:	9e04      	ldr	r6, [sp, #16]
 80050a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80050a4:	3501      	adds	r5, #1
 80050a6:	4628      	mov	r0, r5
 80050a8:	f7fb f9ac 	bl	8000404 <__aeabi_i2d>
 80050ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050b0:	f7fb fa0e 	bl	80004d0 <__aeabi_dmul>
 80050b4:	4b87      	ldr	r3, [pc, #540]	; (80052d4 <_dtoa_r+0x61c>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	f7fb f858 	bl	800016c <__adddf3>
 80050bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050c2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80050c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	d15c      	bne.n	8005186 <_dtoa_r+0x4ce>
 80050cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d0:	2200      	movs	r2, #0
 80050d2:	4b81      	ldr	r3, [pc, #516]	; (80052d8 <_dtoa_r+0x620>)
 80050d4:	f7fb f848 	bl	8000168 <__aeabi_dsub>
 80050d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050da:	462b      	mov	r3, r5
 80050dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e0:	f7fb fc86 	bl	80009f0 <__aeabi_dcmpgt>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	f040 82f7 	bne.w	80056d8 <_dtoa_r+0xa20>
 80050ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80050f4:	f7fb fc5e 	bl	80009b4 <__aeabi_dcmplt>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f040 82eb 	bne.w	80056d4 <_dtoa_r+0xa1c>
 80050fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005108:	2b00      	cmp	r3, #0
 800510a:	f2c0 8150 	blt.w	80053ae <_dtoa_r+0x6f6>
 800510e:	f1bb 0f0e 	cmp.w	fp, #14
 8005112:	f300 814c 	bgt.w	80053ae <_dtoa_r+0x6f6>
 8005116:	4b6b      	ldr	r3, [pc, #428]	; (80052c4 <_dtoa_r+0x60c>)
 8005118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005124:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005126:	2b00      	cmp	r3, #0
 8005128:	f280 80da 	bge.w	80052e0 <_dtoa_r+0x628>
 800512c:	f1b9 0f00 	cmp.w	r9, #0
 8005130:	f300 80d6 	bgt.w	80052e0 <_dtoa_r+0x628>
 8005134:	f040 82cd 	bne.w	80056d2 <_dtoa_r+0xa1a>
 8005138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800513c:	2200      	movs	r2, #0
 800513e:	4b66      	ldr	r3, [pc, #408]	; (80052d8 <_dtoa_r+0x620>)
 8005140:	f7fb f9c6 	bl	80004d0 <__aeabi_dmul>
 8005144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005148:	f7fb fc48 	bl	80009dc <__aeabi_dcmpge>
 800514c:	464e      	mov	r6, r9
 800514e:	464f      	mov	r7, r9
 8005150:	2800      	cmp	r0, #0
 8005152:	f040 82a4 	bne.w	800569e <_dtoa_r+0x9e6>
 8005156:	9b06      	ldr	r3, [sp, #24]
 8005158:	9a06      	ldr	r2, [sp, #24]
 800515a:	1c5d      	adds	r5, r3, #1
 800515c:	2331      	movs	r3, #49	; 0x31
 800515e:	f10b 0b01 	add.w	fp, fp, #1
 8005162:	7013      	strb	r3, [r2, #0]
 8005164:	e29f      	b.n	80056a6 <_dtoa_r+0x9ee>
 8005166:	07f2      	lsls	r2, r6, #31
 8005168:	d505      	bpl.n	8005176 <_dtoa_r+0x4be>
 800516a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800516e:	f7fb f9af 	bl	80004d0 <__aeabi_dmul>
 8005172:	2301      	movs	r3, #1
 8005174:	3501      	adds	r5, #1
 8005176:	1076      	asrs	r6, r6, #1
 8005178:	3708      	adds	r7, #8
 800517a:	e76d      	b.n	8005058 <_dtoa_r+0x3a0>
 800517c:	2502      	movs	r5, #2
 800517e:	e770      	b.n	8005062 <_dtoa_r+0x3aa>
 8005180:	465f      	mov	r7, fp
 8005182:	464e      	mov	r6, r9
 8005184:	e78f      	b.n	80050a6 <_dtoa_r+0x3ee>
 8005186:	9a06      	ldr	r2, [sp, #24]
 8005188:	4b4e      	ldr	r3, [pc, #312]	; (80052c4 <_dtoa_r+0x60c>)
 800518a:	4432      	add	r2, r6
 800518c:	9211      	str	r2, [sp, #68]	; 0x44
 800518e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005190:	1e71      	subs	r1, r6, #1
 8005192:	2a00      	cmp	r2, #0
 8005194:	d048      	beq.n	8005228 <_dtoa_r+0x570>
 8005196:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	2000      	movs	r0, #0
 80051a0:	494e      	ldr	r1, [pc, #312]	; (80052dc <_dtoa_r+0x624>)
 80051a2:	f7fb fabf 	bl	8000724 <__aeabi_ddiv>
 80051a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051aa:	f7fa ffdd 	bl	8000168 <__aeabi_dsub>
 80051ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80051b2:	9d06      	ldr	r5, [sp, #24]
 80051b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b8:	f7fb fc3a 	bl	8000a30 <__aeabi_d2iz>
 80051bc:	4606      	mov	r6, r0
 80051be:	f7fb f921 	bl	8000404 <__aeabi_i2d>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ca:	f7fa ffcd 	bl	8000168 <__aeabi_dsub>
 80051ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051d2:	3630      	adds	r6, #48	; 0x30
 80051d4:	f805 6b01 	strb.w	r6, [r5], #1
 80051d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051dc:	f7fb fbea 	bl	80009b4 <__aeabi_dcmplt>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d164      	bne.n	80052ae <_dtoa_r+0x5f6>
 80051e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051e8:	2000      	movs	r0, #0
 80051ea:	4938      	ldr	r1, [pc, #224]	; (80052cc <_dtoa_r+0x614>)
 80051ec:	f7fa ffbc 	bl	8000168 <__aeabi_dsub>
 80051f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051f4:	f7fb fbde 	bl	80009b4 <__aeabi_dcmplt>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f040 80b9 	bne.w	8005370 <_dtoa_r+0x6b8>
 80051fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005200:	429d      	cmp	r5, r3
 8005202:	f43f af7c 	beq.w	80050fe <_dtoa_r+0x446>
 8005206:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800520a:	2200      	movs	r2, #0
 800520c:	4b30      	ldr	r3, [pc, #192]	; (80052d0 <_dtoa_r+0x618>)
 800520e:	f7fb f95f 	bl	80004d0 <__aeabi_dmul>
 8005212:	2200      	movs	r2, #0
 8005214:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800521c:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <_dtoa_r+0x618>)
 800521e:	f7fb f957 	bl	80004d0 <__aeabi_dmul>
 8005222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005226:	e7c5      	b.n	80051b4 <_dtoa_r+0x4fc>
 8005228:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800522c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005230:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005234:	f7fb f94c 	bl	80004d0 <__aeabi_dmul>
 8005238:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800523c:	9d06      	ldr	r5, [sp, #24]
 800523e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005242:	f7fb fbf5 	bl	8000a30 <__aeabi_d2iz>
 8005246:	4606      	mov	r6, r0
 8005248:	f7fb f8dc 	bl	8000404 <__aeabi_i2d>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005254:	f7fa ff88 	bl	8000168 <__aeabi_dsub>
 8005258:	3630      	adds	r6, #48	; 0x30
 800525a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800525c:	f805 6b01 	strb.w	r6, [r5], #1
 8005260:	42ab      	cmp	r3, r5
 8005262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	d124      	bne.n	80052b6 <_dtoa_r+0x5fe>
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <_dtoa_r+0x624>)
 800526e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005272:	f7fa ff7b 	bl	800016c <__adddf3>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527e:	f7fb fbb7 	bl	80009f0 <__aeabi_dcmpgt>
 8005282:	2800      	cmp	r0, #0
 8005284:	d174      	bne.n	8005370 <_dtoa_r+0x6b8>
 8005286:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800528a:	2000      	movs	r0, #0
 800528c:	4913      	ldr	r1, [pc, #76]	; (80052dc <_dtoa_r+0x624>)
 800528e:	f7fa ff6b 	bl	8000168 <__aeabi_dsub>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800529a:	f7fb fb8b 	bl	80009b4 <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	f43f af2d 	beq.w	80050fe <_dtoa_r+0x446>
 80052a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052a8:	1e6a      	subs	r2, r5, #1
 80052aa:	2b30      	cmp	r3, #48	; 0x30
 80052ac:	d001      	beq.n	80052b2 <_dtoa_r+0x5fa>
 80052ae:	46bb      	mov	fp, r7
 80052b0:	e04d      	b.n	800534e <_dtoa_r+0x696>
 80052b2:	4615      	mov	r5, r2
 80052b4:	e7f6      	b.n	80052a4 <_dtoa_r+0x5ec>
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <_dtoa_r+0x618>)
 80052b8:	f7fb f90a 	bl	80004d0 <__aeabi_dmul>
 80052bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052c0:	e7bd      	b.n	800523e <_dtoa_r+0x586>
 80052c2:	bf00      	nop
 80052c4:	08006c08 	.word	0x08006c08
 80052c8:	08006be0 	.word	0x08006be0
 80052cc:	3ff00000 	.word	0x3ff00000
 80052d0:	40240000 	.word	0x40240000
 80052d4:	401c0000 	.word	0x401c0000
 80052d8:	40140000 	.word	0x40140000
 80052dc:	3fe00000 	.word	0x3fe00000
 80052e0:	9d06      	ldr	r5, [sp, #24]
 80052e2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fb fa19 	bl	8000724 <__aeabi_ddiv>
 80052f2:	f7fb fb9d 	bl	8000a30 <__aeabi_d2iz>
 80052f6:	4680      	mov	r8, r0
 80052f8:	f7fb f884 	bl	8000404 <__aeabi_i2d>
 80052fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005300:	f7fb f8e6 	bl	80004d0 <__aeabi_dmul>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4630      	mov	r0, r6
 800530a:	4639      	mov	r1, r7
 800530c:	f7fa ff2c 	bl	8000168 <__aeabi_dsub>
 8005310:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005314:	f805 6b01 	strb.w	r6, [r5], #1
 8005318:	9e06      	ldr	r6, [sp, #24]
 800531a:	4602      	mov	r2, r0
 800531c:	1bae      	subs	r6, r5, r6
 800531e:	45b1      	cmp	r9, r6
 8005320:	460b      	mov	r3, r1
 8005322:	d137      	bne.n	8005394 <_dtoa_r+0x6dc>
 8005324:	f7fa ff22 	bl	800016c <__adddf3>
 8005328:	4606      	mov	r6, r0
 800532a:	460f      	mov	r7, r1
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005334:	f7fb fb3e 	bl	80009b4 <__aeabi_dcmplt>
 8005338:	b9c8      	cbnz	r0, 800536e <_dtoa_r+0x6b6>
 800533a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800533e:	4632      	mov	r2, r6
 8005340:	463b      	mov	r3, r7
 8005342:	f7fb fb2d 	bl	80009a0 <__aeabi_dcmpeq>
 8005346:	b110      	cbz	r0, 800534e <_dtoa_r+0x696>
 8005348:	f018 0f01 	tst.w	r8, #1
 800534c:	d10f      	bne.n	800536e <_dtoa_r+0x6b6>
 800534e:	4651      	mov	r1, sl
 8005350:	4620      	mov	r0, r4
 8005352:	f000 fd01 	bl	8005d58 <_Bfree>
 8005356:	2300      	movs	r3, #0
 8005358:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800535a:	702b      	strb	r3, [r5, #0]
 800535c:	f10b 0301 	add.w	r3, fp, #1
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005364:	2b00      	cmp	r3, #0
 8005366:	f43f acec 	beq.w	8004d42 <_dtoa_r+0x8a>
 800536a:	601d      	str	r5, [r3, #0]
 800536c:	e4e9      	b.n	8004d42 <_dtoa_r+0x8a>
 800536e:	465f      	mov	r7, fp
 8005370:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005374:	1e6b      	subs	r3, r5, #1
 8005376:	2a39      	cmp	r2, #57	; 0x39
 8005378:	d106      	bne.n	8005388 <_dtoa_r+0x6d0>
 800537a:	9a06      	ldr	r2, [sp, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d107      	bne.n	8005390 <_dtoa_r+0x6d8>
 8005380:	2330      	movs	r3, #48	; 0x30
 8005382:	7013      	strb	r3, [r2, #0]
 8005384:	4613      	mov	r3, r2
 8005386:	3701      	adds	r7, #1
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	3201      	adds	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e78e      	b.n	80052ae <_dtoa_r+0x5f6>
 8005390:	461d      	mov	r5, r3
 8005392:	e7ed      	b.n	8005370 <_dtoa_r+0x6b8>
 8005394:	2200      	movs	r2, #0
 8005396:	4bb5      	ldr	r3, [pc, #724]	; (800566c <_dtoa_r+0x9b4>)
 8005398:	f7fb f89a 	bl	80004d0 <__aeabi_dmul>
 800539c:	2200      	movs	r2, #0
 800539e:	2300      	movs	r3, #0
 80053a0:	4606      	mov	r6, r0
 80053a2:	460f      	mov	r7, r1
 80053a4:	f7fb fafc 	bl	80009a0 <__aeabi_dcmpeq>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d09c      	beq.n	80052e6 <_dtoa_r+0x62e>
 80053ac:	e7cf      	b.n	800534e <_dtoa_r+0x696>
 80053ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b0:	2a00      	cmp	r2, #0
 80053b2:	f000 8129 	beq.w	8005608 <_dtoa_r+0x950>
 80053b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80053b8:	2a01      	cmp	r2, #1
 80053ba:	f300 810e 	bgt.w	80055da <_dtoa_r+0x922>
 80053be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	f000 8106 	beq.w	80055d2 <_dtoa_r+0x91a>
 80053c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053ca:	4645      	mov	r5, r8
 80053cc:	9e08      	ldr	r6, [sp, #32]
 80053ce:	9a07      	ldr	r2, [sp, #28]
 80053d0:	2101      	movs	r1, #1
 80053d2:	441a      	add	r2, r3
 80053d4:	4620      	mov	r0, r4
 80053d6:	4498      	add	r8, r3
 80053d8:	9207      	str	r2, [sp, #28]
 80053da:	f000 fd5d 	bl	8005e98 <__i2b>
 80053de:	4607      	mov	r7, r0
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	dd0b      	ble.n	80053fc <_dtoa_r+0x744>
 80053e4:	9b07      	ldr	r3, [sp, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	dd08      	ble.n	80053fc <_dtoa_r+0x744>
 80053ea:	42ab      	cmp	r3, r5
 80053ec:	bfa8      	it	ge
 80053ee:	462b      	movge	r3, r5
 80053f0:	9a07      	ldr	r2, [sp, #28]
 80053f2:	eba8 0803 	sub.w	r8, r8, r3
 80053f6:	1aed      	subs	r5, r5, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	9307      	str	r3, [sp, #28]
 80053fc:	9b08      	ldr	r3, [sp, #32]
 80053fe:	b1fb      	cbz	r3, 8005440 <_dtoa_r+0x788>
 8005400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8104 	beq.w	8005610 <_dtoa_r+0x958>
 8005408:	2e00      	cmp	r6, #0
 800540a:	dd11      	ble.n	8005430 <_dtoa_r+0x778>
 800540c:	4639      	mov	r1, r7
 800540e:	4632      	mov	r2, r6
 8005410:	4620      	mov	r0, r4
 8005412:	f000 fdd7 	bl	8005fc4 <__pow5mult>
 8005416:	4652      	mov	r2, sl
 8005418:	4601      	mov	r1, r0
 800541a:	4607      	mov	r7, r0
 800541c:	4620      	mov	r0, r4
 800541e:	f000 fd44 	bl	8005eaa <__multiply>
 8005422:	4651      	mov	r1, sl
 8005424:	900a      	str	r0, [sp, #40]	; 0x28
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fc96 	bl	8005d58 <_Bfree>
 800542c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800542e:	469a      	mov	sl, r3
 8005430:	9b08      	ldr	r3, [sp, #32]
 8005432:	1b9a      	subs	r2, r3, r6
 8005434:	d004      	beq.n	8005440 <_dtoa_r+0x788>
 8005436:	4651      	mov	r1, sl
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fdc3 	bl	8005fc4 <__pow5mult>
 800543e:	4682      	mov	sl, r0
 8005440:	2101      	movs	r1, #1
 8005442:	4620      	mov	r0, r4
 8005444:	f000 fd28 	bl	8005e98 <__i2b>
 8005448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800544a:	4606      	mov	r6, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	f340 80e1 	ble.w	8005614 <_dtoa_r+0x95c>
 8005452:	461a      	mov	r2, r3
 8005454:	4601      	mov	r1, r0
 8005456:	4620      	mov	r0, r4
 8005458:	f000 fdb4 	bl	8005fc4 <__pow5mult>
 800545c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800545e:	4606      	mov	r6, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	f340 80da 	ble.w	800561a <_dtoa_r+0x962>
 8005466:	2300      	movs	r3, #0
 8005468:	9308      	str	r3, [sp, #32]
 800546a:	6933      	ldr	r3, [r6, #16]
 800546c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005470:	6918      	ldr	r0, [r3, #16]
 8005472:	f000 fcc3 	bl	8005dfc <__hi0bits>
 8005476:	f1c0 0020 	rsb	r0, r0, #32
 800547a:	9b07      	ldr	r3, [sp, #28]
 800547c:	4418      	add	r0, r3
 800547e:	f010 001f 	ands.w	r0, r0, #31
 8005482:	f000 80f0 	beq.w	8005666 <_dtoa_r+0x9ae>
 8005486:	f1c0 0320 	rsb	r3, r0, #32
 800548a:	2b04      	cmp	r3, #4
 800548c:	f340 80e2 	ble.w	8005654 <_dtoa_r+0x99c>
 8005490:	9b07      	ldr	r3, [sp, #28]
 8005492:	f1c0 001c 	rsb	r0, r0, #28
 8005496:	4480      	add	r8, r0
 8005498:	4405      	add	r5, r0
 800549a:	4403      	add	r3, r0
 800549c:	9307      	str	r3, [sp, #28]
 800549e:	f1b8 0f00 	cmp.w	r8, #0
 80054a2:	dd05      	ble.n	80054b0 <_dtoa_r+0x7f8>
 80054a4:	4651      	mov	r1, sl
 80054a6:	4642      	mov	r2, r8
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fdd9 	bl	8006060 <__lshift>
 80054ae:	4682      	mov	sl, r0
 80054b0:	9b07      	ldr	r3, [sp, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd05      	ble.n	80054c2 <_dtoa_r+0x80a>
 80054b6:	4631      	mov	r1, r6
 80054b8:	461a      	mov	r2, r3
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fdd0 	bl	8006060 <__lshift>
 80054c0:	4606      	mov	r6, r0
 80054c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80d3 	beq.w	8005670 <_dtoa_r+0x9b8>
 80054ca:	4631      	mov	r1, r6
 80054cc:	4650      	mov	r0, sl
 80054ce:	f000 fe18 	bl	8006102 <__mcmp>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f280 80cc 	bge.w	8005670 <_dtoa_r+0x9b8>
 80054d8:	2300      	movs	r3, #0
 80054da:	4651      	mov	r1, sl
 80054dc:	220a      	movs	r2, #10
 80054de:	4620      	mov	r0, r4
 80054e0:	f000 fc51 	bl	8005d86 <__multadd>
 80054e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054ea:	4682      	mov	sl, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 81a9 	beq.w	8005844 <_dtoa_r+0xb8c>
 80054f2:	2300      	movs	r3, #0
 80054f4:	4639      	mov	r1, r7
 80054f6:	220a      	movs	r2, #10
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 fc44 	bl	8005d86 <__multadd>
 80054fe:	9b04      	ldr	r3, [sp, #16]
 8005500:	4607      	mov	r7, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	dc03      	bgt.n	800550e <_dtoa_r+0x856>
 8005506:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005508:	2b02      	cmp	r3, #2
 800550a:	f300 80b9 	bgt.w	8005680 <_dtoa_r+0x9c8>
 800550e:	2d00      	cmp	r5, #0
 8005510:	dd05      	ble.n	800551e <_dtoa_r+0x866>
 8005512:	4639      	mov	r1, r7
 8005514:	462a      	mov	r2, r5
 8005516:	4620      	mov	r0, r4
 8005518:	f000 fda2 	bl	8006060 <__lshift>
 800551c:	4607      	mov	r7, r0
 800551e:	9b08      	ldr	r3, [sp, #32]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8110 	beq.w	8005746 <_dtoa_r+0xa8e>
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4620      	mov	r0, r4
 800552a:	f000 fbe1 	bl	8005cf0 <_Balloc>
 800552e:	4605      	mov	r5, r0
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	f107 010c 	add.w	r1, r7, #12
 8005536:	3202      	adds	r2, #2
 8005538:	0092      	lsls	r2, r2, #2
 800553a:	300c      	adds	r0, #12
 800553c:	f000 fbc0 	bl	8005cc0 <memcpy>
 8005540:	2201      	movs	r2, #1
 8005542:	4629      	mov	r1, r5
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fd8b 	bl	8006060 <__lshift>
 800554a:	9707      	str	r7, [sp, #28]
 800554c:	4607      	mov	r7, r0
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	9308      	str	r3, [sp, #32]
 800555a:	4631      	mov	r1, r6
 800555c:	4650      	mov	r0, sl
 800555e:	f7ff fb1d 	bl	8004b9c <quorem>
 8005562:	9907      	ldr	r1, [sp, #28]
 8005564:	4605      	mov	r5, r0
 8005566:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800556a:	4650      	mov	r0, sl
 800556c:	f000 fdc9 	bl	8006102 <__mcmp>
 8005570:	463a      	mov	r2, r7
 8005572:	9002      	str	r0, [sp, #8]
 8005574:	4631      	mov	r1, r6
 8005576:	4620      	mov	r0, r4
 8005578:	f000 fddd 	bl	8006136 <__mdiff>
 800557c:	68c3      	ldr	r3, [r0, #12]
 800557e:	4602      	mov	r2, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 80e2 	bne.w	800574a <_dtoa_r+0xa92>
 8005586:	4601      	mov	r1, r0
 8005588:	9009      	str	r0, [sp, #36]	; 0x24
 800558a:	4650      	mov	r0, sl
 800558c:	f000 fdb9 	bl	8006102 <__mcmp>
 8005590:	4603      	mov	r3, r0
 8005592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005594:	4611      	mov	r1, r2
 8005596:	4620      	mov	r0, r4
 8005598:	9309      	str	r3, [sp, #36]	; 0x24
 800559a:	f000 fbdd 	bl	8005d58 <_Bfree>
 800559e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 80d4 	bne.w	800574e <_dtoa_r+0xa96>
 80055a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	f040 80d0 	bne.w	800574e <_dtoa_r+0xa96>
 80055ae:	9a08      	ldr	r2, [sp, #32]
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	f040 80cc 	bne.w	800574e <_dtoa_r+0xa96>
 80055b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055ba:	f000 80e8 	beq.w	800578e <_dtoa_r+0xad6>
 80055be:	9b02      	ldr	r3, [sp, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dd01      	ble.n	80055c8 <_dtoa_r+0x910>
 80055c4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80055c8:	f108 0501 	add.w	r5, r8, #1
 80055cc:	f888 9000 	strb.w	r9, [r8]
 80055d0:	e06b      	b.n	80056aa <_dtoa_r+0x9f2>
 80055d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055d4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055d8:	e6f7      	b.n	80053ca <_dtoa_r+0x712>
 80055da:	9b08      	ldr	r3, [sp, #32]
 80055dc:	f109 36ff 	add.w	r6, r9, #4294967295
 80055e0:	42b3      	cmp	r3, r6
 80055e2:	bfb7      	itett	lt
 80055e4:	9b08      	ldrlt	r3, [sp, #32]
 80055e6:	1b9e      	subge	r6, r3, r6
 80055e8:	1af2      	sublt	r2, r6, r3
 80055ea:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80055ec:	bfbf      	itttt	lt
 80055ee:	9608      	strlt	r6, [sp, #32]
 80055f0:	189b      	addlt	r3, r3, r2
 80055f2:	930c      	strlt	r3, [sp, #48]	; 0x30
 80055f4:	2600      	movlt	r6, #0
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	bfb9      	ittee	lt
 80055fc:	eba8 0509 	sublt.w	r5, r8, r9
 8005600:	2300      	movlt	r3, #0
 8005602:	4645      	movge	r5, r8
 8005604:	464b      	movge	r3, r9
 8005606:	e6e2      	b.n	80053ce <_dtoa_r+0x716>
 8005608:	9e08      	ldr	r6, [sp, #32]
 800560a:	4645      	mov	r5, r8
 800560c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800560e:	e6e7      	b.n	80053e0 <_dtoa_r+0x728>
 8005610:	9a08      	ldr	r2, [sp, #32]
 8005612:	e710      	b.n	8005436 <_dtoa_r+0x77e>
 8005614:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005616:	2b01      	cmp	r3, #1
 8005618:	dc18      	bgt.n	800564c <_dtoa_r+0x994>
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	b9b3      	cbnz	r3, 800564c <_dtoa_r+0x994>
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005624:	b9a3      	cbnz	r3, 8005650 <_dtoa_r+0x998>
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800562c:	0d1b      	lsrs	r3, r3, #20
 800562e:	051b      	lsls	r3, r3, #20
 8005630:	b12b      	cbz	r3, 800563e <_dtoa_r+0x986>
 8005632:	9b07      	ldr	r3, [sp, #28]
 8005634:	f108 0801 	add.w	r8, r8, #1
 8005638:	3301      	adds	r3, #1
 800563a:	9307      	str	r3, [sp, #28]
 800563c:	2301      	movs	r3, #1
 800563e:	9308      	str	r3, [sp, #32]
 8005640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005642:	2b00      	cmp	r3, #0
 8005644:	f47f af11 	bne.w	800546a <_dtoa_r+0x7b2>
 8005648:	2001      	movs	r0, #1
 800564a:	e716      	b.n	800547a <_dtoa_r+0x7c2>
 800564c:	2300      	movs	r3, #0
 800564e:	e7f6      	b.n	800563e <_dtoa_r+0x986>
 8005650:	9b02      	ldr	r3, [sp, #8]
 8005652:	e7f4      	b.n	800563e <_dtoa_r+0x986>
 8005654:	f43f af23 	beq.w	800549e <_dtoa_r+0x7e6>
 8005658:	9a07      	ldr	r2, [sp, #28]
 800565a:	331c      	adds	r3, #28
 800565c:	441a      	add	r2, r3
 800565e:	4498      	add	r8, r3
 8005660:	441d      	add	r5, r3
 8005662:	4613      	mov	r3, r2
 8005664:	e71a      	b.n	800549c <_dtoa_r+0x7e4>
 8005666:	4603      	mov	r3, r0
 8005668:	e7f6      	b.n	8005658 <_dtoa_r+0x9a0>
 800566a:	bf00      	nop
 800566c:	40240000 	.word	0x40240000
 8005670:	f1b9 0f00 	cmp.w	r9, #0
 8005674:	dc33      	bgt.n	80056de <_dtoa_r+0xa26>
 8005676:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005678:	2b02      	cmp	r3, #2
 800567a:	dd30      	ble.n	80056de <_dtoa_r+0xa26>
 800567c:	f8cd 9010 	str.w	r9, [sp, #16]
 8005680:	9b04      	ldr	r3, [sp, #16]
 8005682:	b963      	cbnz	r3, 800569e <_dtoa_r+0x9e6>
 8005684:	4631      	mov	r1, r6
 8005686:	2205      	movs	r2, #5
 8005688:	4620      	mov	r0, r4
 800568a:	f000 fb7c 	bl	8005d86 <__multadd>
 800568e:	4601      	mov	r1, r0
 8005690:	4606      	mov	r6, r0
 8005692:	4650      	mov	r0, sl
 8005694:	f000 fd35 	bl	8006102 <__mcmp>
 8005698:	2800      	cmp	r0, #0
 800569a:	f73f ad5c 	bgt.w	8005156 <_dtoa_r+0x49e>
 800569e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056a0:	9d06      	ldr	r5, [sp, #24]
 80056a2:	ea6f 0b03 	mvn.w	fp, r3
 80056a6:	2300      	movs	r3, #0
 80056a8:	9307      	str	r3, [sp, #28]
 80056aa:	4631      	mov	r1, r6
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 fb53 	bl	8005d58 <_Bfree>
 80056b2:	2f00      	cmp	r7, #0
 80056b4:	f43f ae4b 	beq.w	800534e <_dtoa_r+0x696>
 80056b8:	9b07      	ldr	r3, [sp, #28]
 80056ba:	b12b      	cbz	r3, 80056c8 <_dtoa_r+0xa10>
 80056bc:	42bb      	cmp	r3, r7
 80056be:	d003      	beq.n	80056c8 <_dtoa_r+0xa10>
 80056c0:	4619      	mov	r1, r3
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fb48 	bl	8005d58 <_Bfree>
 80056c8:	4639      	mov	r1, r7
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 fb44 	bl	8005d58 <_Bfree>
 80056d0:	e63d      	b.n	800534e <_dtoa_r+0x696>
 80056d2:	2600      	movs	r6, #0
 80056d4:	4637      	mov	r7, r6
 80056d6:	e7e2      	b.n	800569e <_dtoa_r+0x9e6>
 80056d8:	46bb      	mov	fp, r7
 80056da:	4637      	mov	r7, r6
 80056dc:	e53b      	b.n	8005156 <_dtoa_r+0x49e>
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f47f af12 	bne.w	800550e <_dtoa_r+0x856>
 80056ea:	9d06      	ldr	r5, [sp, #24]
 80056ec:	4631      	mov	r1, r6
 80056ee:	4650      	mov	r0, sl
 80056f0:	f7ff fa54 	bl	8004b9c <quorem>
 80056f4:	9b06      	ldr	r3, [sp, #24]
 80056f6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056fa:	f805 9b01 	strb.w	r9, [r5], #1
 80056fe:	9a04      	ldr	r2, [sp, #16]
 8005700:	1aeb      	subs	r3, r5, r3
 8005702:	429a      	cmp	r2, r3
 8005704:	f300 8081 	bgt.w	800580a <_dtoa_r+0xb52>
 8005708:	9b06      	ldr	r3, [sp, #24]
 800570a:	2a01      	cmp	r2, #1
 800570c:	bfac      	ite	ge
 800570e:	189b      	addge	r3, r3, r2
 8005710:	3301      	addlt	r3, #1
 8005712:	4698      	mov	r8, r3
 8005714:	2300      	movs	r3, #0
 8005716:	9307      	str	r3, [sp, #28]
 8005718:	4651      	mov	r1, sl
 800571a:	2201      	movs	r2, #1
 800571c:	4620      	mov	r0, r4
 800571e:	f000 fc9f 	bl	8006060 <__lshift>
 8005722:	4631      	mov	r1, r6
 8005724:	4682      	mov	sl, r0
 8005726:	f000 fcec 	bl	8006102 <__mcmp>
 800572a:	2800      	cmp	r0, #0
 800572c:	dc34      	bgt.n	8005798 <_dtoa_r+0xae0>
 800572e:	d102      	bne.n	8005736 <_dtoa_r+0xa7e>
 8005730:	f019 0f01 	tst.w	r9, #1
 8005734:	d130      	bne.n	8005798 <_dtoa_r+0xae0>
 8005736:	4645      	mov	r5, r8
 8005738:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800573c:	1e6a      	subs	r2, r5, #1
 800573e:	2b30      	cmp	r3, #48	; 0x30
 8005740:	d1b3      	bne.n	80056aa <_dtoa_r+0x9f2>
 8005742:	4615      	mov	r5, r2
 8005744:	e7f8      	b.n	8005738 <_dtoa_r+0xa80>
 8005746:	4638      	mov	r0, r7
 8005748:	e6ff      	b.n	800554a <_dtoa_r+0x892>
 800574a:	2301      	movs	r3, #1
 800574c:	e722      	b.n	8005594 <_dtoa_r+0x8dc>
 800574e:	9a02      	ldr	r2, [sp, #8]
 8005750:	2a00      	cmp	r2, #0
 8005752:	db04      	blt.n	800575e <_dtoa_r+0xaa6>
 8005754:	d128      	bne.n	80057a8 <_dtoa_r+0xaf0>
 8005756:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005758:	bb32      	cbnz	r2, 80057a8 <_dtoa_r+0xaf0>
 800575a:	9a08      	ldr	r2, [sp, #32]
 800575c:	bb22      	cbnz	r2, 80057a8 <_dtoa_r+0xaf0>
 800575e:	2b00      	cmp	r3, #0
 8005760:	f77f af32 	ble.w	80055c8 <_dtoa_r+0x910>
 8005764:	4651      	mov	r1, sl
 8005766:	2201      	movs	r2, #1
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fc79 	bl	8006060 <__lshift>
 800576e:	4631      	mov	r1, r6
 8005770:	4682      	mov	sl, r0
 8005772:	f000 fcc6 	bl	8006102 <__mcmp>
 8005776:	2800      	cmp	r0, #0
 8005778:	dc05      	bgt.n	8005786 <_dtoa_r+0xace>
 800577a:	f47f af25 	bne.w	80055c8 <_dtoa_r+0x910>
 800577e:	f019 0f01 	tst.w	r9, #1
 8005782:	f43f af21 	beq.w	80055c8 <_dtoa_r+0x910>
 8005786:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800578a:	f47f af1b 	bne.w	80055c4 <_dtoa_r+0x90c>
 800578e:	2339      	movs	r3, #57	; 0x39
 8005790:	f108 0801 	add.w	r8, r8, #1
 8005794:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005798:	4645      	mov	r5, r8
 800579a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800579e:	1e6a      	subs	r2, r5, #1
 80057a0:	2b39      	cmp	r3, #57	; 0x39
 80057a2:	d03a      	beq.n	800581a <_dtoa_r+0xb62>
 80057a4:	3301      	adds	r3, #1
 80057a6:	e03f      	b.n	8005828 <_dtoa_r+0xb70>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f108 0501 	add.w	r5, r8, #1
 80057ae:	dd05      	ble.n	80057bc <_dtoa_r+0xb04>
 80057b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057b4:	d0eb      	beq.n	800578e <_dtoa_r+0xad6>
 80057b6:	f109 0901 	add.w	r9, r9, #1
 80057ba:	e707      	b.n	80055cc <_dtoa_r+0x914>
 80057bc:	9b06      	ldr	r3, [sp, #24]
 80057be:	9a04      	ldr	r2, [sp, #16]
 80057c0:	1aeb      	subs	r3, r5, r3
 80057c2:	4293      	cmp	r3, r2
 80057c4:	46a8      	mov	r8, r5
 80057c6:	f805 9c01 	strb.w	r9, [r5, #-1]
 80057ca:	d0a5      	beq.n	8005718 <_dtoa_r+0xa60>
 80057cc:	4651      	mov	r1, sl
 80057ce:	2300      	movs	r3, #0
 80057d0:	220a      	movs	r2, #10
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fad7 	bl	8005d86 <__multadd>
 80057d8:	9b07      	ldr	r3, [sp, #28]
 80057da:	4682      	mov	sl, r0
 80057dc:	42bb      	cmp	r3, r7
 80057de:	f04f 020a 	mov.w	r2, #10
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	9907      	ldr	r1, [sp, #28]
 80057e8:	4620      	mov	r0, r4
 80057ea:	d104      	bne.n	80057f6 <_dtoa_r+0xb3e>
 80057ec:	f000 facb 	bl	8005d86 <__multadd>
 80057f0:	9007      	str	r0, [sp, #28]
 80057f2:	4607      	mov	r7, r0
 80057f4:	e6b1      	b.n	800555a <_dtoa_r+0x8a2>
 80057f6:	f000 fac6 	bl	8005d86 <__multadd>
 80057fa:	2300      	movs	r3, #0
 80057fc:	9007      	str	r0, [sp, #28]
 80057fe:	220a      	movs	r2, #10
 8005800:	4639      	mov	r1, r7
 8005802:	4620      	mov	r0, r4
 8005804:	f000 fabf 	bl	8005d86 <__multadd>
 8005808:	e7f3      	b.n	80057f2 <_dtoa_r+0xb3a>
 800580a:	4651      	mov	r1, sl
 800580c:	2300      	movs	r3, #0
 800580e:	220a      	movs	r2, #10
 8005810:	4620      	mov	r0, r4
 8005812:	f000 fab8 	bl	8005d86 <__multadd>
 8005816:	4682      	mov	sl, r0
 8005818:	e768      	b.n	80056ec <_dtoa_r+0xa34>
 800581a:	9b06      	ldr	r3, [sp, #24]
 800581c:	4293      	cmp	r3, r2
 800581e:	d105      	bne.n	800582c <_dtoa_r+0xb74>
 8005820:	2331      	movs	r3, #49	; 0x31
 8005822:	9a06      	ldr	r2, [sp, #24]
 8005824:	f10b 0b01 	add.w	fp, fp, #1
 8005828:	7013      	strb	r3, [r2, #0]
 800582a:	e73e      	b.n	80056aa <_dtoa_r+0x9f2>
 800582c:	4615      	mov	r5, r2
 800582e:	e7b4      	b.n	800579a <_dtoa_r+0xae2>
 8005830:	4b09      	ldr	r3, [pc, #36]	; (8005858 <_dtoa_r+0xba0>)
 8005832:	f7ff baa3 	b.w	8004d7c <_dtoa_r+0xc4>
 8005836:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005838:	2b00      	cmp	r3, #0
 800583a:	f47f aa7d 	bne.w	8004d38 <_dtoa_r+0x80>
 800583e:	4b07      	ldr	r3, [pc, #28]	; (800585c <_dtoa_r+0xba4>)
 8005840:	f7ff ba9c 	b.w	8004d7c <_dtoa_r+0xc4>
 8005844:	9b04      	ldr	r3, [sp, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f73f af4f 	bgt.w	80056ea <_dtoa_r+0xa32>
 800584c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800584e:	2b02      	cmp	r3, #2
 8005850:	f77f af4b 	ble.w	80056ea <_dtoa_r+0xa32>
 8005854:	e714      	b.n	8005680 <_dtoa_r+0x9c8>
 8005856:	bf00      	nop
 8005858:	08006baa 	.word	0x08006baa
 800585c:	08006bcc 	.word	0x08006bcc

08005860 <_localeconv_r>:
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <_localeconv_r+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a18      	ldr	r0, [r3, #32]
 8005866:	4b04      	ldr	r3, [pc, #16]	; (8005878 <_localeconv_r+0x18>)
 8005868:	2800      	cmp	r0, #0
 800586a:	bf08      	it	eq
 800586c:	4618      	moveq	r0, r3
 800586e:	30f0      	adds	r0, #240	; 0xf0
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2000000c 	.word	0x2000000c
 8005878:	20000510 	.word	0x20000510

0800587c <malloc>:
 800587c:	4b02      	ldr	r3, [pc, #8]	; (8005888 <malloc+0xc>)
 800587e:	4601      	mov	r1, r0
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	f000 b803 	b.w	800588c <_malloc_r>
 8005886:	bf00      	nop
 8005888:	2000000c 	.word	0x2000000c

0800588c <_malloc_r>:
 800588c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	f101 040b 	add.w	r4, r1, #11
 8005894:	2c16      	cmp	r4, #22
 8005896:	4681      	mov	r9, r0
 8005898:	d907      	bls.n	80058aa <_malloc_r+0x1e>
 800589a:	f034 0407 	bics.w	r4, r4, #7
 800589e:	d505      	bpl.n	80058ac <_malloc_r+0x20>
 80058a0:	230c      	movs	r3, #12
 80058a2:	f8c9 3000 	str.w	r3, [r9]
 80058a6:	2600      	movs	r6, #0
 80058a8:	e131      	b.n	8005b0e <_malloc_r+0x282>
 80058aa:	2410      	movs	r4, #16
 80058ac:	428c      	cmp	r4, r1
 80058ae:	d3f7      	bcc.n	80058a0 <_malloc_r+0x14>
 80058b0:	4648      	mov	r0, r9
 80058b2:	f000 fa11 	bl	8005cd8 <__malloc_lock>
 80058b6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80058ba:	4d9b      	ldr	r5, [pc, #620]	; (8005b28 <_malloc_r+0x29c>)
 80058bc:	d236      	bcs.n	800592c <_malloc_r+0xa0>
 80058be:	f104 0208 	add.w	r2, r4, #8
 80058c2:	442a      	add	r2, r5
 80058c4:	6856      	ldr	r6, [r2, #4]
 80058c6:	f1a2 0108 	sub.w	r1, r2, #8
 80058ca:	428e      	cmp	r6, r1
 80058cc:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80058d0:	d102      	bne.n	80058d8 <_malloc_r+0x4c>
 80058d2:	68d6      	ldr	r6, [r2, #12]
 80058d4:	42b2      	cmp	r2, r6
 80058d6:	d010      	beq.n	80058fa <_malloc_r+0x6e>
 80058d8:	6873      	ldr	r3, [r6, #4]
 80058da:	68f2      	ldr	r2, [r6, #12]
 80058dc:	68b1      	ldr	r1, [r6, #8]
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	60ca      	str	r2, [r1, #12]
 80058e4:	4433      	add	r3, r6
 80058e6:	6091      	str	r1, [r2, #8]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	4648      	mov	r0, r9
 80058f2:	f000 f9f7 	bl	8005ce4 <__malloc_unlock>
 80058f6:	3608      	adds	r6, #8
 80058f8:	e109      	b.n	8005b0e <_malloc_r+0x282>
 80058fa:	3302      	adds	r3, #2
 80058fc:	4a8b      	ldr	r2, [pc, #556]	; (8005b2c <_malloc_r+0x2a0>)
 80058fe:	692e      	ldr	r6, [r5, #16]
 8005900:	4611      	mov	r1, r2
 8005902:	4296      	cmp	r6, r2
 8005904:	d06d      	beq.n	80059e2 <_malloc_r+0x156>
 8005906:	6870      	ldr	r0, [r6, #4]
 8005908:	f020 0003 	bic.w	r0, r0, #3
 800590c:	1b07      	subs	r7, r0, r4
 800590e:	2f0f      	cmp	r7, #15
 8005910:	dd47      	ble.n	80059a2 <_malloc_r+0x116>
 8005912:	1933      	adds	r3, r6, r4
 8005914:	f044 0401 	orr.w	r4, r4, #1
 8005918:	6074      	str	r4, [r6, #4]
 800591a:	616b      	str	r3, [r5, #20]
 800591c:	612b      	str	r3, [r5, #16]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	f047 0201 	orr.w	r2, r7, #1
 8005926:	605a      	str	r2, [r3, #4]
 8005928:	5037      	str	r7, [r6, r0]
 800592a:	e7e1      	b.n	80058f0 <_malloc_r+0x64>
 800592c:	0a63      	lsrs	r3, r4, #9
 800592e:	d02a      	beq.n	8005986 <_malloc_r+0xfa>
 8005930:	2b04      	cmp	r3, #4
 8005932:	d812      	bhi.n	800595a <_malloc_r+0xce>
 8005934:	09a3      	lsrs	r3, r4, #6
 8005936:	3338      	adds	r3, #56	; 0x38
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800593e:	6856      	ldr	r6, [r2, #4]
 8005940:	f1a2 0008 	sub.w	r0, r2, #8
 8005944:	4286      	cmp	r6, r0
 8005946:	d006      	beq.n	8005956 <_malloc_r+0xca>
 8005948:	6872      	ldr	r2, [r6, #4]
 800594a:	f022 0203 	bic.w	r2, r2, #3
 800594e:	1b11      	subs	r1, r2, r4
 8005950:	290f      	cmp	r1, #15
 8005952:	dd1c      	ble.n	800598e <_malloc_r+0x102>
 8005954:	3b01      	subs	r3, #1
 8005956:	3301      	adds	r3, #1
 8005958:	e7d0      	b.n	80058fc <_malloc_r+0x70>
 800595a:	2b14      	cmp	r3, #20
 800595c:	d801      	bhi.n	8005962 <_malloc_r+0xd6>
 800595e:	335b      	adds	r3, #91	; 0x5b
 8005960:	e7ea      	b.n	8005938 <_malloc_r+0xac>
 8005962:	2b54      	cmp	r3, #84	; 0x54
 8005964:	d802      	bhi.n	800596c <_malloc_r+0xe0>
 8005966:	0b23      	lsrs	r3, r4, #12
 8005968:	336e      	adds	r3, #110	; 0x6e
 800596a:	e7e5      	b.n	8005938 <_malloc_r+0xac>
 800596c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005970:	d802      	bhi.n	8005978 <_malloc_r+0xec>
 8005972:	0be3      	lsrs	r3, r4, #15
 8005974:	3377      	adds	r3, #119	; 0x77
 8005976:	e7df      	b.n	8005938 <_malloc_r+0xac>
 8005978:	f240 5254 	movw	r2, #1364	; 0x554
 800597c:	4293      	cmp	r3, r2
 800597e:	d804      	bhi.n	800598a <_malloc_r+0xfe>
 8005980:	0ca3      	lsrs	r3, r4, #18
 8005982:	337c      	adds	r3, #124	; 0x7c
 8005984:	e7d8      	b.n	8005938 <_malloc_r+0xac>
 8005986:	233f      	movs	r3, #63	; 0x3f
 8005988:	e7d6      	b.n	8005938 <_malloc_r+0xac>
 800598a:	237e      	movs	r3, #126	; 0x7e
 800598c:	e7d4      	b.n	8005938 <_malloc_r+0xac>
 800598e:	2900      	cmp	r1, #0
 8005990:	68f1      	ldr	r1, [r6, #12]
 8005992:	db04      	blt.n	800599e <_malloc_r+0x112>
 8005994:	68b3      	ldr	r3, [r6, #8]
 8005996:	60d9      	str	r1, [r3, #12]
 8005998:	608b      	str	r3, [r1, #8]
 800599a:	18b3      	adds	r3, r6, r2
 800599c:	e7a4      	b.n	80058e8 <_malloc_r+0x5c>
 800599e:	460e      	mov	r6, r1
 80059a0:	e7d0      	b.n	8005944 <_malloc_r+0xb8>
 80059a2:	2f00      	cmp	r7, #0
 80059a4:	616a      	str	r2, [r5, #20]
 80059a6:	612a      	str	r2, [r5, #16]
 80059a8:	db05      	blt.n	80059b6 <_malloc_r+0x12a>
 80059aa:	4430      	add	r0, r6
 80059ac:	6843      	ldr	r3, [r0, #4]
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6043      	str	r3, [r0, #4]
 80059b4:	e79c      	b.n	80058f0 <_malloc_r+0x64>
 80059b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80059ba:	d244      	bcs.n	8005a46 <_malloc_r+0x1ba>
 80059bc:	2201      	movs	r2, #1
 80059be:	08c0      	lsrs	r0, r0, #3
 80059c0:	1087      	asrs	r7, r0, #2
 80059c2:	fa02 f707 	lsl.w	r7, r2, r7
 80059c6:	686a      	ldr	r2, [r5, #4]
 80059c8:	3001      	adds	r0, #1
 80059ca:	433a      	orrs	r2, r7
 80059cc:	606a      	str	r2, [r5, #4]
 80059ce:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80059d2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80059d6:	3a08      	subs	r2, #8
 80059d8:	60f2      	str	r2, [r6, #12]
 80059da:	60b7      	str	r7, [r6, #8]
 80059dc:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80059e0:	60fe      	str	r6, [r7, #12]
 80059e2:	2001      	movs	r0, #1
 80059e4:	109a      	asrs	r2, r3, #2
 80059e6:	fa00 f202 	lsl.w	r2, r0, r2
 80059ea:	6868      	ldr	r0, [r5, #4]
 80059ec:	4282      	cmp	r2, r0
 80059ee:	f200 809f 	bhi.w	8005b30 <_malloc_r+0x2a4>
 80059f2:	4202      	tst	r2, r0
 80059f4:	d106      	bne.n	8005a04 <_malloc_r+0x178>
 80059f6:	f023 0303 	bic.w	r3, r3, #3
 80059fa:	0052      	lsls	r2, r2, #1
 80059fc:	4202      	tst	r2, r0
 80059fe:	f103 0304 	add.w	r3, r3, #4
 8005a02:	d0fa      	beq.n	80059fa <_malloc_r+0x16e>
 8005a04:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005a08:	46e0      	mov	r8, ip
 8005a0a:	469e      	mov	lr, r3
 8005a0c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005a10:	4546      	cmp	r6, r8
 8005a12:	d153      	bne.n	8005abc <_malloc_r+0x230>
 8005a14:	f10e 0e01 	add.w	lr, lr, #1
 8005a18:	f01e 0f03 	tst.w	lr, #3
 8005a1c:	f108 0808 	add.w	r8, r8, #8
 8005a20:	d1f4      	bne.n	8005a0c <_malloc_r+0x180>
 8005a22:	0798      	lsls	r0, r3, #30
 8005a24:	d179      	bne.n	8005b1a <_malloc_r+0x28e>
 8005a26:	686b      	ldr	r3, [r5, #4]
 8005a28:	ea23 0302 	bic.w	r3, r3, r2
 8005a2c:	606b      	str	r3, [r5, #4]
 8005a2e:	6868      	ldr	r0, [r5, #4]
 8005a30:	0052      	lsls	r2, r2, #1
 8005a32:	4282      	cmp	r2, r0
 8005a34:	d87c      	bhi.n	8005b30 <_malloc_r+0x2a4>
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	d07a      	beq.n	8005b30 <_malloc_r+0x2a4>
 8005a3a:	4673      	mov	r3, lr
 8005a3c:	4202      	tst	r2, r0
 8005a3e:	d1e1      	bne.n	8005a04 <_malloc_r+0x178>
 8005a40:	3304      	adds	r3, #4
 8005a42:	0052      	lsls	r2, r2, #1
 8005a44:	e7fa      	b.n	8005a3c <_malloc_r+0x1b0>
 8005a46:	0a42      	lsrs	r2, r0, #9
 8005a48:	2a04      	cmp	r2, #4
 8005a4a:	d815      	bhi.n	8005a78 <_malloc_r+0x1ec>
 8005a4c:	0982      	lsrs	r2, r0, #6
 8005a4e:	3238      	adds	r2, #56	; 0x38
 8005a50:	1c57      	adds	r7, r2, #1
 8005a52:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005a56:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8005a5a:	45be      	cmp	lr, r7
 8005a5c:	d126      	bne.n	8005aac <_malloc_r+0x220>
 8005a5e:	2001      	movs	r0, #1
 8005a60:	1092      	asrs	r2, r2, #2
 8005a62:	fa00 f202 	lsl.w	r2, r0, r2
 8005a66:	6868      	ldr	r0, [r5, #4]
 8005a68:	4310      	orrs	r0, r2
 8005a6a:	6068      	str	r0, [r5, #4]
 8005a6c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005a70:	60b7      	str	r7, [r6, #8]
 8005a72:	f8ce 6008 	str.w	r6, [lr, #8]
 8005a76:	e7b3      	b.n	80059e0 <_malloc_r+0x154>
 8005a78:	2a14      	cmp	r2, #20
 8005a7a:	d801      	bhi.n	8005a80 <_malloc_r+0x1f4>
 8005a7c:	325b      	adds	r2, #91	; 0x5b
 8005a7e:	e7e7      	b.n	8005a50 <_malloc_r+0x1c4>
 8005a80:	2a54      	cmp	r2, #84	; 0x54
 8005a82:	d802      	bhi.n	8005a8a <_malloc_r+0x1fe>
 8005a84:	0b02      	lsrs	r2, r0, #12
 8005a86:	326e      	adds	r2, #110	; 0x6e
 8005a88:	e7e2      	b.n	8005a50 <_malloc_r+0x1c4>
 8005a8a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005a8e:	d802      	bhi.n	8005a96 <_malloc_r+0x20a>
 8005a90:	0bc2      	lsrs	r2, r0, #15
 8005a92:	3277      	adds	r2, #119	; 0x77
 8005a94:	e7dc      	b.n	8005a50 <_malloc_r+0x1c4>
 8005a96:	f240 5754 	movw	r7, #1364	; 0x554
 8005a9a:	42ba      	cmp	r2, r7
 8005a9c:	bf9a      	itte	ls
 8005a9e:	0c82      	lsrls	r2, r0, #18
 8005aa0:	327c      	addls	r2, #124	; 0x7c
 8005aa2:	227e      	movhi	r2, #126	; 0x7e
 8005aa4:	e7d4      	b.n	8005a50 <_malloc_r+0x1c4>
 8005aa6:	68bf      	ldr	r7, [r7, #8]
 8005aa8:	45be      	cmp	lr, r7
 8005aaa:	d004      	beq.n	8005ab6 <_malloc_r+0x22a>
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	f022 0203 	bic.w	r2, r2, #3
 8005ab2:	4290      	cmp	r0, r2
 8005ab4:	d3f7      	bcc.n	8005aa6 <_malloc_r+0x21a>
 8005ab6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005aba:	e7d7      	b.n	8005a6c <_malloc_r+0x1e0>
 8005abc:	6870      	ldr	r0, [r6, #4]
 8005abe:	68f7      	ldr	r7, [r6, #12]
 8005ac0:	f020 0003 	bic.w	r0, r0, #3
 8005ac4:	eba0 0a04 	sub.w	sl, r0, r4
 8005ac8:	f1ba 0f0f 	cmp.w	sl, #15
 8005acc:	dd10      	ble.n	8005af0 <_malloc_r+0x264>
 8005ace:	68b2      	ldr	r2, [r6, #8]
 8005ad0:	1933      	adds	r3, r6, r4
 8005ad2:	f044 0401 	orr.w	r4, r4, #1
 8005ad6:	6074      	str	r4, [r6, #4]
 8005ad8:	60d7      	str	r7, [r2, #12]
 8005ada:	60ba      	str	r2, [r7, #8]
 8005adc:	f04a 0201 	orr.w	r2, sl, #1
 8005ae0:	616b      	str	r3, [r5, #20]
 8005ae2:	612b      	str	r3, [r5, #16]
 8005ae4:	60d9      	str	r1, [r3, #12]
 8005ae6:	6099      	str	r1, [r3, #8]
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	f846 a000 	str.w	sl, [r6, r0]
 8005aee:	e6ff      	b.n	80058f0 <_malloc_r+0x64>
 8005af0:	f1ba 0f00 	cmp.w	sl, #0
 8005af4:	db0f      	blt.n	8005b16 <_malloc_r+0x28a>
 8005af6:	4430      	add	r0, r6
 8005af8:	6843      	ldr	r3, [r0, #4]
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	6043      	str	r3, [r0, #4]
 8005b00:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005b04:	4648      	mov	r0, r9
 8005b06:	60df      	str	r7, [r3, #12]
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	f000 f8eb 	bl	8005ce4 <__malloc_unlock>
 8005b0e:	4630      	mov	r0, r6
 8005b10:	b003      	add	sp, #12
 8005b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b16:	463e      	mov	r6, r7
 8005b18:	e77a      	b.n	8005a10 <_malloc_r+0x184>
 8005b1a:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	4584      	cmp	ip, r0
 8005b22:	f43f af7e 	beq.w	8005a22 <_malloc_r+0x196>
 8005b26:	e782      	b.n	8005a2e <_malloc_r+0x1a2>
 8005b28:	20000100 	.word	0x20000100
 8005b2c:	20000108 	.word	0x20000108
 8005b30:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005b34:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005b38:	f026 0603 	bic.w	r6, r6, #3
 8005b3c:	42b4      	cmp	r4, r6
 8005b3e:	d803      	bhi.n	8005b48 <_malloc_r+0x2bc>
 8005b40:	1b33      	subs	r3, r6, r4
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	f300 8095 	bgt.w	8005c72 <_malloc_r+0x3e6>
 8005b48:	4a4f      	ldr	r2, [pc, #316]	; (8005c88 <_malloc_r+0x3fc>)
 8005b4a:	eb0b 0306 	add.w	r3, fp, r6
 8005b4e:	6817      	ldr	r7, [r2, #0]
 8005b50:	4a4e      	ldr	r2, [pc, #312]	; (8005c8c <_malloc_r+0x400>)
 8005b52:	3710      	adds	r7, #16
 8005b54:	6811      	ldr	r1, [r2, #0]
 8005b56:	4427      	add	r7, r4
 8005b58:	3101      	adds	r1, #1
 8005b5a:	d005      	beq.n	8005b68 <_malloc_r+0x2dc>
 8005b5c:	494c      	ldr	r1, [pc, #304]	; (8005c90 <_malloc_r+0x404>)
 8005b5e:	3901      	subs	r1, #1
 8005b60:	440f      	add	r7, r1
 8005b62:	3101      	adds	r1, #1
 8005b64:	4249      	negs	r1, r1
 8005b66:	400f      	ands	r7, r1
 8005b68:	4639      	mov	r1, r7
 8005b6a:	4648      	mov	r0, r9
 8005b6c:	9201      	str	r2, [sp, #4]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	f000 fb90 	bl	8006294 <_sbrk_r>
 8005b74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b78:	4680      	mov	r8, r0
 8005b7a:	d055      	beq.n	8005c28 <_malloc_r+0x39c>
 8005b7c:	9b00      	ldr	r3, [sp, #0]
 8005b7e:	9a01      	ldr	r2, [sp, #4]
 8005b80:	4283      	cmp	r3, r0
 8005b82:	d901      	bls.n	8005b88 <_malloc_r+0x2fc>
 8005b84:	45ab      	cmp	fp, r5
 8005b86:	d14f      	bne.n	8005c28 <_malloc_r+0x39c>
 8005b88:	4842      	ldr	r0, [pc, #264]	; (8005c94 <_malloc_r+0x408>)
 8005b8a:	4543      	cmp	r3, r8
 8005b8c:	6801      	ldr	r1, [r0, #0]
 8005b8e:	4682      	mov	sl, r0
 8005b90:	eb07 0e01 	add.w	lr, r7, r1
 8005b94:	f8c0 e000 	str.w	lr, [r0]
 8005b98:	493f      	ldr	r1, [pc, #252]	; (8005c98 <_malloc_r+0x40c>)
 8005b9a:	d113      	bne.n	8005bc4 <_malloc_r+0x338>
 8005b9c:	420b      	tst	r3, r1
 8005b9e:	d111      	bne.n	8005bc4 <_malloc_r+0x338>
 8005ba0:	68ab      	ldr	r3, [r5, #8]
 8005ba2:	443e      	add	r6, r7
 8005ba4:	f046 0601 	orr.w	r6, r6, #1
 8005ba8:	605e      	str	r6, [r3, #4]
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <_malloc_r+0x410>)
 8005bac:	f8da 3000 	ldr.w	r3, [sl]
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	428b      	cmp	r3, r1
 8005bb4:	bf88      	it	hi
 8005bb6:	6013      	strhi	r3, [r2, #0]
 8005bb8:	4a39      	ldr	r2, [pc, #228]	; (8005ca0 <_malloc_r+0x414>)
 8005bba:	6811      	ldr	r1, [r2, #0]
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	bf88      	it	hi
 8005bc0:	6013      	strhi	r3, [r2, #0]
 8005bc2:	e031      	b.n	8005c28 <_malloc_r+0x39c>
 8005bc4:	6810      	ldr	r0, [r2, #0]
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	bf1b      	ittet	ne
 8005bca:	eba8 0303 	subne.w	r3, r8, r3
 8005bce:	4473      	addne	r3, lr
 8005bd0:	f8c2 8000 	streq.w	r8, [r2]
 8005bd4:	f8ca 3000 	strne.w	r3, [sl]
 8005bd8:	f018 0007 	ands.w	r0, r8, #7
 8005bdc:	bf1c      	itt	ne
 8005bde:	f1c0 0008 	rsbne	r0, r0, #8
 8005be2:	4480      	addne	r8, r0
 8005be4:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <_malloc_r+0x404>)
 8005be6:	4447      	add	r7, r8
 8005be8:	4418      	add	r0, r3
 8005bea:	400f      	ands	r7, r1
 8005bec:	1bc7      	subs	r7, r0, r7
 8005bee:	4639      	mov	r1, r7
 8005bf0:	4648      	mov	r0, r9
 8005bf2:	f000 fb4f 	bl	8006294 <_sbrk_r>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	bf04      	itt	eq
 8005bfa:	4640      	moveq	r0, r8
 8005bfc:	2700      	moveq	r7, #0
 8005bfe:	f8da 3000 	ldr.w	r3, [sl]
 8005c02:	eba0 0008 	sub.w	r0, r0, r8
 8005c06:	443b      	add	r3, r7
 8005c08:	4407      	add	r7, r0
 8005c0a:	f047 0701 	orr.w	r7, r7, #1
 8005c0e:	45ab      	cmp	fp, r5
 8005c10:	f8c5 8008 	str.w	r8, [r5, #8]
 8005c14:	f8ca 3000 	str.w	r3, [sl]
 8005c18:	f8c8 7004 	str.w	r7, [r8, #4]
 8005c1c:	d0c5      	beq.n	8005baa <_malloc_r+0x31e>
 8005c1e:	2e0f      	cmp	r6, #15
 8005c20:	d810      	bhi.n	8005c44 <_malloc_r+0x3b8>
 8005c22:	2301      	movs	r3, #1
 8005c24:	f8c8 3004 	str.w	r3, [r8, #4]
 8005c28:	68ab      	ldr	r3, [r5, #8]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	f022 0203 	bic.w	r2, r2, #3
 8005c30:	4294      	cmp	r4, r2
 8005c32:	eba2 0304 	sub.w	r3, r2, r4
 8005c36:	d801      	bhi.n	8005c3c <_malloc_r+0x3b0>
 8005c38:	2b0f      	cmp	r3, #15
 8005c3a:	dc1a      	bgt.n	8005c72 <_malloc_r+0x3e6>
 8005c3c:	4648      	mov	r0, r9
 8005c3e:	f000 f851 	bl	8005ce4 <__malloc_unlock>
 8005c42:	e630      	b.n	80058a6 <_malloc_r+0x1a>
 8005c44:	2205      	movs	r2, #5
 8005c46:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005c4a:	3e0c      	subs	r6, #12
 8005c4c:	f026 0607 	bic.w	r6, r6, #7
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	4333      	orrs	r3, r6
 8005c56:	f8cb 3004 	str.w	r3, [fp, #4]
 8005c5a:	2e0f      	cmp	r6, #15
 8005c5c:	eb0b 0306 	add.w	r3, fp, r6
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	609a      	str	r2, [r3, #8]
 8005c64:	d9a1      	bls.n	8005baa <_malloc_r+0x31e>
 8005c66:	f10b 0108 	add.w	r1, fp, #8
 8005c6a:	4648      	mov	r0, r9
 8005c6c:	f000 fc20 	bl	80064b0 <_free_r>
 8005c70:	e79b      	b.n	8005baa <_malloc_r+0x31e>
 8005c72:	68ae      	ldr	r6, [r5, #8]
 8005c74:	f044 0201 	orr.w	r2, r4, #1
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	4434      	add	r4, r6
 8005c7e:	6072      	str	r2, [r6, #4]
 8005c80:	60ac      	str	r4, [r5, #8]
 8005c82:	6063      	str	r3, [r4, #4]
 8005c84:	e634      	b.n	80058f0 <_malloc_r+0x64>
 8005c86:	bf00      	nop
 8005c88:	20000750 	.word	0x20000750
 8005c8c:	20000508 	.word	0x20000508
 8005c90:	00001000 	.word	0x00001000
 8005c94:	20000720 	.word	0x20000720
 8005c98:	00000fff 	.word	0x00000fff
 8005c9c:	20000748 	.word	0x20000748
 8005ca0:	2000074c 	.word	0x2000074c

08005ca4 <memchr>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	b2c9      	uxtb	r1, r1
 8005ca8:	4402      	add	r2, r0
 8005caa:	4290      	cmp	r0, r2
 8005cac:	4603      	mov	r3, r0
 8005cae:	d101      	bne.n	8005cb4 <memchr+0x10>
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	bd10      	pop	{r4, pc}
 8005cb4:	781c      	ldrb	r4, [r3, #0]
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	428c      	cmp	r4, r1
 8005cba:	d1f6      	bne.n	8005caa <memchr+0x6>
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd10      	pop	{r4, pc}

08005cc0 <memcpy>:
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	1e43      	subs	r3, r0, #1
 8005cc4:	440a      	add	r2, r1
 8005cc6:	4291      	cmp	r1, r2
 8005cc8:	d100      	bne.n	8005ccc <memcpy+0xc>
 8005cca:	bd10      	pop	{r4, pc}
 8005ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cd4:	e7f7      	b.n	8005cc6 <memcpy+0x6>
	...

08005cd8 <__malloc_lock>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	; (8005ce0 <__malloc_lock+0x8>)
 8005cda:	f000 bca5 	b.w	8006628 <__retarget_lock_acquire_recursive>
 8005cde:	bf00      	nop
 8005ce0:	2000075c 	.word	0x2000075c

08005ce4 <__malloc_unlock>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	; (8005cec <__malloc_unlock+0x8>)
 8005ce6:	f000 bca0 	b.w	800662a <__retarget_lock_release_recursive>
 8005cea:	bf00      	nop
 8005cec:	2000075c 	.word	0x2000075c

08005cf0 <_Balloc>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460e      	mov	r6, r1
 8005cf8:	b93d      	cbnz	r5, 8005d0a <_Balloc+0x1a>
 8005cfa:	2010      	movs	r0, #16
 8005cfc:	f7ff fdbe 	bl	800587c <malloc>
 8005d00:	6260      	str	r0, [r4, #36]	; 0x24
 8005d02:	6045      	str	r5, [r0, #4]
 8005d04:	6085      	str	r5, [r0, #8]
 8005d06:	6005      	str	r5, [r0, #0]
 8005d08:	60c5      	str	r5, [r0, #12]
 8005d0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d0c:	68eb      	ldr	r3, [r5, #12]
 8005d0e:	b183      	cbz	r3, 8005d32 <_Balloc+0x42>
 8005d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d18:	b9b8      	cbnz	r0, 8005d4a <_Balloc+0x5a>
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	fa01 f506 	lsl.w	r5, r1, r6
 8005d20:	1d6a      	adds	r2, r5, #5
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 fb3f 	bl	80063a8 <_calloc_r>
 8005d2a:	b160      	cbz	r0, 8005d46 <_Balloc+0x56>
 8005d2c:	6046      	str	r6, [r0, #4]
 8005d2e:	6085      	str	r5, [r0, #8]
 8005d30:	e00e      	b.n	8005d50 <_Balloc+0x60>
 8005d32:	2221      	movs	r2, #33	; 0x21
 8005d34:	2104      	movs	r1, #4
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 fb36 	bl	80063a8 <_calloc_r>
 8005d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d3e:	60e8      	str	r0, [r5, #12]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e4      	bne.n	8005d10 <_Balloc+0x20>
 8005d46:	2000      	movs	r0, #0
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
 8005d4a:	6802      	ldr	r2, [r0, #0]
 8005d4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d50:	2300      	movs	r3, #0
 8005d52:	6103      	str	r3, [r0, #16]
 8005d54:	60c3      	str	r3, [r0, #12]
 8005d56:	bd70      	pop	{r4, r5, r6, pc}

08005d58 <_Bfree>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460d      	mov	r5, r1
 8005d60:	b93c      	cbnz	r4, 8005d72 <_Bfree+0x1a>
 8005d62:	2010      	movs	r0, #16
 8005d64:	f7ff fd8a 	bl	800587c <malloc>
 8005d68:	6270      	str	r0, [r6, #36]	; 0x24
 8005d6a:	6044      	str	r4, [r0, #4]
 8005d6c:	6084      	str	r4, [r0, #8]
 8005d6e:	6004      	str	r4, [r0, #0]
 8005d70:	60c4      	str	r4, [r0, #12]
 8005d72:	b13d      	cbz	r5, 8005d84 <_Bfree+0x2c>
 8005d74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d76:	686a      	ldr	r2, [r5, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d7e:	6029      	str	r1, [r5, #0]
 8005d80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d84:	bd70      	pop	{r4, r5, r6, pc}

08005d86 <__multadd>:
 8005d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8a:	461f      	mov	r7, r3
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	2300      	movs	r3, #0
 8005d92:	690d      	ldr	r5, [r1, #16]
 8005d94:	f101 0e14 	add.w	lr, r1, #20
 8005d98:	f8de 0000 	ldr.w	r0, [lr]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	b281      	uxth	r1, r0
 8005da0:	fb02 7101 	mla	r1, r2, r1, r7
 8005da4:	0c00      	lsrs	r0, r0, #16
 8005da6:	0c0f      	lsrs	r7, r1, #16
 8005da8:	fb02 7000 	mla	r0, r2, r0, r7
 8005dac:	b289      	uxth	r1, r1
 8005dae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005db2:	429d      	cmp	r5, r3
 8005db4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005db8:	f84e 1b04 	str.w	r1, [lr], #4
 8005dbc:	dcec      	bgt.n	8005d98 <__multadd+0x12>
 8005dbe:	b1d7      	cbz	r7, 8005df6 <__multadd+0x70>
 8005dc0:	68a3      	ldr	r3, [r4, #8]
 8005dc2:	429d      	cmp	r5, r3
 8005dc4:	db12      	blt.n	8005dec <__multadd+0x66>
 8005dc6:	6861      	ldr	r1, [r4, #4]
 8005dc8:	4630      	mov	r0, r6
 8005dca:	3101      	adds	r1, #1
 8005dcc:	f7ff ff90 	bl	8005cf0 <_Balloc>
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	6922      	ldr	r2, [r4, #16]
 8005dd4:	f104 010c 	add.w	r1, r4, #12
 8005dd8:	3202      	adds	r2, #2
 8005dda:	0092      	lsls	r2, r2, #2
 8005ddc:	300c      	adds	r0, #12
 8005dde:	f7ff ff6f 	bl	8005cc0 <memcpy>
 8005de2:	4621      	mov	r1, r4
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7ff ffb7 	bl	8005d58 <_Bfree>
 8005dea:	4644      	mov	r4, r8
 8005dec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005df0:	3501      	adds	r5, #1
 8005df2:	615f      	str	r7, [r3, #20]
 8005df4:	6125      	str	r5, [r4, #16]
 8005df6:	4620      	mov	r0, r4
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dfc <__hi0bits>:
 8005dfc:	0c02      	lsrs	r2, r0, #16
 8005dfe:	0412      	lsls	r2, r2, #16
 8005e00:	4603      	mov	r3, r0
 8005e02:	b9b2      	cbnz	r2, 8005e32 <__hi0bits+0x36>
 8005e04:	0403      	lsls	r3, r0, #16
 8005e06:	2010      	movs	r0, #16
 8005e08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e0c:	bf04      	itt	eq
 8005e0e:	021b      	lsleq	r3, r3, #8
 8005e10:	3008      	addeq	r0, #8
 8005e12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e16:	bf04      	itt	eq
 8005e18:	011b      	lsleq	r3, r3, #4
 8005e1a:	3004      	addeq	r0, #4
 8005e1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e20:	bf04      	itt	eq
 8005e22:	009b      	lsleq	r3, r3, #2
 8005e24:	3002      	addeq	r0, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db06      	blt.n	8005e38 <__hi0bits+0x3c>
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	d503      	bpl.n	8005e36 <__hi0bits+0x3a>
 8005e2e:	3001      	adds	r0, #1
 8005e30:	4770      	bx	lr
 8005e32:	2000      	movs	r0, #0
 8005e34:	e7e8      	b.n	8005e08 <__hi0bits+0xc>
 8005e36:	2020      	movs	r0, #32
 8005e38:	4770      	bx	lr

08005e3a <__lo0bits>:
 8005e3a:	6803      	ldr	r3, [r0, #0]
 8005e3c:	4601      	mov	r1, r0
 8005e3e:	f013 0207 	ands.w	r2, r3, #7
 8005e42:	d00b      	beq.n	8005e5c <__lo0bits+0x22>
 8005e44:	07da      	lsls	r2, r3, #31
 8005e46:	d423      	bmi.n	8005e90 <__lo0bits+0x56>
 8005e48:	0798      	lsls	r0, r3, #30
 8005e4a:	bf49      	itett	mi
 8005e4c:	085b      	lsrmi	r3, r3, #1
 8005e4e:	089b      	lsrpl	r3, r3, #2
 8005e50:	2001      	movmi	r0, #1
 8005e52:	600b      	strmi	r3, [r1, #0]
 8005e54:	bf5c      	itt	pl
 8005e56:	600b      	strpl	r3, [r1, #0]
 8005e58:	2002      	movpl	r0, #2
 8005e5a:	4770      	bx	lr
 8005e5c:	b298      	uxth	r0, r3
 8005e5e:	b9a8      	cbnz	r0, 8005e8c <__lo0bits+0x52>
 8005e60:	2010      	movs	r0, #16
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e68:	bf04      	itt	eq
 8005e6a:	0a1b      	lsreq	r3, r3, #8
 8005e6c:	3008      	addeq	r0, #8
 8005e6e:	071a      	lsls	r2, r3, #28
 8005e70:	bf04      	itt	eq
 8005e72:	091b      	lsreq	r3, r3, #4
 8005e74:	3004      	addeq	r0, #4
 8005e76:	079a      	lsls	r2, r3, #30
 8005e78:	bf04      	itt	eq
 8005e7a:	089b      	lsreq	r3, r3, #2
 8005e7c:	3002      	addeq	r0, #2
 8005e7e:	07da      	lsls	r2, r3, #31
 8005e80:	d402      	bmi.n	8005e88 <__lo0bits+0x4e>
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	d006      	beq.n	8005e94 <__lo0bits+0x5a>
 8005e86:	3001      	adds	r0, #1
 8005e88:	600b      	str	r3, [r1, #0]
 8005e8a:	4770      	bx	lr
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	e7e9      	b.n	8005e64 <__lo0bits+0x2a>
 8005e90:	2000      	movs	r0, #0
 8005e92:	4770      	bx	lr
 8005e94:	2020      	movs	r0, #32
 8005e96:	4770      	bx	lr

08005e98 <__i2b>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	f7ff ff27 	bl	8005cf0 <_Balloc>
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	6144      	str	r4, [r0, #20]
 8005ea6:	6102      	str	r2, [r0, #16]
 8005ea8:	bd10      	pop	{r4, pc}

08005eaa <__multiply>:
 8005eaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eae:	4614      	mov	r4, r2
 8005eb0:	690a      	ldr	r2, [r1, #16]
 8005eb2:	6923      	ldr	r3, [r4, #16]
 8005eb4:	4689      	mov	r9, r1
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	bfbe      	ittt	lt
 8005eba:	460b      	movlt	r3, r1
 8005ebc:	46a1      	movlt	r9, r4
 8005ebe:	461c      	movlt	r4, r3
 8005ec0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ec4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005ec8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005ecc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ed0:	eb07 060a 	add.w	r6, r7, sl
 8005ed4:	429e      	cmp	r6, r3
 8005ed6:	bfc8      	it	gt
 8005ed8:	3101      	addgt	r1, #1
 8005eda:	f7ff ff09 	bl	8005cf0 <_Balloc>
 8005ede:	f100 0514 	add.w	r5, r0, #20
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005eea:	4543      	cmp	r3, r8
 8005eec:	d316      	bcc.n	8005f1c <__multiply+0x72>
 8005eee:	f104 0214 	add.w	r2, r4, #20
 8005ef2:	f109 0114 	add.w	r1, r9, #20
 8005ef6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005efa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	9c01      	ldr	r4, [sp, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	4294      	cmp	r4, r2
 8005f06:	d80c      	bhi.n	8005f22 <__multiply+0x78>
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	dd03      	ble.n	8005f14 <__multiply+0x6a>
 8005f0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d054      	beq.n	8005fbe <__multiply+0x114>
 8005f14:	6106      	str	r6, [r0, #16]
 8005f16:	b003      	add	sp, #12
 8005f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1c:	f843 2b04 	str.w	r2, [r3], #4
 8005f20:	e7e3      	b.n	8005eea <__multiply+0x40>
 8005f22:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f26:	3204      	adds	r2, #4
 8005f28:	f1ba 0f00 	cmp.w	sl, #0
 8005f2c:	d020      	beq.n	8005f70 <__multiply+0xc6>
 8005f2e:	46ae      	mov	lr, r5
 8005f30:	4689      	mov	r9, r1
 8005f32:	f04f 0c00 	mov.w	ip, #0
 8005f36:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f3a:	f8be b000 	ldrh.w	fp, [lr]
 8005f3e:	b2a3      	uxth	r3, r4
 8005f40:	fb0a b303 	mla	r3, sl, r3, fp
 8005f44:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005f48:	f8de 4000 	ldr.w	r4, [lr]
 8005f4c:	4463      	add	r3, ip
 8005f4e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005f52:	fb0a c40b 	mla	r4, sl, fp, ip
 8005f56:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f60:	454f      	cmp	r7, r9
 8005f62:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005f66:	f84e 3b04 	str.w	r3, [lr], #4
 8005f6a:	d8e4      	bhi.n	8005f36 <__multiply+0x8c>
 8005f6c:	f8ce c000 	str.w	ip, [lr]
 8005f70:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005f74:	f1b9 0f00 	cmp.w	r9, #0
 8005f78:	d01f      	beq.n	8005fba <__multiply+0x110>
 8005f7a:	46ae      	mov	lr, r5
 8005f7c:	468c      	mov	ip, r1
 8005f7e:	f04f 0a00 	mov.w	sl, #0
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	f8bc 4000 	ldrh.w	r4, [ip]
 8005f88:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	fb09 b404 	mla	r4, r9, r4, fp
 8005f92:	44a2      	add	sl, r4
 8005f94:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005f98:	f84e 3b04 	str.w	r3, [lr], #4
 8005f9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fa0:	f8be 4000 	ldrh.w	r4, [lr]
 8005fa4:	0c1b      	lsrs	r3, r3, #16
 8005fa6:	fb09 4303 	mla	r3, r9, r3, r4
 8005faa:	4567      	cmp	r7, ip
 8005fac:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005fb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fb4:	d8e6      	bhi.n	8005f84 <__multiply+0xda>
 8005fb6:	f8ce 3000 	str.w	r3, [lr]
 8005fba:	3504      	adds	r5, #4
 8005fbc:	e7a0      	b.n	8005f00 <__multiply+0x56>
 8005fbe:	3e01      	subs	r6, #1
 8005fc0:	e7a2      	b.n	8005f08 <__multiply+0x5e>
	...

08005fc4 <__pow5mult>:
 8005fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc8:	4615      	mov	r5, r2
 8005fca:	f012 0203 	ands.w	r2, r2, #3
 8005fce:	4606      	mov	r6, r0
 8005fd0:	460f      	mov	r7, r1
 8005fd2:	d007      	beq.n	8005fe4 <__pow5mult+0x20>
 8005fd4:	4c21      	ldr	r4, [pc, #132]	; (800605c <__pow5mult+0x98>)
 8005fd6:	3a01      	subs	r2, #1
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fde:	f7ff fed2 	bl	8005d86 <__multadd>
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	10ad      	asrs	r5, r5, #2
 8005fe6:	d035      	beq.n	8006054 <__pow5mult+0x90>
 8005fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fea:	b93c      	cbnz	r4, 8005ffc <__pow5mult+0x38>
 8005fec:	2010      	movs	r0, #16
 8005fee:	f7ff fc45 	bl	800587c <malloc>
 8005ff2:	6270      	str	r0, [r6, #36]	; 0x24
 8005ff4:	6044      	str	r4, [r0, #4]
 8005ff6:	6084      	str	r4, [r0, #8]
 8005ff8:	6004      	str	r4, [r0, #0]
 8005ffa:	60c4      	str	r4, [r0, #12]
 8005ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006004:	b94c      	cbnz	r4, 800601a <__pow5mult+0x56>
 8006006:	f240 2171 	movw	r1, #625	; 0x271
 800600a:	4630      	mov	r0, r6
 800600c:	f7ff ff44 	bl	8005e98 <__i2b>
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	f8c8 0008 	str.w	r0, [r8, #8]
 8006018:	6003      	str	r3, [r0, #0]
 800601a:	f04f 0800 	mov.w	r8, #0
 800601e:	07eb      	lsls	r3, r5, #31
 8006020:	d50a      	bpl.n	8006038 <__pow5mult+0x74>
 8006022:	4639      	mov	r1, r7
 8006024:	4622      	mov	r2, r4
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff ff3f 	bl	8005eaa <__multiply>
 800602c:	4681      	mov	r9, r0
 800602e:	4639      	mov	r1, r7
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff fe91 	bl	8005d58 <_Bfree>
 8006036:	464f      	mov	r7, r9
 8006038:	106d      	asrs	r5, r5, #1
 800603a:	d00b      	beq.n	8006054 <__pow5mult+0x90>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	b938      	cbnz	r0, 8006050 <__pow5mult+0x8c>
 8006040:	4622      	mov	r2, r4
 8006042:	4621      	mov	r1, r4
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ff30 	bl	8005eaa <__multiply>
 800604a:	6020      	str	r0, [r4, #0]
 800604c:	f8c0 8000 	str.w	r8, [r0]
 8006050:	4604      	mov	r4, r0
 8006052:	e7e4      	b.n	800601e <__pow5mult+0x5a>
 8006054:	4638      	mov	r0, r7
 8006056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605a:	bf00      	nop
 800605c:	08006cd0 	.word	0x08006cd0

08006060 <__lshift>:
 8006060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	460c      	mov	r4, r1
 8006066:	4607      	mov	r7, r0
 8006068:	4616      	mov	r6, r2
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006070:	eb0a 0903 	add.w	r9, sl, r3
 8006074:	6849      	ldr	r1, [r1, #4]
 8006076:	68a3      	ldr	r3, [r4, #8]
 8006078:	f109 0501 	add.w	r5, r9, #1
 800607c:	42ab      	cmp	r3, r5
 800607e:	db31      	blt.n	80060e4 <__lshift+0x84>
 8006080:	4638      	mov	r0, r7
 8006082:	f7ff fe35 	bl	8005cf0 <_Balloc>
 8006086:	2200      	movs	r2, #0
 8006088:	4680      	mov	r8, r0
 800608a:	4611      	mov	r1, r2
 800608c:	f100 0314 	add.w	r3, r0, #20
 8006090:	4552      	cmp	r2, sl
 8006092:	db2a      	blt.n	80060ea <__lshift+0x8a>
 8006094:	6920      	ldr	r0, [r4, #16]
 8006096:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800609a:	f104 0114 	add.w	r1, r4, #20
 800609e:	f016 021f 	ands.w	r2, r6, #31
 80060a2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80060a6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80060aa:	d022      	beq.n	80060f2 <__lshift+0x92>
 80060ac:	2000      	movs	r0, #0
 80060ae:	f1c2 0c20 	rsb	ip, r2, #32
 80060b2:	680e      	ldr	r6, [r1, #0]
 80060b4:	4096      	lsls	r6, r2
 80060b6:	4330      	orrs	r0, r6
 80060b8:	f843 0b04 	str.w	r0, [r3], #4
 80060bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80060c0:	458e      	cmp	lr, r1
 80060c2:	fa20 f00c 	lsr.w	r0, r0, ip
 80060c6:	d8f4      	bhi.n	80060b2 <__lshift+0x52>
 80060c8:	6018      	str	r0, [r3, #0]
 80060ca:	b108      	cbz	r0, 80060d0 <__lshift+0x70>
 80060cc:	f109 0502 	add.w	r5, r9, #2
 80060d0:	3d01      	subs	r5, #1
 80060d2:	4638      	mov	r0, r7
 80060d4:	f8c8 5010 	str.w	r5, [r8, #16]
 80060d8:	4621      	mov	r1, r4
 80060da:	f7ff fe3d 	bl	8005d58 <_Bfree>
 80060de:	4640      	mov	r0, r8
 80060e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e4:	3101      	adds	r1, #1
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	e7c8      	b.n	800607c <__lshift+0x1c>
 80060ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80060ee:	3201      	adds	r2, #1
 80060f0:	e7ce      	b.n	8006090 <__lshift+0x30>
 80060f2:	3b04      	subs	r3, #4
 80060f4:	f851 2b04 	ldr.w	r2, [r1], #4
 80060f8:	458e      	cmp	lr, r1
 80060fa:	f843 2f04 	str.w	r2, [r3, #4]!
 80060fe:	d8f9      	bhi.n	80060f4 <__lshift+0x94>
 8006100:	e7e6      	b.n	80060d0 <__lshift+0x70>

08006102 <__mcmp>:
 8006102:	6903      	ldr	r3, [r0, #16]
 8006104:	690a      	ldr	r2, [r1, #16]
 8006106:	b530      	push	{r4, r5, lr}
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	d10c      	bne.n	8006126 <__mcmp+0x24>
 800610c:	0092      	lsls	r2, r2, #2
 800610e:	3014      	adds	r0, #20
 8006110:	3114      	adds	r1, #20
 8006112:	1884      	adds	r4, r0, r2
 8006114:	4411      	add	r1, r2
 8006116:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800611a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800611e:	4295      	cmp	r5, r2
 8006120:	d003      	beq.n	800612a <__mcmp+0x28>
 8006122:	d305      	bcc.n	8006130 <__mcmp+0x2e>
 8006124:	2301      	movs	r3, #1
 8006126:	4618      	mov	r0, r3
 8006128:	bd30      	pop	{r4, r5, pc}
 800612a:	42a0      	cmp	r0, r4
 800612c:	d3f3      	bcc.n	8006116 <__mcmp+0x14>
 800612e:	e7fa      	b.n	8006126 <__mcmp+0x24>
 8006130:	f04f 33ff 	mov.w	r3, #4294967295
 8006134:	e7f7      	b.n	8006126 <__mcmp+0x24>

08006136 <__mdiff>:
 8006136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613a:	460d      	mov	r5, r1
 800613c:	4607      	mov	r7, r0
 800613e:	4611      	mov	r1, r2
 8006140:	4628      	mov	r0, r5
 8006142:	4614      	mov	r4, r2
 8006144:	f7ff ffdd 	bl	8006102 <__mcmp>
 8006148:	1e06      	subs	r6, r0, #0
 800614a:	d108      	bne.n	800615e <__mdiff+0x28>
 800614c:	4631      	mov	r1, r6
 800614e:	4638      	mov	r0, r7
 8006150:	f7ff fdce 	bl	8005cf0 <_Balloc>
 8006154:	2301      	movs	r3, #1
 8006156:	6146      	str	r6, [r0, #20]
 8006158:	6103      	str	r3, [r0, #16]
 800615a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615e:	bfa4      	itt	ge
 8006160:	4623      	movge	r3, r4
 8006162:	462c      	movge	r4, r5
 8006164:	4638      	mov	r0, r7
 8006166:	6861      	ldr	r1, [r4, #4]
 8006168:	bfa6      	itte	ge
 800616a:	461d      	movge	r5, r3
 800616c:	2600      	movge	r6, #0
 800616e:	2601      	movlt	r6, #1
 8006170:	f7ff fdbe 	bl	8005cf0 <_Balloc>
 8006174:	f04f 0c00 	mov.w	ip, #0
 8006178:	60c6      	str	r6, [r0, #12]
 800617a:	692b      	ldr	r3, [r5, #16]
 800617c:	6926      	ldr	r6, [r4, #16]
 800617e:	f104 0214 	add.w	r2, r4, #20
 8006182:	f105 0914 	add.w	r9, r5, #20
 8006186:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800618a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800618e:	f100 0114 	add.w	r1, r0, #20
 8006192:	f852 ab04 	ldr.w	sl, [r2], #4
 8006196:	f859 5b04 	ldr.w	r5, [r9], #4
 800619a:	fa1f f38a 	uxth.w	r3, sl
 800619e:	4463      	add	r3, ip
 80061a0:	b2ac      	uxth	r4, r5
 80061a2:	1b1b      	subs	r3, r3, r4
 80061a4:	0c2c      	lsrs	r4, r5, #16
 80061a6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80061aa:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80061b4:	45c8      	cmp	r8, r9
 80061b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80061ba:	4696      	mov	lr, r2
 80061bc:	f841 4b04 	str.w	r4, [r1], #4
 80061c0:	d8e7      	bhi.n	8006192 <__mdiff+0x5c>
 80061c2:	45be      	cmp	lr, r7
 80061c4:	d305      	bcc.n	80061d2 <__mdiff+0x9c>
 80061c6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80061ca:	b18b      	cbz	r3, 80061f0 <__mdiff+0xba>
 80061cc:	6106      	str	r6, [r0, #16]
 80061ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061d6:	b2a2      	uxth	r2, r4
 80061d8:	4462      	add	r2, ip
 80061da:	1413      	asrs	r3, r2, #16
 80061dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061e0:	b292      	uxth	r2, r2
 80061e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80061e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80061ea:	f841 2b04 	str.w	r2, [r1], #4
 80061ee:	e7e8      	b.n	80061c2 <__mdiff+0x8c>
 80061f0:	3e01      	subs	r6, #1
 80061f2:	e7e8      	b.n	80061c6 <__mdiff+0x90>

080061f4 <__d2b>:
 80061f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80061f8:	461c      	mov	r4, r3
 80061fa:	2101      	movs	r1, #1
 80061fc:	4690      	mov	r8, r2
 80061fe:	9e08      	ldr	r6, [sp, #32]
 8006200:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006202:	f7ff fd75 	bl	8005cf0 <_Balloc>
 8006206:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800620a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800620e:	4607      	mov	r7, r0
 8006210:	bb34      	cbnz	r4, 8006260 <__d2b+0x6c>
 8006212:	9201      	str	r2, [sp, #4]
 8006214:	f1b8 0f00 	cmp.w	r8, #0
 8006218:	d027      	beq.n	800626a <__d2b+0x76>
 800621a:	a802      	add	r0, sp, #8
 800621c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006220:	f7ff fe0b 	bl	8005e3a <__lo0bits>
 8006224:	9900      	ldr	r1, [sp, #0]
 8006226:	b1f0      	cbz	r0, 8006266 <__d2b+0x72>
 8006228:	9a01      	ldr	r2, [sp, #4]
 800622a:	f1c0 0320 	rsb	r3, r0, #32
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	430b      	orrs	r3, r1
 8006234:	40c2      	lsrs	r2, r0
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	9201      	str	r2, [sp, #4]
 800623a:	9b01      	ldr	r3, [sp, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf14      	ite	ne
 8006240:	2102      	movne	r1, #2
 8006242:	2101      	moveq	r1, #1
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	6139      	str	r1, [r7, #16]
 8006248:	b1c4      	cbz	r4, 800627c <__d2b+0x88>
 800624a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800624e:	4404      	add	r4, r0
 8006250:	6034      	str	r4, [r6, #0]
 8006252:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	4638      	mov	r0, r7
 800625a:	b002      	add	sp, #8
 800625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006260:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006264:	e7d5      	b.n	8006212 <__d2b+0x1e>
 8006266:	6179      	str	r1, [r7, #20]
 8006268:	e7e7      	b.n	800623a <__d2b+0x46>
 800626a:	a801      	add	r0, sp, #4
 800626c:	f7ff fde5 	bl	8005e3a <__lo0bits>
 8006270:	2101      	movs	r1, #1
 8006272:	9b01      	ldr	r3, [sp, #4]
 8006274:	6139      	str	r1, [r7, #16]
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	3020      	adds	r0, #32
 800627a:	e7e5      	b.n	8006248 <__d2b+0x54>
 800627c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006280:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006284:	6030      	str	r0, [r6, #0]
 8006286:	6918      	ldr	r0, [r3, #16]
 8006288:	f7ff fdb8 	bl	8005dfc <__hi0bits>
 800628c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006290:	e7e1      	b.n	8006256 <__d2b+0x62>
	...

08006294 <_sbrk_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	2300      	movs	r3, #0
 8006298:	4c05      	ldr	r4, [pc, #20]	; (80062b0 <_sbrk_r+0x1c>)
 800629a:	4605      	mov	r5, r0
 800629c:	4608      	mov	r0, r1
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	f7fd fbe0 	bl	8003a64 <_sbrk>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_sbrk_r+0x1a>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_sbrk_r+0x1a>
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000764 	.word	0x20000764

080062b4 <__ssprint_r>:
 80062b4:	6893      	ldr	r3, [r2, #8]
 80062b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	4681      	mov	r9, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	4617      	mov	r7, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d060      	beq.n	8006386 <__ssprint_r+0xd2>
 80062c4:	f04f 0b00 	mov.w	fp, #0
 80062c8:	465e      	mov	r6, fp
 80062ca:	f8d2 a000 	ldr.w	sl, [r2]
 80062ce:	b356      	cbz	r6, 8006326 <__ssprint_r+0x72>
 80062d0:	68a3      	ldr	r3, [r4, #8]
 80062d2:	429e      	cmp	r6, r3
 80062d4:	d344      	bcc.n	8006360 <__ssprint_r+0xac>
 80062d6:	89a2      	ldrh	r2, [r4, #12]
 80062d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062dc:	d03e      	beq.n	800635c <__ssprint_r+0xa8>
 80062de:	2302      	movs	r3, #2
 80062e0:	6825      	ldr	r5, [r4, #0]
 80062e2:	6921      	ldr	r1, [r4, #16]
 80062e4:	eba5 0801 	sub.w	r8, r5, r1
 80062e8:	6965      	ldr	r5, [r4, #20]
 80062ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062ee:	fb95 f5f3 	sdiv	r5, r5, r3
 80062f2:	f108 0301 	add.w	r3, r8, #1
 80062f6:	4433      	add	r3, r6
 80062f8:	429d      	cmp	r5, r3
 80062fa:	bf38      	it	cc
 80062fc:	461d      	movcc	r5, r3
 80062fe:	0553      	lsls	r3, r2, #21
 8006300:	d546      	bpl.n	8006390 <__ssprint_r+0xdc>
 8006302:	4629      	mov	r1, r5
 8006304:	4648      	mov	r0, r9
 8006306:	f7ff fac1 	bl	800588c <_malloc_r>
 800630a:	b998      	cbnz	r0, 8006334 <__ssprint_r+0x80>
 800630c:	230c      	movs	r3, #12
 800630e:	f8c9 3000 	str.w	r3, [r9]
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631c:	81a3      	strh	r3, [r4, #12]
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	e031      	b.n	800638a <__ssprint_r+0xd6>
 8006326:	f8da b000 	ldr.w	fp, [sl]
 800632a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800632e:	f10a 0a08 	add.w	sl, sl, #8
 8006332:	e7cc      	b.n	80062ce <__ssprint_r+0x1a>
 8006334:	4642      	mov	r2, r8
 8006336:	6921      	ldr	r1, [r4, #16]
 8006338:	9001      	str	r0, [sp, #4]
 800633a:	f7ff fcc1 	bl	8005cc0 <memcpy>
 800633e:	89a2      	ldrh	r2, [r4, #12]
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800634a:	81a2      	strh	r2, [r4, #12]
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	4443      	add	r3, r8
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	4633      	mov	r3, r6
 8006354:	6165      	str	r5, [r4, #20]
 8006356:	eba5 0508 	sub.w	r5, r5, r8
 800635a:	60a5      	str	r5, [r4, #8]
 800635c:	429e      	cmp	r6, r3
 800635e:	d200      	bcs.n	8006362 <__ssprint_r+0xae>
 8006360:	4633      	mov	r3, r6
 8006362:	461a      	mov	r2, r3
 8006364:	4659      	mov	r1, fp
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	f000 f971 	bl	8006650 <memmove>
 800636e:	68a2      	ldr	r2, [r4, #8]
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	1ad2      	subs	r2, r2, r3
 8006374:	60a2      	str	r2, [r4, #8]
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	4413      	add	r3, r2
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	1b9e      	subs	r6, r3, r6
 8006380:	60be      	str	r6, [r7, #8]
 8006382:	2e00      	cmp	r6, #0
 8006384:	d1cf      	bne.n	8006326 <__ssprint_r+0x72>
 8006386:	2000      	movs	r0, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	b003      	add	sp, #12
 800638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006390:	462a      	mov	r2, r5
 8006392:	4648      	mov	r0, r9
 8006394:	f000 f976 	bl	8006684 <_realloc_r>
 8006398:	4603      	mov	r3, r0
 800639a:	2800      	cmp	r0, #0
 800639c:	d1d6      	bne.n	800634c <__ssprint_r+0x98>
 800639e:	6921      	ldr	r1, [r4, #16]
 80063a0:	4648      	mov	r0, r9
 80063a2:	f000 f885 	bl	80064b0 <_free_r>
 80063a6:	e7b1      	b.n	800630c <__ssprint_r+0x58>

080063a8 <_calloc_r>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	4351      	muls	r1, r2
 80063ac:	f7ff fa6e 	bl	800588c <_malloc_r>
 80063b0:	4604      	mov	r4, r0
 80063b2:	b198      	cbz	r0, 80063dc <_calloc_r+0x34>
 80063b4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80063b8:	f022 0203 	bic.w	r2, r2, #3
 80063bc:	3a04      	subs	r2, #4
 80063be:	2a24      	cmp	r2, #36	; 0x24
 80063c0:	d81b      	bhi.n	80063fa <_calloc_r+0x52>
 80063c2:	2a13      	cmp	r2, #19
 80063c4:	d917      	bls.n	80063f6 <_calloc_r+0x4e>
 80063c6:	2100      	movs	r1, #0
 80063c8:	2a1b      	cmp	r2, #27
 80063ca:	6001      	str	r1, [r0, #0]
 80063cc:	6041      	str	r1, [r0, #4]
 80063ce:	d807      	bhi.n	80063e0 <_calloc_r+0x38>
 80063d0:	f100 0308 	add.w	r3, r0, #8
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	4620      	mov	r0, r4
 80063de:	bd10      	pop	{r4, pc}
 80063e0:	2a24      	cmp	r2, #36	; 0x24
 80063e2:	6081      	str	r1, [r0, #8]
 80063e4:	60c1      	str	r1, [r0, #12]
 80063e6:	bf11      	iteee	ne
 80063e8:	f100 0310 	addne.w	r3, r0, #16
 80063ec:	6101      	streq	r1, [r0, #16]
 80063ee:	f100 0318 	addeq.w	r3, r0, #24
 80063f2:	6141      	streq	r1, [r0, #20]
 80063f4:	e7ee      	b.n	80063d4 <_calloc_r+0x2c>
 80063f6:	4603      	mov	r3, r0
 80063f8:	e7ec      	b.n	80063d4 <_calloc_r+0x2c>
 80063fa:	2100      	movs	r1, #0
 80063fc:	f7fd fbc2 	bl	8003b84 <memset>
 8006400:	e7ec      	b.n	80063dc <_calloc_r+0x34>
	...

08006404 <_malloc_trim_r>:
 8006404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006408:	4689      	mov	r9, r1
 800640a:	4f25      	ldr	r7, [pc, #148]	; (80064a0 <_malloc_trim_r+0x9c>)
 800640c:	4606      	mov	r6, r0
 800640e:	f7ff fc63 	bl	8005cd8 <__malloc_lock>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80064ac <_malloc_trim_r+0xa8>
 8006418:	685d      	ldr	r5, [r3, #4]
 800641a:	f1a8 0411 	sub.w	r4, r8, #17
 800641e:	f025 0503 	bic.w	r5, r5, #3
 8006422:	eba4 0409 	sub.w	r4, r4, r9
 8006426:	442c      	add	r4, r5
 8006428:	fbb4 f4f8 	udiv	r4, r4, r8
 800642c:	3c01      	subs	r4, #1
 800642e:	fb08 f404 	mul.w	r4, r8, r4
 8006432:	4544      	cmp	r4, r8
 8006434:	da05      	bge.n	8006442 <_malloc_trim_r+0x3e>
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff fc54 	bl	8005ce4 <__malloc_unlock>
 800643c:	2000      	movs	r0, #0
 800643e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006442:	2100      	movs	r1, #0
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff ff25 	bl	8006294 <_sbrk_r>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	442b      	add	r3, r5
 800644e:	4298      	cmp	r0, r3
 8006450:	d1f1      	bne.n	8006436 <_malloc_trim_r+0x32>
 8006452:	4261      	negs	r1, r4
 8006454:	4630      	mov	r0, r6
 8006456:	f7ff ff1d 	bl	8006294 <_sbrk_r>
 800645a:	3001      	adds	r0, #1
 800645c:	d110      	bne.n	8006480 <_malloc_trim_r+0x7c>
 800645e:	2100      	movs	r1, #0
 8006460:	4630      	mov	r0, r6
 8006462:	f7ff ff17 	bl	8006294 <_sbrk_r>
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	1a83      	subs	r3, r0, r2
 800646a:	2b0f      	cmp	r3, #15
 800646c:	dde3      	ble.n	8006436 <_malloc_trim_r+0x32>
 800646e:	490d      	ldr	r1, [pc, #52]	; (80064a4 <_malloc_trim_r+0xa0>)
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	6809      	ldr	r1, [r1, #0]
 8006476:	6053      	str	r3, [r2, #4]
 8006478:	1a40      	subs	r0, r0, r1
 800647a:	490b      	ldr	r1, [pc, #44]	; (80064a8 <_malloc_trim_r+0xa4>)
 800647c:	6008      	str	r0, [r1, #0]
 800647e:	e7da      	b.n	8006436 <_malloc_trim_r+0x32>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4a09      	ldr	r2, [pc, #36]	; (80064a8 <_malloc_trim_r+0xa4>)
 8006484:	1b2d      	subs	r5, r5, r4
 8006486:	f045 0501 	orr.w	r5, r5, #1
 800648a:	605d      	str	r5, [r3, #4]
 800648c:	6813      	ldr	r3, [r2, #0]
 800648e:	4630      	mov	r0, r6
 8006490:	1b1c      	subs	r4, r3, r4
 8006492:	6014      	str	r4, [r2, #0]
 8006494:	f7ff fc26 	bl	8005ce4 <__malloc_unlock>
 8006498:	2001      	movs	r0, #1
 800649a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649e:	bf00      	nop
 80064a0:	20000100 	.word	0x20000100
 80064a4:	20000508 	.word	0x20000508
 80064a8:	20000720 	.word	0x20000720
 80064ac:	00001000 	.word	0x00001000

080064b0 <_free_r>:
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	4688      	mov	r8, r1
 80064b8:	2900      	cmp	r1, #0
 80064ba:	f000 80ab 	beq.w	8006614 <_free_r+0x164>
 80064be:	f7ff fc0b 	bl	8005cd8 <__malloc_lock>
 80064c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80064c6:	4d54      	ldr	r5, [pc, #336]	; (8006618 <_free_r+0x168>)
 80064c8:	f022 0001 	bic.w	r0, r2, #1
 80064cc:	f1a8 0308 	sub.w	r3, r8, #8
 80064d0:	181f      	adds	r7, r3, r0
 80064d2:	68a9      	ldr	r1, [r5, #8]
 80064d4:	687e      	ldr	r6, [r7, #4]
 80064d6:	428f      	cmp	r7, r1
 80064d8:	f026 0603 	bic.w	r6, r6, #3
 80064dc:	f002 0201 	and.w	r2, r2, #1
 80064e0:	d11b      	bne.n	800651a <_free_r+0x6a>
 80064e2:	4430      	add	r0, r6
 80064e4:	b93a      	cbnz	r2, 80064f6 <_free_r+0x46>
 80064e6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	6899      	ldr	r1, [r3, #8]
 80064ee:	4410      	add	r0, r2
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	60ca      	str	r2, [r1, #12]
 80064f4:	6091      	str	r1, [r2, #8]
 80064f6:	f040 0201 	orr.w	r2, r0, #1
 80064fa:	605a      	str	r2, [r3, #4]
 80064fc:	60ab      	str	r3, [r5, #8]
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <_free_r+0x16c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4298      	cmp	r0, r3
 8006504:	d304      	bcc.n	8006510 <_free_r+0x60>
 8006506:	4b46      	ldr	r3, [pc, #280]	; (8006620 <_free_r+0x170>)
 8006508:	4620      	mov	r0, r4
 800650a:	6819      	ldr	r1, [r3, #0]
 800650c:	f7ff ff7a 	bl	8006404 <_malloc_trim_r>
 8006510:	4620      	mov	r0, r4
 8006512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006516:	f7ff bbe5 	b.w	8005ce4 <__malloc_unlock>
 800651a:	607e      	str	r6, [r7, #4]
 800651c:	2a00      	cmp	r2, #0
 800651e:	d139      	bne.n	8006594 <_free_r+0xe4>
 8006520:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006524:	f105 0e08 	add.w	lr, r5, #8
 8006528:	1a5b      	subs	r3, r3, r1
 800652a:	4408      	add	r0, r1
 800652c:	6899      	ldr	r1, [r3, #8]
 800652e:	4571      	cmp	r1, lr
 8006530:	d032      	beq.n	8006598 <_free_r+0xe8>
 8006532:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006536:	f8c1 e00c 	str.w	lr, [r1, #12]
 800653a:	f8ce 1008 	str.w	r1, [lr, #8]
 800653e:	19b9      	adds	r1, r7, r6
 8006540:	6849      	ldr	r1, [r1, #4]
 8006542:	07c9      	lsls	r1, r1, #31
 8006544:	d40a      	bmi.n	800655c <_free_r+0xac>
 8006546:	4430      	add	r0, r6
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	bb3a      	cbnz	r2, 800659c <_free_r+0xec>
 800654c:	4e35      	ldr	r6, [pc, #212]	; (8006624 <_free_r+0x174>)
 800654e:	42b1      	cmp	r1, r6
 8006550:	d124      	bne.n	800659c <_free_r+0xec>
 8006552:	2201      	movs	r2, #1
 8006554:	616b      	str	r3, [r5, #20]
 8006556:	612b      	str	r3, [r5, #16]
 8006558:	60d9      	str	r1, [r3, #12]
 800655a:	6099      	str	r1, [r3, #8]
 800655c:	f040 0101 	orr.w	r1, r0, #1
 8006560:	6059      	str	r1, [r3, #4]
 8006562:	5018      	str	r0, [r3, r0]
 8006564:	2a00      	cmp	r2, #0
 8006566:	d1d3      	bne.n	8006510 <_free_r+0x60>
 8006568:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800656c:	d21a      	bcs.n	80065a4 <_free_r+0xf4>
 800656e:	2201      	movs	r2, #1
 8006570:	08c0      	lsrs	r0, r0, #3
 8006572:	1081      	asrs	r1, r0, #2
 8006574:	408a      	lsls	r2, r1
 8006576:	6869      	ldr	r1, [r5, #4]
 8006578:	3001      	adds	r0, #1
 800657a:	430a      	orrs	r2, r1
 800657c:	606a      	str	r2, [r5, #4]
 800657e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006582:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006586:	3a08      	subs	r2, #8
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	6099      	str	r1, [r3, #8]
 800658c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006590:	60cb      	str	r3, [r1, #12]
 8006592:	e7bd      	b.n	8006510 <_free_r+0x60>
 8006594:	2200      	movs	r2, #0
 8006596:	e7d2      	b.n	800653e <_free_r+0x8e>
 8006598:	2201      	movs	r2, #1
 800659a:	e7d0      	b.n	800653e <_free_r+0x8e>
 800659c:	68fe      	ldr	r6, [r7, #12]
 800659e:	60ce      	str	r6, [r1, #12]
 80065a0:	60b1      	str	r1, [r6, #8]
 80065a2:	e7db      	b.n	800655c <_free_r+0xac>
 80065a4:	0a42      	lsrs	r2, r0, #9
 80065a6:	2a04      	cmp	r2, #4
 80065a8:	d813      	bhi.n	80065d2 <_free_r+0x122>
 80065aa:	0982      	lsrs	r2, r0, #6
 80065ac:	3238      	adds	r2, #56	; 0x38
 80065ae:	1c51      	adds	r1, r2, #1
 80065b0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80065b4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80065b8:	428e      	cmp	r6, r1
 80065ba:	d124      	bne.n	8006606 <_free_r+0x156>
 80065bc:	2001      	movs	r0, #1
 80065be:	1092      	asrs	r2, r2, #2
 80065c0:	fa00 f202 	lsl.w	r2, r0, r2
 80065c4:	6868      	ldr	r0, [r5, #4]
 80065c6:	4302      	orrs	r2, r0
 80065c8:	606a      	str	r2, [r5, #4]
 80065ca:	60de      	str	r6, [r3, #12]
 80065cc:	6099      	str	r1, [r3, #8]
 80065ce:	60b3      	str	r3, [r6, #8]
 80065d0:	e7de      	b.n	8006590 <_free_r+0xe0>
 80065d2:	2a14      	cmp	r2, #20
 80065d4:	d801      	bhi.n	80065da <_free_r+0x12a>
 80065d6:	325b      	adds	r2, #91	; 0x5b
 80065d8:	e7e9      	b.n	80065ae <_free_r+0xfe>
 80065da:	2a54      	cmp	r2, #84	; 0x54
 80065dc:	d802      	bhi.n	80065e4 <_free_r+0x134>
 80065de:	0b02      	lsrs	r2, r0, #12
 80065e0:	326e      	adds	r2, #110	; 0x6e
 80065e2:	e7e4      	b.n	80065ae <_free_r+0xfe>
 80065e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80065e8:	d802      	bhi.n	80065f0 <_free_r+0x140>
 80065ea:	0bc2      	lsrs	r2, r0, #15
 80065ec:	3277      	adds	r2, #119	; 0x77
 80065ee:	e7de      	b.n	80065ae <_free_r+0xfe>
 80065f0:	f240 5154 	movw	r1, #1364	; 0x554
 80065f4:	428a      	cmp	r2, r1
 80065f6:	bf9a      	itte	ls
 80065f8:	0c82      	lsrls	r2, r0, #18
 80065fa:	327c      	addls	r2, #124	; 0x7c
 80065fc:	227e      	movhi	r2, #126	; 0x7e
 80065fe:	e7d6      	b.n	80065ae <_free_r+0xfe>
 8006600:	6889      	ldr	r1, [r1, #8]
 8006602:	428e      	cmp	r6, r1
 8006604:	d004      	beq.n	8006610 <_free_r+0x160>
 8006606:	684a      	ldr	r2, [r1, #4]
 8006608:	f022 0203 	bic.w	r2, r2, #3
 800660c:	4290      	cmp	r0, r2
 800660e:	d3f7      	bcc.n	8006600 <_free_r+0x150>
 8006610:	68ce      	ldr	r6, [r1, #12]
 8006612:	e7da      	b.n	80065ca <_free_r+0x11a>
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006618:	20000100 	.word	0x20000100
 800661c:	2000050c 	.word	0x2000050c
 8006620:	20000750 	.word	0x20000750
 8006624:	20000108 	.word	0x20000108

08006628 <__retarget_lock_acquire_recursive>:
 8006628:	4770      	bx	lr

0800662a <__retarget_lock_release_recursive>:
 800662a:	4770      	bx	lr

0800662c <__ascii_mbtowc>:
 800662c:	b082      	sub	sp, #8
 800662e:	b901      	cbnz	r1, 8006632 <__ascii_mbtowc+0x6>
 8006630:	a901      	add	r1, sp, #4
 8006632:	b142      	cbz	r2, 8006646 <__ascii_mbtowc+0x1a>
 8006634:	b14b      	cbz	r3, 800664a <__ascii_mbtowc+0x1e>
 8006636:	7813      	ldrb	r3, [r2, #0]
 8006638:	600b      	str	r3, [r1, #0]
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	1c10      	adds	r0, r2, #0
 800663e:	bf18      	it	ne
 8006640:	2001      	movne	r0, #1
 8006642:	b002      	add	sp, #8
 8006644:	4770      	bx	lr
 8006646:	4610      	mov	r0, r2
 8006648:	e7fb      	b.n	8006642 <__ascii_mbtowc+0x16>
 800664a:	f06f 0001 	mvn.w	r0, #1
 800664e:	e7f8      	b.n	8006642 <__ascii_mbtowc+0x16>

08006650 <memmove>:
 8006650:	4288      	cmp	r0, r1
 8006652:	b510      	push	{r4, lr}
 8006654:	eb01 0302 	add.w	r3, r1, r2
 8006658:	d803      	bhi.n	8006662 <memmove+0x12>
 800665a:	1e42      	subs	r2, r0, #1
 800665c:	4299      	cmp	r1, r3
 800665e:	d10c      	bne.n	800667a <memmove+0x2a>
 8006660:	bd10      	pop	{r4, pc}
 8006662:	4298      	cmp	r0, r3
 8006664:	d2f9      	bcs.n	800665a <memmove+0xa>
 8006666:	1881      	adds	r1, r0, r2
 8006668:	1ad2      	subs	r2, r2, r3
 800666a:	42d3      	cmn	r3, r2
 800666c:	d100      	bne.n	8006670 <memmove+0x20>
 800666e:	bd10      	pop	{r4, pc}
 8006670:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006674:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006678:	e7f7      	b.n	800666a <memmove+0x1a>
 800667a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800667e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006682:	e7eb      	b.n	800665c <memmove+0xc>

08006684 <_realloc_r>:
 8006684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4682      	mov	sl, r0
 800668a:	460c      	mov	r4, r1
 800668c:	b929      	cbnz	r1, 800669a <_realloc_r+0x16>
 800668e:	4611      	mov	r1, r2
 8006690:	b003      	add	sp, #12
 8006692:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006696:	f7ff b8f9 	b.w	800588c <_malloc_r>
 800669a:	9201      	str	r2, [sp, #4]
 800669c:	f7ff fb1c 	bl	8005cd8 <__malloc_lock>
 80066a0:	9a01      	ldr	r2, [sp, #4]
 80066a2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80066a6:	f102 080b 	add.w	r8, r2, #11
 80066aa:	f1b8 0f16 	cmp.w	r8, #22
 80066ae:	f1a4 0908 	sub.w	r9, r4, #8
 80066b2:	f025 0603 	bic.w	r6, r5, #3
 80066b6:	d90a      	bls.n	80066ce <_realloc_r+0x4a>
 80066b8:	f038 0807 	bics.w	r8, r8, #7
 80066bc:	d509      	bpl.n	80066d2 <_realloc_r+0x4e>
 80066be:	230c      	movs	r3, #12
 80066c0:	2700      	movs	r7, #0
 80066c2:	f8ca 3000 	str.w	r3, [sl]
 80066c6:	4638      	mov	r0, r7
 80066c8:	b003      	add	sp, #12
 80066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ce:	f04f 0810 	mov.w	r8, #16
 80066d2:	4590      	cmp	r8, r2
 80066d4:	d3f3      	bcc.n	80066be <_realloc_r+0x3a>
 80066d6:	45b0      	cmp	r8, r6
 80066d8:	f340 8148 	ble.w	800696c <_realloc_r+0x2e8>
 80066dc:	4ba9      	ldr	r3, [pc, #676]	; (8006984 <_realloc_r+0x300>)
 80066de:	eb09 0106 	add.w	r1, r9, r6
 80066e2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80066e6:	469b      	mov	fp, r3
 80066e8:	4571      	cmp	r1, lr
 80066ea:	684b      	ldr	r3, [r1, #4]
 80066ec:	d005      	beq.n	80066fa <_realloc_r+0x76>
 80066ee:	f023 0001 	bic.w	r0, r3, #1
 80066f2:	4408      	add	r0, r1
 80066f4:	6840      	ldr	r0, [r0, #4]
 80066f6:	07c7      	lsls	r7, r0, #31
 80066f8:	d447      	bmi.n	800678a <_realloc_r+0x106>
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	4571      	cmp	r1, lr
 8006700:	eb06 0703 	add.w	r7, r6, r3
 8006704:	d119      	bne.n	800673a <_realloc_r+0xb6>
 8006706:	f108 0010 	add.w	r0, r8, #16
 800670a:	4287      	cmp	r7, r0
 800670c:	db3f      	blt.n	800678e <_realloc_r+0x10a>
 800670e:	eba7 0708 	sub.w	r7, r7, r8
 8006712:	eb09 0308 	add.w	r3, r9, r8
 8006716:	f047 0701 	orr.w	r7, r7, #1
 800671a:	f8cb 3008 	str.w	r3, [fp, #8]
 800671e:	605f      	str	r7, [r3, #4]
 8006720:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006724:	4650      	mov	r0, sl
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	ea43 0308 	orr.w	r3, r3, r8
 800672e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006732:	f7ff fad7 	bl	8005ce4 <__malloc_unlock>
 8006736:	4627      	mov	r7, r4
 8006738:	e7c5      	b.n	80066c6 <_realloc_r+0x42>
 800673a:	45b8      	cmp	r8, r7
 800673c:	dc27      	bgt.n	800678e <_realloc_r+0x10a>
 800673e:	68cb      	ldr	r3, [r1, #12]
 8006740:	688a      	ldr	r2, [r1, #8]
 8006742:	60d3      	str	r3, [r2, #12]
 8006744:	609a      	str	r2, [r3, #8]
 8006746:	eba7 0008 	sub.w	r0, r7, r8
 800674a:	280f      	cmp	r0, #15
 800674c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006750:	eb09 0207 	add.w	r2, r9, r7
 8006754:	f240 810c 	bls.w	8006970 <_realloc_r+0x2ec>
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	eb09 0108 	add.w	r1, r9, r8
 8006760:	ea43 0308 	orr.w	r3, r3, r8
 8006764:	f040 0001 	orr.w	r0, r0, #1
 8006768:	f8c9 3004 	str.w	r3, [r9, #4]
 800676c:	6048      	str	r0, [r1, #4]
 800676e:	6853      	ldr	r3, [r2, #4]
 8006770:	3108      	adds	r1, #8
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	6053      	str	r3, [r2, #4]
 8006778:	4650      	mov	r0, sl
 800677a:	f7ff fe99 	bl	80064b0 <_free_r>
 800677e:	4650      	mov	r0, sl
 8006780:	f7ff fab0 	bl	8005ce4 <__malloc_unlock>
 8006784:	f109 0708 	add.w	r7, r9, #8
 8006788:	e79d      	b.n	80066c6 <_realloc_r+0x42>
 800678a:	2300      	movs	r3, #0
 800678c:	4619      	mov	r1, r3
 800678e:	07e8      	lsls	r0, r5, #31
 8006790:	f100 8085 	bmi.w	800689e <_realloc_r+0x21a>
 8006794:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006798:	eba9 0505 	sub.w	r5, r9, r5
 800679c:	6868      	ldr	r0, [r5, #4]
 800679e:	f020 0003 	bic.w	r0, r0, #3
 80067a2:	4430      	add	r0, r6
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d077      	beq.n	8006898 <_realloc_r+0x214>
 80067a8:	4571      	cmp	r1, lr
 80067aa:	d151      	bne.n	8006850 <_realloc_r+0x1cc>
 80067ac:	4403      	add	r3, r0
 80067ae:	f108 0110 	add.w	r1, r8, #16
 80067b2:	428b      	cmp	r3, r1
 80067b4:	db70      	blt.n	8006898 <_realloc_r+0x214>
 80067b6:	462f      	mov	r7, r5
 80067b8:	68ea      	ldr	r2, [r5, #12]
 80067ba:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80067be:	60ca      	str	r2, [r1, #12]
 80067c0:	6091      	str	r1, [r2, #8]
 80067c2:	1f32      	subs	r2, r6, #4
 80067c4:	2a24      	cmp	r2, #36	; 0x24
 80067c6:	d83c      	bhi.n	8006842 <_realloc_r+0x1be>
 80067c8:	2a13      	cmp	r2, #19
 80067ca:	d937      	bls.n	800683c <_realloc_r+0x1b8>
 80067cc:	6821      	ldr	r1, [r4, #0]
 80067ce:	2a1b      	cmp	r2, #27
 80067d0:	60a9      	str	r1, [r5, #8]
 80067d2:	6861      	ldr	r1, [r4, #4]
 80067d4:	60e9      	str	r1, [r5, #12]
 80067d6:	d81c      	bhi.n	8006812 <_realloc_r+0x18e>
 80067d8:	f105 0210 	add.w	r2, r5, #16
 80067dc:	f104 0108 	add.w	r1, r4, #8
 80067e0:	6808      	ldr	r0, [r1, #0]
 80067e2:	6010      	str	r0, [r2, #0]
 80067e4:	6848      	ldr	r0, [r1, #4]
 80067e6:	6050      	str	r0, [r2, #4]
 80067e8:	6889      	ldr	r1, [r1, #8]
 80067ea:	6091      	str	r1, [r2, #8]
 80067ec:	eba3 0308 	sub.w	r3, r3, r8
 80067f0:	eb05 0208 	add.w	r2, r5, r8
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	f8cb 2008 	str.w	r2, [fp, #8]
 80067fc:	6053      	str	r3, [r2, #4]
 80067fe:	686b      	ldr	r3, [r5, #4]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	ea43 0308 	orr.w	r3, r3, r8
 8006808:	606b      	str	r3, [r5, #4]
 800680a:	4650      	mov	r0, sl
 800680c:	f7ff fa6a 	bl	8005ce4 <__malloc_unlock>
 8006810:	e759      	b.n	80066c6 <_realloc_r+0x42>
 8006812:	68a1      	ldr	r1, [r4, #8]
 8006814:	2a24      	cmp	r2, #36	; 0x24
 8006816:	6129      	str	r1, [r5, #16]
 8006818:	68e1      	ldr	r1, [r4, #12]
 800681a:	bf18      	it	ne
 800681c:	f105 0218 	addne.w	r2, r5, #24
 8006820:	6169      	str	r1, [r5, #20]
 8006822:	bf09      	itett	eq
 8006824:	6922      	ldreq	r2, [r4, #16]
 8006826:	f104 0110 	addne.w	r1, r4, #16
 800682a:	61aa      	streq	r2, [r5, #24]
 800682c:	6960      	ldreq	r0, [r4, #20]
 800682e:	bf02      	ittt	eq
 8006830:	f105 0220 	addeq.w	r2, r5, #32
 8006834:	f104 0118 	addeq.w	r1, r4, #24
 8006838:	61e8      	streq	r0, [r5, #28]
 800683a:	e7d1      	b.n	80067e0 <_realloc_r+0x15c>
 800683c:	463a      	mov	r2, r7
 800683e:	4621      	mov	r1, r4
 8006840:	e7ce      	b.n	80067e0 <_realloc_r+0x15c>
 8006842:	4621      	mov	r1, r4
 8006844:	4638      	mov	r0, r7
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	f7ff ff02 	bl	8006650 <memmove>
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	e7cd      	b.n	80067ec <_realloc_r+0x168>
 8006850:	18c7      	adds	r7, r0, r3
 8006852:	45b8      	cmp	r8, r7
 8006854:	dc20      	bgt.n	8006898 <_realloc_r+0x214>
 8006856:	68cb      	ldr	r3, [r1, #12]
 8006858:	688a      	ldr	r2, [r1, #8]
 800685a:	60d3      	str	r3, [r2, #12]
 800685c:	609a      	str	r2, [r3, #8]
 800685e:	4628      	mov	r0, r5
 8006860:	68eb      	ldr	r3, [r5, #12]
 8006862:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006866:	60d3      	str	r3, [r2, #12]
 8006868:	609a      	str	r2, [r3, #8]
 800686a:	1f32      	subs	r2, r6, #4
 800686c:	2a24      	cmp	r2, #36	; 0x24
 800686e:	d843      	bhi.n	80068f8 <_realloc_r+0x274>
 8006870:	2a13      	cmp	r2, #19
 8006872:	d93f      	bls.n	80068f4 <_realloc_r+0x270>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	2a1b      	cmp	r2, #27
 8006878:	60ab      	str	r3, [r5, #8]
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	60eb      	str	r3, [r5, #12]
 800687e:	d824      	bhi.n	80068ca <_realloc_r+0x246>
 8006880:	f105 0010 	add.w	r0, r5, #16
 8006884:	f104 0308 	add.w	r3, r4, #8
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	6002      	str	r2, [r0, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	6042      	str	r2, [r0, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	6083      	str	r3, [r0, #8]
 8006894:	46a9      	mov	r9, r5
 8006896:	e756      	b.n	8006746 <_realloc_r+0xc2>
 8006898:	4580      	cmp	r8, r0
 800689a:	4607      	mov	r7, r0
 800689c:	dddf      	ble.n	800685e <_realloc_r+0x1da>
 800689e:	4611      	mov	r1, r2
 80068a0:	4650      	mov	r0, sl
 80068a2:	f7fe fff3 	bl	800588c <_malloc_r>
 80068a6:	4607      	mov	r7, r0
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d0ae      	beq.n	800680a <_realloc_r+0x186>
 80068ac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80068b0:	f1a0 0208 	sub.w	r2, r0, #8
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	444b      	add	r3, r9
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d120      	bne.n	8006900 <_realloc_r+0x27c>
 80068be:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80068c2:	f027 0703 	bic.w	r7, r7, #3
 80068c6:	4437      	add	r7, r6
 80068c8:	e73d      	b.n	8006746 <_realloc_r+0xc2>
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	2a24      	cmp	r2, #36	; 0x24
 80068ce:	612b      	str	r3, [r5, #16]
 80068d0:	68e3      	ldr	r3, [r4, #12]
 80068d2:	bf18      	it	ne
 80068d4:	f105 0018 	addne.w	r0, r5, #24
 80068d8:	616b      	str	r3, [r5, #20]
 80068da:	bf09      	itett	eq
 80068dc:	6923      	ldreq	r3, [r4, #16]
 80068de:	f104 0310 	addne.w	r3, r4, #16
 80068e2:	61ab      	streq	r3, [r5, #24]
 80068e4:	6962      	ldreq	r2, [r4, #20]
 80068e6:	bf02      	ittt	eq
 80068e8:	f105 0020 	addeq.w	r0, r5, #32
 80068ec:	f104 0318 	addeq.w	r3, r4, #24
 80068f0:	61ea      	streq	r2, [r5, #28]
 80068f2:	e7c9      	b.n	8006888 <_realloc_r+0x204>
 80068f4:	4623      	mov	r3, r4
 80068f6:	e7c7      	b.n	8006888 <_realloc_r+0x204>
 80068f8:	4621      	mov	r1, r4
 80068fa:	f7ff fea9 	bl	8006650 <memmove>
 80068fe:	e7c9      	b.n	8006894 <_realloc_r+0x210>
 8006900:	1f32      	subs	r2, r6, #4
 8006902:	2a24      	cmp	r2, #36	; 0x24
 8006904:	d82e      	bhi.n	8006964 <_realloc_r+0x2e0>
 8006906:	2a13      	cmp	r2, #19
 8006908:	d929      	bls.n	800695e <_realloc_r+0x2da>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	2a1b      	cmp	r2, #27
 800690e:	6003      	str	r3, [r0, #0]
 8006910:	6863      	ldr	r3, [r4, #4]
 8006912:	6043      	str	r3, [r0, #4]
 8006914:	d80e      	bhi.n	8006934 <_realloc_r+0x2b0>
 8006916:	f100 0308 	add.w	r3, r0, #8
 800691a:	f104 0208 	add.w	r2, r4, #8
 800691e:	6811      	ldr	r1, [r2, #0]
 8006920:	6019      	str	r1, [r3, #0]
 8006922:	6851      	ldr	r1, [r2, #4]
 8006924:	6059      	str	r1, [r3, #4]
 8006926:	6892      	ldr	r2, [r2, #8]
 8006928:	609a      	str	r2, [r3, #8]
 800692a:	4621      	mov	r1, r4
 800692c:	4650      	mov	r0, sl
 800692e:	f7ff fdbf 	bl	80064b0 <_free_r>
 8006932:	e76a      	b.n	800680a <_realloc_r+0x186>
 8006934:	68a3      	ldr	r3, [r4, #8]
 8006936:	2a24      	cmp	r2, #36	; 0x24
 8006938:	6083      	str	r3, [r0, #8]
 800693a:	68e3      	ldr	r3, [r4, #12]
 800693c:	bf18      	it	ne
 800693e:	f104 0210 	addne.w	r2, r4, #16
 8006942:	60c3      	str	r3, [r0, #12]
 8006944:	bf09      	itett	eq
 8006946:	6923      	ldreq	r3, [r4, #16]
 8006948:	f100 0310 	addne.w	r3, r0, #16
 800694c:	6103      	streq	r3, [r0, #16]
 800694e:	6961      	ldreq	r1, [r4, #20]
 8006950:	bf02      	ittt	eq
 8006952:	f100 0318 	addeq.w	r3, r0, #24
 8006956:	f104 0218 	addeq.w	r2, r4, #24
 800695a:	6141      	streq	r1, [r0, #20]
 800695c:	e7df      	b.n	800691e <_realloc_r+0x29a>
 800695e:	4603      	mov	r3, r0
 8006960:	4622      	mov	r2, r4
 8006962:	e7dc      	b.n	800691e <_realloc_r+0x29a>
 8006964:	4621      	mov	r1, r4
 8006966:	f7ff fe73 	bl	8006650 <memmove>
 800696a:	e7de      	b.n	800692a <_realloc_r+0x2a6>
 800696c:	4637      	mov	r7, r6
 800696e:	e6ea      	b.n	8006746 <_realloc_r+0xc2>
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	431f      	orrs	r7, r3
 8006976:	f8c9 7004 	str.w	r7, [r9, #4]
 800697a:	6853      	ldr	r3, [r2, #4]
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	6053      	str	r3, [r2, #4]
 8006982:	e6fc      	b.n	800677e <_realloc_r+0xfa>
 8006984:	20000100 	.word	0x20000100

08006988 <__ascii_wctomb>:
 8006988:	b149      	cbz	r1, 800699e <__ascii_wctomb+0x16>
 800698a:	2aff      	cmp	r2, #255	; 0xff
 800698c:	bf8b      	itete	hi
 800698e:	238a      	movhi	r3, #138	; 0x8a
 8006990:	700a      	strbls	r2, [r1, #0]
 8006992:	6003      	strhi	r3, [r0, #0]
 8006994:	2001      	movls	r0, #1
 8006996:	bf88      	it	hi
 8006998:	f04f 30ff 	movhi.w	r0, #4294967295
 800699c:	4770      	bx	lr
 800699e:	4608      	mov	r0, r1
 80069a0:	4770      	bx	lr

080069a2 <abort>:
 80069a2:	b508      	push	{r3, lr}
 80069a4:	2006      	movs	r0, #6
 80069a6:	f000 f82b 	bl	8006a00 <raise>
 80069aa:	2001      	movs	r0, #1
 80069ac:	f7fd f854 	bl	8003a58 <_exit>

080069b0 <_raise_r>:
 80069b0:	291f      	cmp	r1, #31
 80069b2:	b538      	push	{r3, r4, r5, lr}
 80069b4:	4604      	mov	r4, r0
 80069b6:	460d      	mov	r5, r1
 80069b8:	d904      	bls.n	80069c4 <_raise_r+0x14>
 80069ba:	2316      	movs	r3, #22
 80069bc:	6003      	str	r3, [r0, #0]
 80069be:	f04f 30ff 	mov.w	r0, #4294967295
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069c6:	b112      	cbz	r2, 80069ce <_raise_r+0x1e>
 80069c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069cc:	b94b      	cbnz	r3, 80069e2 <_raise_r+0x32>
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 f830 	bl	8006a34 <_getpid_r>
 80069d4:	462a      	mov	r2, r5
 80069d6:	4601      	mov	r1, r0
 80069d8:	4620      	mov	r0, r4
 80069da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069de:	f000 b817 	b.w	8006a10 <_kill_r>
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d00a      	beq.n	80069fc <_raise_r+0x4c>
 80069e6:	1c59      	adds	r1, r3, #1
 80069e8:	d103      	bne.n	80069f2 <_raise_r+0x42>
 80069ea:	2316      	movs	r3, #22
 80069ec:	6003      	str	r3, [r0, #0]
 80069ee:	2001      	movs	r0, #1
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
 80069f2:	2400      	movs	r4, #0
 80069f4:	4628      	mov	r0, r5
 80069f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069fa:	4798      	blx	r3
 80069fc:	2000      	movs	r0, #0
 80069fe:	bd38      	pop	{r3, r4, r5, pc}

08006a00 <raise>:
 8006a00:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <raise+0xc>)
 8006a02:	4601      	mov	r1, r0
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	f7ff bfd3 	b.w	80069b0 <_raise_r>
 8006a0a:	bf00      	nop
 8006a0c:	2000000c 	.word	0x2000000c

08006a10 <_kill_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	2300      	movs	r3, #0
 8006a14:	4c06      	ldr	r4, [pc, #24]	; (8006a30 <_kill_r+0x20>)
 8006a16:	4605      	mov	r5, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	f7fd f813 	bl	8003a48 <_kill>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d102      	bne.n	8006a2c <_kill_r+0x1c>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	b103      	cbz	r3, 8006a2c <_kill_r+0x1c>
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	bd38      	pop	{r3, r4, r5, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000764 	.word	0x20000764

08006a34 <_getpid_r>:
 8006a34:	f7fd b806 	b.w	8003a44 <_getpid>

08006a38 <_init>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	bf00      	nop
 8006a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3e:	bc08      	pop	{r3}
 8006a40:	469e      	mov	lr, r3
 8006a42:	4770      	bx	lr

08006a44 <_fini>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr
